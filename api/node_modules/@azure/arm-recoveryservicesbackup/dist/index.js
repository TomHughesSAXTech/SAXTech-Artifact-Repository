'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link StorageType} that the service accepts. */
exports.KnownStorageType = void 0;
(function (KnownStorageType) {
    /** Invalid */
    KnownStorageType["Invalid"] = "Invalid";
    /** GeoRedundant */
    KnownStorageType["GeoRedundant"] = "GeoRedundant";
    /** LocallyRedundant */
    KnownStorageType["LocallyRedundant"] = "LocallyRedundant";
    /** ZoneRedundant */
    KnownStorageType["ZoneRedundant"] = "ZoneRedundant";
    /** ReadAccessGeoZoneRedundant */
    KnownStorageType["ReadAccessGeoZoneRedundant"] = "ReadAccessGeoZoneRedundant";
})(exports.KnownStorageType || (exports.KnownStorageType = {}));
/** Known values of {@link StorageTypeState} that the service accepts. */
exports.KnownStorageTypeState = void 0;
(function (KnownStorageTypeState) {
    /** Invalid */
    KnownStorageTypeState["Invalid"] = "Invalid";
    /** Locked */
    KnownStorageTypeState["Locked"] = "Locked";
    /** Unlocked */
    KnownStorageTypeState["Unlocked"] = "Unlocked";
})(exports.KnownStorageTypeState || (exports.KnownStorageTypeState = {}));
/** Known values of {@link DedupState} that the service accepts. */
exports.KnownDedupState = void 0;
(function (KnownDedupState) {
    /** Invalid */
    KnownDedupState["Invalid"] = "Invalid";
    /** Enabled */
    KnownDedupState["Enabled"] = "Enabled";
    /** Disabled */
    KnownDedupState["Disabled"] = "Disabled";
})(exports.KnownDedupState || (exports.KnownDedupState = {}));
/** Known values of {@link XcoolState} that the service accepts. */
exports.KnownXcoolState = void 0;
(function (KnownXcoolState) {
    /** Invalid */
    KnownXcoolState["Invalid"] = "Invalid";
    /** Enabled */
    KnownXcoolState["Enabled"] = "Enabled";
    /** Disabled */
    KnownXcoolState["Disabled"] = "Disabled";
})(exports.KnownXcoolState || (exports.KnownXcoolState = {}));
/** Known values of {@link DataSourceType} that the service accepts. */
exports.KnownDataSourceType = void 0;
(function (KnownDataSourceType) {
    /** Invalid */
    KnownDataSourceType["Invalid"] = "Invalid";
    /** VM */
    KnownDataSourceType["VM"] = "VM";
    /** FileFolder */
    KnownDataSourceType["FileFolder"] = "FileFolder";
    /** AzureSqlDb */
    KnownDataSourceType["AzureSqlDb"] = "AzureSqlDb";
    /** Sqldb */
    KnownDataSourceType["Sqldb"] = "SQLDB";
    /** Exchange */
    KnownDataSourceType["Exchange"] = "Exchange";
    /** Sharepoint */
    KnownDataSourceType["Sharepoint"] = "Sharepoint";
    /** VMwareVM */
    KnownDataSourceType["VMwareVM"] = "VMwareVM";
    /** SystemState */
    KnownDataSourceType["SystemState"] = "SystemState";
    /** Client */
    KnownDataSourceType["Client"] = "Client";
    /** GenericDataSource */
    KnownDataSourceType["GenericDataSource"] = "GenericDataSource";
    /** SQLDataBase */
    KnownDataSourceType["SQLDataBase"] = "SQLDataBase";
    /** AzureFileShare */
    KnownDataSourceType["AzureFileShare"] = "AzureFileShare";
    /** SAPHanaDatabase */
    KnownDataSourceType["SAPHanaDatabase"] = "SAPHanaDatabase";
    /** SAPAseDatabase */
    KnownDataSourceType["SAPAseDatabase"] = "SAPAseDatabase";
    /** SAPHanaDBInstance */
    KnownDataSourceType["SAPHanaDBInstance"] = "SAPHanaDBInstance";
})(exports.KnownDataSourceType || (exports.KnownDataSourceType = {}));
/** Known values of {@link ValidationStatus} that the service accepts. */
exports.KnownValidationStatus = void 0;
(function (KnownValidationStatus) {
    /** Invalid */
    KnownValidationStatus["Invalid"] = "Invalid";
    /** Succeeded */
    KnownValidationStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownValidationStatus["Failed"] = "Failed";
})(exports.KnownValidationStatus || (exports.KnownValidationStatus = {}));
/** Known values of {@link ProtectionStatus} that the service accepts. */
exports.KnownProtectionStatus = void 0;
(function (KnownProtectionStatus) {
    /** Invalid */
    KnownProtectionStatus["Invalid"] = "Invalid";
    /** NotProtected */
    KnownProtectionStatus["NotProtected"] = "NotProtected";
    /** Protecting */
    KnownProtectionStatus["Protecting"] = "Protecting";
    /** Protected */
    KnownProtectionStatus["Protected"] = "Protected";
    /** ProtectionFailed */
    KnownProtectionStatus["ProtectionFailed"] = "ProtectionFailed";
})(exports.KnownProtectionStatus || (exports.KnownProtectionStatus = {}));
/** Known values of {@link FabricName} that the service accepts. */
exports.KnownFabricName = void 0;
(function (KnownFabricName) {
    /** Invalid */
    KnownFabricName["Invalid"] = "Invalid";
    /** Azure */
    KnownFabricName["Azure"] = "Azure";
})(exports.KnownFabricName || (exports.KnownFabricName = {}));
/** Known values of {@link SupportStatus} that the service accepts. */
exports.KnownSupportStatus = void 0;
(function (KnownSupportStatus) {
    /** Invalid */
    KnownSupportStatus["Invalid"] = "Invalid";
    /** Supported */
    KnownSupportStatus["Supported"] = "Supported";
    /** DefaultOFF */
    KnownSupportStatus["DefaultOFF"] = "DefaultOFF";
    /** DefaultON */
    KnownSupportStatus["DefaultON"] = "DefaultON";
    /** NotSupported */
    KnownSupportStatus["NotSupported"] = "NotSupported";
})(exports.KnownSupportStatus || (exports.KnownSupportStatus = {}));
/** Known values of {@link ProtectionIntentItemType} that the service accepts. */
exports.KnownProtectionIntentItemType = void 0;
(function (KnownProtectionIntentItemType) {
    /** Invalid */
    KnownProtectionIntentItemType["Invalid"] = "Invalid";
    /** AzureResourceItem */
    KnownProtectionIntentItemType["AzureResourceItem"] = "AzureResourceItem";
    /** RecoveryServiceVaultItem */
    KnownProtectionIntentItemType["RecoveryServiceVaultItem"] = "RecoveryServiceVaultItem";
    /** AzureWorkloadContainerAutoProtectionIntent */
    KnownProtectionIntentItemType["AzureWorkloadContainerAutoProtectionIntent"] = "AzureWorkloadContainerAutoProtectionIntent";
    /** AzureWorkloadAutoProtectionIntent */
    KnownProtectionIntentItemType["AzureWorkloadAutoProtectionIntent"] = "AzureWorkloadAutoProtectionIntent";
    /** AzureWorkloadSQLAutoProtectionIntent */
    KnownProtectionIntentItemType["AzureWorkloadSQLAutoProtectionIntent"] = "AzureWorkloadSQLAutoProtectionIntent";
})(exports.KnownProtectionIntentItemType || (exports.KnownProtectionIntentItemType = {}));
/** Known values of {@link BackupManagementType} that the service accepts. */
exports.KnownBackupManagementType = void 0;
(function (KnownBackupManagementType) {
    /** Invalid */
    KnownBackupManagementType["Invalid"] = "Invalid";
    /** AzureIaasVM */
    KnownBackupManagementType["AzureIaasVM"] = "AzureIaasVM";
    /** MAB */
    KnownBackupManagementType["MAB"] = "MAB";
    /** DPM */
    KnownBackupManagementType["DPM"] = "DPM";
    /** AzureBackupServer */
    KnownBackupManagementType["AzureBackupServer"] = "AzureBackupServer";
    /** AzureSql */
    KnownBackupManagementType["AzureSql"] = "AzureSql";
    /** AzureStorage */
    KnownBackupManagementType["AzureStorage"] = "AzureStorage";
    /** AzureWorkload */
    KnownBackupManagementType["AzureWorkload"] = "AzureWorkload";
    /** DefaultBackup */
    KnownBackupManagementType["DefaultBackup"] = "DefaultBackup";
})(exports.KnownBackupManagementType || (exports.KnownBackupManagementType = {}));
/** Known values of {@link UsagesUnit} that the service accepts. */
exports.KnownUsagesUnit = void 0;
(function (KnownUsagesUnit) {
    /** Count */
    KnownUsagesUnit["Count"] = "Count";
    /** Bytes */
    KnownUsagesUnit["Bytes"] = "Bytes";
    /** Seconds */
    KnownUsagesUnit["Seconds"] = "Seconds";
    /** Percent */
    KnownUsagesUnit["Percent"] = "Percent";
    /** CountPerSecond */
    KnownUsagesUnit["CountPerSecond"] = "CountPerSecond";
    /** BytesPerSecond */
    KnownUsagesUnit["BytesPerSecond"] = "BytesPerSecond";
})(exports.KnownUsagesUnit || (exports.KnownUsagesUnit = {}));
/** Known values of {@link EnhancedSecurityState} that the service accepts. */
exports.KnownEnhancedSecurityState = void 0;
(function (KnownEnhancedSecurityState) {
    /** Invalid */
    KnownEnhancedSecurityState["Invalid"] = "Invalid";
    /** Enabled */
    KnownEnhancedSecurityState["Enabled"] = "Enabled";
    /** Disabled */
    KnownEnhancedSecurityState["Disabled"] = "Disabled";
})(exports.KnownEnhancedSecurityState || (exports.KnownEnhancedSecurityState = {}));
/** Known values of {@link SoftDeleteFeatureState} that the service accepts. */
exports.KnownSoftDeleteFeatureState = void 0;
(function (KnownSoftDeleteFeatureState) {
    /** Invalid */
    KnownSoftDeleteFeatureState["Invalid"] = "Invalid";
    /** Enabled */
    KnownSoftDeleteFeatureState["Enabled"] = "Enabled";
    /** Disabled */
    KnownSoftDeleteFeatureState["Disabled"] = "Disabled";
    /** AlwaysON */
    KnownSoftDeleteFeatureState["AlwaysON"] = "AlwaysON";
})(exports.KnownSoftDeleteFeatureState || (exports.KnownSoftDeleteFeatureState = {}));
/** Known values of {@link EncryptionAtRestType} that the service accepts. */
exports.KnownEncryptionAtRestType = void 0;
(function (KnownEncryptionAtRestType) {
    /** Invalid */
    KnownEncryptionAtRestType["Invalid"] = "Invalid";
    /** MicrosoftManaged */
    KnownEncryptionAtRestType["MicrosoftManaged"] = "MicrosoftManaged";
    /** CustomerManaged */
    KnownEncryptionAtRestType["CustomerManaged"] = "CustomerManaged";
})(exports.KnownEncryptionAtRestType || (exports.KnownEncryptionAtRestType = {}));
/** Known values of {@link LastUpdateStatus} that the service accepts. */
exports.KnownLastUpdateStatus = void 0;
(function (KnownLastUpdateStatus) {
    /** Invalid */
    KnownLastUpdateStatus["Invalid"] = "Invalid";
    /** NotEnabled */
    KnownLastUpdateStatus["NotEnabled"] = "NotEnabled";
    /** PartiallySucceeded */
    KnownLastUpdateStatus["PartiallySucceeded"] = "PartiallySucceeded";
    /** PartiallyFailed */
    KnownLastUpdateStatus["PartiallyFailed"] = "PartiallyFailed";
    /** Failed */
    KnownLastUpdateStatus["Failed"] = "Failed";
    /** Succeeded */
    KnownLastUpdateStatus["Succeeded"] = "Succeeded";
    /** Initialized */
    KnownLastUpdateStatus["Initialized"] = "Initialized";
    /** FirstInitialization */
    KnownLastUpdateStatus["FirstInitialization"] = "FirstInitialization";
})(exports.KnownLastUpdateStatus || (exports.KnownLastUpdateStatus = {}));
/** Known values of {@link InfrastructureEncryptionState} that the service accepts. */
exports.KnownInfrastructureEncryptionState = void 0;
(function (KnownInfrastructureEncryptionState) {
    /** Invalid */
    KnownInfrastructureEncryptionState["Invalid"] = "Invalid";
    /** Disabled */
    KnownInfrastructureEncryptionState["Disabled"] = "Disabled";
    /** Enabled */
    KnownInfrastructureEncryptionState["Enabled"] = "Enabled";
})(exports.KnownInfrastructureEncryptionState || (exports.KnownInfrastructureEncryptionState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Pending */
    KnownProvisioningState["Pending"] = "Pending";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link VaultSubResourceType} that the service accepts. */
exports.KnownVaultSubResourceType = void 0;
(function (KnownVaultSubResourceType) {
    /** AzureBackup */
    KnownVaultSubResourceType["AzureBackup"] = "AzureBackup";
    /** AzureBackupSecondary */
    KnownVaultSubResourceType["AzureBackupSecondary"] = "AzureBackup_secondary";
    /** AzureSiteRecovery */
    KnownVaultSubResourceType["AzureSiteRecovery"] = "AzureSiteRecovery";
})(exports.KnownVaultSubResourceType || (exports.KnownVaultSubResourceType = {}));
/** Known values of {@link PrivateEndpointConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointConnectionStatus = void 0;
(function (KnownPrivateEndpointConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateEndpointConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateEndpointConnectionStatus || (exports.KnownPrivateEndpointConnectionStatus = {}));
/** Known values of {@link OperationStatusValues} that the service accepts. */
exports.KnownOperationStatusValues = void 0;
(function (KnownOperationStatusValues) {
    /** Invalid */
    KnownOperationStatusValues["Invalid"] = "Invalid";
    /** InProgress */
    KnownOperationStatusValues["InProgress"] = "InProgress";
    /** Succeeded */
    KnownOperationStatusValues["Succeeded"] = "Succeeded";
    /** Failed */
    KnownOperationStatusValues["Failed"] = "Failed";
    /** Canceled */
    KnownOperationStatusValues["Canceled"] = "Canceled";
})(exports.KnownOperationStatusValues || (exports.KnownOperationStatusValues = {}));
/** Known values of {@link DataMoveLevel} that the service accepts. */
exports.KnownDataMoveLevel = void 0;
(function (KnownDataMoveLevel) {
    /** Invalid */
    KnownDataMoveLevel["Invalid"] = "Invalid";
    /** Vault */
    KnownDataMoveLevel["Vault"] = "Vault";
    /** Container */
    KnownDataMoveLevel["Container"] = "Container";
})(exports.KnownDataMoveLevel || (exports.KnownDataMoveLevel = {}));
/** Known values of {@link CreateMode} that the service accepts. */
exports.KnownCreateMode = void 0;
(function (KnownCreateMode) {
    /** Invalid */
    KnownCreateMode["Invalid"] = "Invalid";
    /** Default */
    KnownCreateMode["Default"] = "Default";
    /** Recover */
    KnownCreateMode["Recover"] = "Recover";
})(exports.KnownCreateMode || (exports.KnownCreateMode = {}));
/** Known values of {@link BackupEngineType} that the service accepts. */
exports.KnownBackupEngineType = void 0;
(function (KnownBackupEngineType) {
    /** Invalid */
    KnownBackupEngineType["Invalid"] = "Invalid";
    /** DpmBackupEngine */
    KnownBackupEngineType["DpmBackupEngine"] = "DpmBackupEngine";
    /** AzureBackupServerEngine */
    KnownBackupEngineType["AzureBackupServerEngine"] = "AzureBackupServerEngine";
})(exports.KnownBackupEngineType || (exports.KnownBackupEngineType = {}));
/** Known values of {@link ProtectionState} that the service accepts. */
exports.KnownProtectionState = void 0;
(function (KnownProtectionState) {
    /** Invalid */
    KnownProtectionState["Invalid"] = "Invalid";
    /** IRPending */
    KnownProtectionState["IRPending"] = "IRPending";
    /** Protected */
    KnownProtectionState["Protected"] = "Protected";
    /** ProtectionError */
    KnownProtectionState["ProtectionError"] = "ProtectionError";
    /** ProtectionStopped */
    KnownProtectionState["ProtectionStopped"] = "ProtectionStopped";
    /** ProtectionPaused */
    KnownProtectionState["ProtectionPaused"] = "ProtectionPaused";
    /** BackupsSuspended */
    KnownProtectionState["BackupsSuspended"] = "BackupsSuspended";
})(exports.KnownProtectionState || (exports.KnownProtectionState = {}));
/** Known values of {@link ResourceHealthStatus} that the service accepts. */
exports.KnownResourceHealthStatus = void 0;
(function (KnownResourceHealthStatus) {
    /** Healthy */
    KnownResourceHealthStatus["Healthy"] = "Healthy";
    /** TransientDegraded */
    KnownResourceHealthStatus["TransientDegraded"] = "TransientDegraded";
    /** PersistentDegraded */
    KnownResourceHealthStatus["PersistentDegraded"] = "PersistentDegraded";
    /** TransientUnhealthy */
    KnownResourceHealthStatus["TransientUnhealthy"] = "TransientUnhealthy";
    /** PersistentUnhealthy */
    KnownResourceHealthStatus["PersistentUnhealthy"] = "PersistentUnhealthy";
    /** Invalid */
    KnownResourceHealthStatus["Invalid"] = "Invalid";
})(exports.KnownResourceHealthStatus || (exports.KnownResourceHealthStatus = {}));
/** Known values of {@link RecoveryType} that the service accepts. */
exports.KnownRecoveryType = void 0;
(function (KnownRecoveryType) {
    /** Invalid */
    KnownRecoveryType["Invalid"] = "Invalid";
    /** OriginalLocation */
    KnownRecoveryType["OriginalLocation"] = "OriginalLocation";
    /** AlternateLocation */
    KnownRecoveryType["AlternateLocation"] = "AlternateLocation";
    /** RestoreDisks */
    KnownRecoveryType["RestoreDisks"] = "RestoreDisks";
    /** Offline */
    KnownRecoveryType["Offline"] = "Offline";
})(exports.KnownRecoveryType || (exports.KnownRecoveryType = {}));
/** Known values of {@link CopyOptions} that the service accepts. */
exports.KnownCopyOptions = void 0;
(function (KnownCopyOptions) {
    /** Invalid */
    KnownCopyOptions["Invalid"] = "Invalid";
    /** CreateCopy */
    KnownCopyOptions["CreateCopy"] = "CreateCopy";
    /** Skip */
    KnownCopyOptions["Skip"] = "Skip";
    /** Overwrite */
    KnownCopyOptions["Overwrite"] = "Overwrite";
    /** FailOnConflict */
    KnownCopyOptions["FailOnConflict"] = "FailOnConflict";
})(exports.KnownCopyOptions || (exports.KnownCopyOptions = {}));
/** Known values of {@link RestoreRequestType} that the service accepts. */
exports.KnownRestoreRequestType = void 0;
(function (KnownRestoreRequestType) {
    /** Invalid */
    KnownRestoreRequestType["Invalid"] = "Invalid";
    /** FullShareRestore */
    KnownRestoreRequestType["FullShareRestore"] = "FullShareRestore";
    /** ItemLevelRestore */
    KnownRestoreRequestType["ItemLevelRestore"] = "ItemLevelRestore";
})(exports.KnownRestoreRequestType || (exports.KnownRestoreRequestType = {}));
/** Known values of {@link WorkloadType} that the service accepts. */
exports.KnownWorkloadType = void 0;
(function (KnownWorkloadType) {
    /** Invalid */
    KnownWorkloadType["Invalid"] = "Invalid";
    /** VM */
    KnownWorkloadType["VM"] = "VM";
    /** FileFolder */
    KnownWorkloadType["FileFolder"] = "FileFolder";
    /** AzureSqlDb */
    KnownWorkloadType["AzureSqlDb"] = "AzureSqlDb";
    /** Sqldb */
    KnownWorkloadType["Sqldb"] = "SQLDB";
    /** Exchange */
    KnownWorkloadType["Exchange"] = "Exchange";
    /** Sharepoint */
    KnownWorkloadType["Sharepoint"] = "Sharepoint";
    /** VMwareVM */
    KnownWorkloadType["VMwareVM"] = "VMwareVM";
    /** SystemState */
    KnownWorkloadType["SystemState"] = "SystemState";
    /** Client */
    KnownWorkloadType["Client"] = "Client";
    /** GenericDataSource */
    KnownWorkloadType["GenericDataSource"] = "GenericDataSource";
    /** SQLDataBase */
    KnownWorkloadType["SQLDataBase"] = "SQLDataBase";
    /** AzureFileShare */
    KnownWorkloadType["AzureFileShare"] = "AzureFileShare";
    /** SAPHanaDatabase */
    KnownWorkloadType["SAPHanaDatabase"] = "SAPHanaDatabase";
    /** SAPAseDatabase */
    KnownWorkloadType["SAPAseDatabase"] = "SAPAseDatabase";
    /** SAPHanaDBInstance */
    KnownWorkloadType["SAPHanaDBInstance"] = "SAPHanaDBInstance";
})(exports.KnownWorkloadType || (exports.KnownWorkloadType = {}));
/** Known values of {@link PolicyType} that the service accepts. */
exports.KnownPolicyType = void 0;
(function (KnownPolicyType) {
    /** Invalid */
    KnownPolicyType["Invalid"] = "Invalid";
    /** Full */
    KnownPolicyType["Full"] = "Full";
    /** Differential */
    KnownPolicyType["Differential"] = "Differential";
    /** Log */
    KnownPolicyType["Log"] = "Log";
    /** CopyOnlyFull */
    KnownPolicyType["CopyOnlyFull"] = "CopyOnlyFull";
    /** Incremental */
    KnownPolicyType["Incremental"] = "Incremental";
    /** SnapshotFull */
    KnownPolicyType["SnapshotFull"] = "SnapshotFull";
    /** SnapshotCopyOnlyFull */
    KnownPolicyType["SnapshotCopyOnlyFull"] = "SnapshotCopyOnlyFull";
})(exports.KnownPolicyType || (exports.KnownPolicyType = {}));
/** Known values of {@link TieringMode} that the service accepts. */
exports.KnownTieringMode = void 0;
(function (KnownTieringMode) {
    /** Invalid */
    KnownTieringMode["Invalid"] = "Invalid";
    /** TierRecommended */
    KnownTieringMode["TierRecommended"] = "TierRecommended";
    /** TierAfter */
    KnownTieringMode["TierAfter"] = "TierAfter";
    /** DoNotTier */
    KnownTieringMode["DoNotTier"] = "DoNotTier";
})(exports.KnownTieringMode || (exports.KnownTieringMode = {}));
/** Known values of {@link RetentionDurationType} that the service accepts. */
exports.KnownRetentionDurationType = void 0;
(function (KnownRetentionDurationType) {
    /** Invalid */
    KnownRetentionDurationType["Invalid"] = "Invalid";
    /** Days */
    KnownRetentionDurationType["Days"] = "Days";
    /** Weeks */
    KnownRetentionDurationType["Weeks"] = "Weeks";
    /** Months */
    KnownRetentionDurationType["Months"] = "Months";
    /** Years */
    KnownRetentionDurationType["Years"] = "Years";
})(exports.KnownRetentionDurationType || (exports.KnownRetentionDurationType = {}));
/** Known values of {@link HealthStatus} that the service accepts. */
exports.KnownHealthStatus = void 0;
(function (KnownHealthStatus) {
    /** Passed */
    KnownHealthStatus["Passed"] = "Passed";
    /** ActionRequired */
    KnownHealthStatus["ActionRequired"] = "ActionRequired";
    /** ActionSuggested */
    KnownHealthStatus["ActionSuggested"] = "ActionSuggested";
    /** Invalid */
    KnownHealthStatus["Invalid"] = "Invalid";
})(exports.KnownHealthStatus || (exports.KnownHealthStatus = {}));
/** Known values of {@link IaasvmPolicyType} that the service accepts. */
exports.KnownIaasvmPolicyType = void 0;
(function (KnownIaasvmPolicyType) {
    /** Invalid */
    KnownIaasvmPolicyType["Invalid"] = "Invalid";
    /** V1 */
    KnownIaasvmPolicyType["V1"] = "V1";
    /** V2 */
    KnownIaasvmPolicyType["V2"] = "V2";
})(exports.KnownIaasvmPolicyType || (exports.KnownIaasvmPolicyType = {}));
/** Known values of {@link ProtectedItemState} that the service accepts. */
exports.KnownProtectedItemState = void 0;
(function (KnownProtectedItemState) {
    /** Invalid */
    KnownProtectedItemState["Invalid"] = "Invalid";
    /** IRPending */
    KnownProtectedItemState["IRPending"] = "IRPending";
    /** Protected */
    KnownProtectedItemState["Protected"] = "Protected";
    /** ProtectionError */
    KnownProtectedItemState["ProtectionError"] = "ProtectionError";
    /** ProtectionStopped */
    KnownProtectedItemState["ProtectionStopped"] = "ProtectionStopped";
    /** ProtectionPaused */
    KnownProtectedItemState["ProtectionPaused"] = "ProtectionPaused";
    /** BackupsSuspended */
    KnownProtectedItemState["BackupsSuspended"] = "BackupsSuspended";
})(exports.KnownProtectedItemState || (exports.KnownProtectedItemState = {}));
/** Known values of {@link LastBackupStatus} that the service accepts. */
exports.KnownLastBackupStatus = void 0;
(function (KnownLastBackupStatus) {
    /** Invalid */
    KnownLastBackupStatus["Invalid"] = "Invalid";
    /** Healthy */
    KnownLastBackupStatus["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownLastBackupStatus["Unhealthy"] = "Unhealthy";
    /** IRPending */
    KnownLastBackupStatus["IRPending"] = "IRPending";
})(exports.KnownLastBackupStatus || (exports.KnownLastBackupStatus = {}));
/** Known values of {@link ProtectedItemHealthStatus} that the service accepts. */
exports.KnownProtectedItemHealthStatus = void 0;
(function (KnownProtectedItemHealthStatus) {
    /** Invalid */
    KnownProtectedItemHealthStatus["Invalid"] = "Invalid";
    /** Healthy */
    KnownProtectedItemHealthStatus["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownProtectedItemHealthStatus["Unhealthy"] = "Unhealthy";
    /** NotReachable */
    KnownProtectedItemHealthStatus["NotReachable"] = "NotReachable";
    /** IRPending */
    KnownProtectedItemHealthStatus["IRPending"] = "IRPending";
})(exports.KnownProtectedItemHealthStatus || (exports.KnownProtectedItemHealthStatus = {}));
/** Known values of {@link RestorePointType} that the service accepts. */
exports.KnownRestorePointType = void 0;
(function (KnownRestorePointType) {
    /** Invalid */
    KnownRestorePointType["Invalid"] = "Invalid";
    /** Full */
    KnownRestorePointType["Full"] = "Full";
    /** Log */
    KnownRestorePointType["Log"] = "Log";
    /** Differential */
    KnownRestorePointType["Differential"] = "Differential";
    /** Incremental */
    KnownRestorePointType["Incremental"] = "Incremental";
    /** SnapshotFull */
    KnownRestorePointType["SnapshotFull"] = "SnapshotFull";
    /** SnapshotCopyOnlyFull */
    KnownRestorePointType["SnapshotCopyOnlyFull"] = "SnapshotCopyOnlyFull";
})(exports.KnownRestorePointType || (exports.KnownRestorePointType = {}));
/** Known values of {@link OverwriteOptions} that the service accepts. */
exports.KnownOverwriteOptions = void 0;
(function (KnownOverwriteOptions) {
    /** Invalid */
    KnownOverwriteOptions["Invalid"] = "Invalid";
    /** FailOnConflict */
    KnownOverwriteOptions["FailOnConflict"] = "FailOnConflict";
    /** Overwrite */
    KnownOverwriteOptions["Overwrite"] = "Overwrite";
})(exports.KnownOverwriteOptions || (exports.KnownOverwriteOptions = {}));
/** Known values of {@link RecoveryMode} that the service accepts. */
exports.KnownRecoveryMode = void 0;
(function (KnownRecoveryMode) {
    /** Invalid */
    KnownRecoveryMode["Invalid"] = "Invalid";
    /** FileRecovery */
    KnownRecoveryMode["FileRecovery"] = "FileRecovery";
    /** WorkloadRecovery */
    KnownRecoveryMode["WorkloadRecovery"] = "WorkloadRecovery";
})(exports.KnownRecoveryMode || (exports.KnownRecoveryMode = {}));
/** Known values of {@link SQLDataDirectoryType} that the service accepts. */
exports.KnownSQLDataDirectoryType = void 0;
(function (KnownSQLDataDirectoryType) {
    /** Invalid */
    KnownSQLDataDirectoryType["Invalid"] = "Invalid";
    /** Data */
    KnownSQLDataDirectoryType["Data"] = "Data";
    /** Log */
    KnownSQLDataDirectoryType["Log"] = "Log";
})(exports.KnownSQLDataDirectoryType || (exports.KnownSQLDataDirectoryType = {}));
/** Known values of {@link RestorePointQueryType} that the service accepts. */
exports.KnownRestorePointQueryType = void 0;
(function (KnownRestorePointQueryType) {
    /** Invalid */
    KnownRestorePointQueryType["Invalid"] = "Invalid";
    /** Full */
    KnownRestorePointQueryType["Full"] = "Full";
    /** Log */
    KnownRestorePointQueryType["Log"] = "Log";
    /** Differential */
    KnownRestorePointQueryType["Differential"] = "Differential";
    /** FullAndDifferential */
    KnownRestorePointQueryType["FullAndDifferential"] = "FullAndDifferential";
    /** All */
    KnownRestorePointQueryType["All"] = "All";
    /** Incremental */
    KnownRestorePointQueryType["Incremental"] = "Incremental";
    /** SnapshotFull */
    KnownRestorePointQueryType["SnapshotFull"] = "SnapshotFull";
    /** SnapshotCopyOnlyFull */
    KnownRestorePointQueryType["SnapshotCopyOnlyFull"] = "SnapshotCopyOnlyFull";
})(exports.KnownRestorePointQueryType || (exports.KnownRestorePointQueryType = {}));
/** Known values of {@link JobStatus} that the service accepts. */
exports.KnownJobStatus = void 0;
(function (KnownJobStatus) {
    /** Invalid */
    KnownJobStatus["Invalid"] = "Invalid";
    /** InProgress */
    KnownJobStatus["InProgress"] = "InProgress";
    /** Completed */
    KnownJobStatus["Completed"] = "Completed";
    /** Failed */
    KnownJobStatus["Failed"] = "Failed";
    /** CompletedWithWarnings */
    KnownJobStatus["CompletedWithWarnings"] = "CompletedWithWarnings";
    /** Cancelled */
    KnownJobStatus["Cancelled"] = "Cancelled";
    /** Cancelling */
    KnownJobStatus["Cancelling"] = "Cancelling";
})(exports.KnownJobStatus || (exports.KnownJobStatus = {}));
/** Known values of {@link JobOperationType} that the service accepts. */
exports.KnownJobOperationType = void 0;
(function (KnownJobOperationType) {
    /** Invalid */
    KnownJobOperationType["Invalid"] = "Invalid";
    /** Register */
    KnownJobOperationType["Register"] = "Register";
    /** UnRegister */
    KnownJobOperationType["UnRegister"] = "UnRegister";
    /** ConfigureBackup */
    KnownJobOperationType["ConfigureBackup"] = "ConfigureBackup";
    /** Backup */
    KnownJobOperationType["Backup"] = "Backup";
    /** Restore */
    KnownJobOperationType["Restore"] = "Restore";
    /** DisableBackup */
    KnownJobOperationType["DisableBackup"] = "DisableBackup";
    /** DeleteBackupData */
    KnownJobOperationType["DeleteBackupData"] = "DeleteBackupData";
    /** CrossRegionRestore */
    KnownJobOperationType["CrossRegionRestore"] = "CrossRegionRestore";
    /** Undelete */
    KnownJobOperationType["Undelete"] = "Undelete";
    /** UpdateCustomerManagedKey */
    KnownJobOperationType["UpdateCustomerManagedKey"] = "UpdateCustomerManagedKey";
})(exports.KnownJobOperationType || (exports.KnownJobOperationType = {}));
/** Known values of {@link RetentionScheduleFormat} that the service accepts. */
exports.KnownRetentionScheduleFormat = void 0;
(function (KnownRetentionScheduleFormat) {
    /** Invalid */
    KnownRetentionScheduleFormat["Invalid"] = "Invalid";
    /** Daily */
    KnownRetentionScheduleFormat["Daily"] = "Daily";
    /** Weekly */
    KnownRetentionScheduleFormat["Weekly"] = "Weekly";
})(exports.KnownRetentionScheduleFormat || (exports.KnownRetentionScheduleFormat = {}));
/** Known values of {@link MabServerType} that the service accepts. */
exports.KnownMabServerType = void 0;
(function (KnownMabServerType) {
    /** Invalid */
    KnownMabServerType["Invalid"] = "Invalid";
    /** Unknown */
    KnownMabServerType["Unknown"] = "Unknown";
    /** IaasVMContainer */
    KnownMabServerType["IaasVMContainer"] = "IaasVMContainer";
    /** IaasVMServiceContainer */
    KnownMabServerType["IaasVMServiceContainer"] = "IaasVMServiceContainer";
    /** DPMContainer */
    KnownMabServerType["DPMContainer"] = "DPMContainer";
    /** AzureBackupServerContainer */
    KnownMabServerType["AzureBackupServerContainer"] = "AzureBackupServerContainer";
    /** MABContainer */
    KnownMabServerType["MABContainer"] = "MABContainer";
    /** Cluster */
    KnownMabServerType["Cluster"] = "Cluster";
    /** AzureSqlContainer */
    KnownMabServerType["AzureSqlContainer"] = "AzureSqlContainer";
    /** Windows */
    KnownMabServerType["Windows"] = "Windows";
    /** VCenter */
    KnownMabServerType["VCenter"] = "VCenter";
    /** VMAppContainer */
    KnownMabServerType["VMAppContainer"] = "VMAppContainer";
    /** SqlagWorkLoadContainer */
    KnownMabServerType["SqlagWorkLoadContainer"] = "SQLAGWorkLoadContainer";
    /** StorageContainer */
    KnownMabServerType["StorageContainer"] = "StorageContainer";
    /** GenericContainer */
    KnownMabServerType["GenericContainer"] = "GenericContainer";
})(exports.KnownMabServerType || (exports.KnownMabServerType = {}));
/** Known values of {@link HealthState} that the service accepts. */
exports.KnownHealthState = void 0;
(function (KnownHealthState) {
    /** Passed */
    KnownHealthState["Passed"] = "Passed";
    /** ActionRequired */
    KnownHealthState["ActionRequired"] = "ActionRequired";
    /** ActionSuggested */
    KnownHealthState["ActionSuggested"] = "ActionSuggested";
    /** Invalid */
    KnownHealthState["Invalid"] = "Invalid";
})(exports.KnownHealthState || (exports.KnownHealthState = {}));
/** Known values of {@link ScheduleRunType} that the service accepts. */
exports.KnownScheduleRunType = void 0;
(function (KnownScheduleRunType) {
    /** Invalid */
    KnownScheduleRunType["Invalid"] = "Invalid";
    /** Daily */
    KnownScheduleRunType["Daily"] = "Daily";
    /** Weekly */
    KnownScheduleRunType["Weekly"] = "Weekly";
    /** Hourly */
    KnownScheduleRunType["Hourly"] = "Hourly";
})(exports.KnownScheduleRunType || (exports.KnownScheduleRunType = {}));
/** Known values of {@link AzureFileShareType} that the service accepts. */
exports.KnownAzureFileShareType = void 0;
(function (KnownAzureFileShareType) {
    /** Invalid */
    KnownAzureFileShareType["Invalid"] = "Invalid";
    /** Xsmb */
    KnownAzureFileShareType["Xsmb"] = "XSMB";
    /** XSync */
    KnownAzureFileShareType["XSync"] = "XSync";
})(exports.KnownAzureFileShareType || (exports.KnownAzureFileShareType = {}));
/** Known values of {@link OperationType} that the service accepts. */
exports.KnownOperationType = void 0;
(function (KnownOperationType) {
    /** Invalid */
    KnownOperationType["Invalid"] = "Invalid";
    /** Register */
    KnownOperationType["Register"] = "Register";
    /** Reregister */
    KnownOperationType["Reregister"] = "Reregister";
})(exports.KnownOperationType || (exports.KnownOperationType = {}));
/** Known values of {@link AcquireStorageAccountLock} that the service accepts. */
exports.KnownAcquireStorageAccountLock = void 0;
(function (KnownAcquireStorageAccountLock) {
    /** Acquire */
    KnownAcquireStorageAccountLock["Acquire"] = "Acquire";
    /** NotAcquire */
    KnownAcquireStorageAccountLock["NotAcquire"] = "NotAcquire";
})(exports.KnownAcquireStorageAccountLock || (exports.KnownAcquireStorageAccountLock = {}));
/** Known values of {@link InquiryStatus} that the service accepts. */
exports.KnownInquiryStatus = void 0;
(function (KnownInquiryStatus) {
    /** Invalid */
    KnownInquiryStatus["Invalid"] = "Invalid";
    /** Success */
    KnownInquiryStatus["Success"] = "Success";
    /** Failed */
    KnownInquiryStatus["Failed"] = "Failed";
})(exports.KnownInquiryStatus || (exports.KnownInquiryStatus = {}));
/** Known values of {@link BackupType} that the service accepts. */
exports.KnownBackupType = void 0;
(function (KnownBackupType) {
    /** Invalid */
    KnownBackupType["Invalid"] = "Invalid";
    /** Full */
    KnownBackupType["Full"] = "Full";
    /** Differential */
    KnownBackupType["Differential"] = "Differential";
    /** Log */
    KnownBackupType["Log"] = "Log";
    /** CopyOnlyFull */
    KnownBackupType["CopyOnlyFull"] = "CopyOnlyFull";
    /** Incremental */
    KnownBackupType["Incremental"] = "Incremental";
    /** SnapshotFull */
    KnownBackupType["SnapshotFull"] = "SnapshotFull";
    /** SnapshotCopyOnlyFull */
    KnownBackupType["SnapshotCopyOnlyFull"] = "SnapshotCopyOnlyFull";
})(exports.KnownBackupType || (exports.KnownBackupType = {}));
/** Known values of {@link WorkloadItemType} that the service accepts. */
exports.KnownWorkloadItemType = void 0;
(function (KnownWorkloadItemType) {
    /** Invalid */
    KnownWorkloadItemType["Invalid"] = "Invalid";
    /** SQLInstance */
    KnownWorkloadItemType["SQLInstance"] = "SQLInstance";
    /** SQLDataBase */
    KnownWorkloadItemType["SQLDataBase"] = "SQLDataBase";
    /** SAPHanaSystem */
    KnownWorkloadItemType["SAPHanaSystem"] = "SAPHanaSystem";
    /** SAPHanaDatabase */
    KnownWorkloadItemType["SAPHanaDatabase"] = "SAPHanaDatabase";
    /** SAPAseSystem */
    KnownWorkloadItemType["SAPAseSystem"] = "SAPAseSystem";
    /** SAPAseDatabase */
    KnownWorkloadItemType["SAPAseDatabase"] = "SAPAseDatabase";
    /** SAPHanaDBInstance */
    KnownWorkloadItemType["SAPHanaDBInstance"] = "SAPHanaDBInstance";
})(exports.KnownWorkloadItemType || (exports.KnownWorkloadItemType = {}));
/** Known values of {@link Type} that the service accepts. */
exports.KnownType = void 0;
(function (KnownType) {
    /** Invalid */
    KnownType["Invalid"] = "Invalid";
    /** BackupProtectedItemCountSummary */
    KnownType["BackupProtectedItemCountSummary"] = "BackupProtectedItemCountSummary";
    /** BackupProtectionContainerCountSummary */
    KnownType["BackupProtectionContainerCountSummary"] = "BackupProtectionContainerCountSummary";
})(exports.KnownType || (exports.KnownType = {}));
/** Known values of {@link IntentItemType} that the service accepts. */
exports.KnownIntentItemType = void 0;
(function (KnownIntentItemType) {
    /** Invalid */
    KnownIntentItemType["Invalid"] = "Invalid";
    /** SQLInstance */
    KnownIntentItemType["SQLInstance"] = "SQLInstance";
    /** SQLAvailabilityGroupContainer */
    KnownIntentItemType["SQLAvailabilityGroupContainer"] = "SQLAvailabilityGroupContainer";
})(exports.KnownIntentItemType || (exports.KnownIntentItemType = {}));
/** Known values of {@link ContainerType} that the service accepts. */
exports.KnownContainerType = void 0;
(function (KnownContainerType) {
    /** Invalid */
    KnownContainerType["Invalid"] = "Invalid";
    /** Unknown */
    KnownContainerType["Unknown"] = "Unknown";
    /** IaasVMContainer */
    KnownContainerType["IaasVMContainer"] = "IaasVMContainer";
    /** IaasVMServiceContainer */
    KnownContainerType["IaasVMServiceContainer"] = "IaasVMServiceContainer";
    /** DPMContainer */
    KnownContainerType["DPMContainer"] = "DPMContainer";
    /** AzureBackupServerContainer */
    KnownContainerType["AzureBackupServerContainer"] = "AzureBackupServerContainer";
    /** MABContainer */
    KnownContainerType["MABContainer"] = "MABContainer";
    /** Cluster */
    KnownContainerType["Cluster"] = "Cluster";
    /** AzureSqlContainer */
    KnownContainerType["AzureSqlContainer"] = "AzureSqlContainer";
    /** Windows */
    KnownContainerType["Windows"] = "Windows";
    /** VCenter */
    KnownContainerType["VCenter"] = "VCenter";
    /** VMAppContainer */
    KnownContainerType["VMAppContainer"] = "VMAppContainer";
    /** SqlagWorkLoadContainer */
    KnownContainerType["SqlagWorkLoadContainer"] = "SQLAGWorkLoadContainer";
    /** StorageContainer */
    KnownContainerType["StorageContainer"] = "StorageContainer";
    /** GenericContainer */
    KnownContainerType["GenericContainer"] = "GenericContainer";
    /** HanaHSRContainer */
    KnownContainerType["HanaHSRContainer"] = "HanaHSRContainer";
})(exports.KnownContainerType || (exports.KnownContainerType = {}));
/** Known values of {@link BackupItemType} that the service accepts. */
exports.KnownBackupItemType = void 0;
(function (KnownBackupItemType) {
    /** Invalid */
    KnownBackupItemType["Invalid"] = "Invalid";
    /** VM */
    KnownBackupItemType["VM"] = "VM";
    /** FileFolder */
    KnownBackupItemType["FileFolder"] = "FileFolder";
    /** AzureSqlDb */
    KnownBackupItemType["AzureSqlDb"] = "AzureSqlDb";
    /** Sqldb */
    KnownBackupItemType["Sqldb"] = "SQLDB";
    /** Exchange */
    KnownBackupItemType["Exchange"] = "Exchange";
    /** Sharepoint */
    KnownBackupItemType["Sharepoint"] = "Sharepoint";
    /** VMwareVM */
    KnownBackupItemType["VMwareVM"] = "VMwareVM";
    /** SystemState */
    KnownBackupItemType["SystemState"] = "SystemState";
    /** Client */
    KnownBackupItemType["Client"] = "Client";
    /** GenericDataSource */
    KnownBackupItemType["GenericDataSource"] = "GenericDataSource";
    /** SQLDataBase */
    KnownBackupItemType["SQLDataBase"] = "SQLDataBase";
    /** AzureFileShare */
    KnownBackupItemType["AzureFileShare"] = "AzureFileShare";
    /** SAPHanaDatabase */
    KnownBackupItemType["SAPHanaDatabase"] = "SAPHanaDatabase";
    /** SAPAseDatabase */
    KnownBackupItemType["SAPAseDatabase"] = "SAPAseDatabase";
    /** SAPHanaDBInstance */
    KnownBackupItemType["SAPHanaDBInstance"] = "SAPHanaDBInstance";
})(exports.KnownBackupItemType || (exports.KnownBackupItemType = {}));
/** Known values of {@link RehydrationPriority} that the service accepts. */
exports.KnownRehydrationPriority = void 0;
(function (KnownRehydrationPriority) {
    /** Standard */
    KnownRehydrationPriority["Standard"] = "Standard";
    /** High */
    KnownRehydrationPriority["High"] = "High";
})(exports.KnownRehydrationPriority || (exports.KnownRehydrationPriority = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const BackupResourceConfig = {
    type: {
        name: "Composite",
        className: "BackupResourceConfig",
        modelProperties: {
            storageModelType: {
                serializedName: "storageModelType",
                type: {
                    name: "String"
                }
            },
            storageType: {
                serializedName: "storageType",
                type: {
                    name: "String"
                }
            },
            storageTypeState: {
                serializedName: "storageTypeState",
                type: {
                    name: "String"
                }
            },
            crossRegionRestoreFlag: {
                serializedName: "crossRegionRestoreFlag",
                type: {
                    name: "Boolean"
                }
            },
            dedupState: {
                serializedName: "dedupState",
                type: {
                    name: "String"
                }
            },
            xcoolState: {
                serializedName: "xcoolState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NewErrorResponse = {
    type: {
        name: "Composite",
        className: "NewErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "NewErrorResponseError"
                }
            }
        }
    }
};
const NewErrorResponseError = {
    type: {
        name: "Composite",
        className: "NewErrorResponseError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NewErrorResponse"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const PreValidateEnableBackupRequest = {
    type: {
        name: "Composite",
        className: "PreValidateEnableBackupRequest",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            vaultId: {
                serializedName: "vaultId",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PreValidateEnableBackupResponse = {
    type: {
        name: "Composite",
        className: "PreValidateEnableBackupResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            },
            recommendation: {
                serializedName: "recommendation",
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            },
            protectedItemName: {
                serializedName: "protectedItemName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BackupStatusRequest = {
    type: {
        name: "Composite",
        className: "BackupStatusRequest",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            poLogicalName: {
                serializedName: "poLogicalName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BackupStatusResponse = {
    type: {
        name: "Composite",
        className: "BackupStatusResponse",
        modelProperties: {
            protectionStatus: {
                serializedName: "protectionStatus",
                type: {
                    name: "String"
                }
            },
            vaultId: {
                serializedName: "vaultId",
                type: {
                    name: "String"
                }
            },
            fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            },
            protectedItemName: {
                serializedName: "protectedItemName",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            },
            registrationStatus: {
                serializedName: "registrationStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FeatureSupportRequest = {
    type: {
        name: "Composite",
        className: "FeatureSupportRequest",
        uberParent: "FeatureSupportRequest",
        polymorphicDiscriminator: {
            serializedName: "featureType",
            clientName: "featureType"
        },
        modelProperties: {
            featureType: {
                serializedName: "featureType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureVMResourceFeatureSupportResponse = {
    type: {
        name: "Composite",
        className: "AzureVMResourceFeatureSupportResponse",
        modelProperties: {
            supportStatus: {
                serializedName: "supportStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProtectionIntent = {
    type: {
        name: "Composite",
        className: "ProtectionIntent",
        uberParent: "ProtectionIntent",
        polymorphicDiscriminator: {
            serializedName: "protectionIntentItemType",
            clientName: "protectionIntentItemType"
        },
        modelProperties: {
            protectionIntentItemType: {
                serializedName: "protectionIntentItemType",
                required: true,
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            },
            itemId: {
                serializedName: "itemId",
                type: {
                    name: "String"
                }
            },
            policyId: {
                serializedName: "policyId",
                type: {
                    name: "String"
                }
            },
            protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceList = {
    type: {
        name: "Composite",
        className: "ResourceList",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BackupManagementUsageList = {
    type: {
        name: "Composite",
        className: "BackupManagementUsageList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BackupManagementUsage"
                        }
                    }
                }
            }
        }
    }
};
const BackupManagementUsage = {
    type: {
        name: "Composite",
        className: "BackupManagementUsage",
        modelProperties: {
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                type: {
                    name: "String"
                }
            },
            nextResetTime: {
                serializedName: "nextResetTime",
                type: {
                    name: "DateTime"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "NameInfo"
                }
            }
        }
    }
};
const NameInfo = {
    type: {
        name: "Composite",
        className: "NameInfo",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientDiscoveryResponse = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClientDiscoveryValueForSingleApi"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientDiscoveryValueForSingleApi = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryValueForSingleApi",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "ClientDiscoveryDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ClientDiscoveryForProperties"
                }
            }
        }
    }
};
const ClientDiscoveryDisplay = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientDiscoveryForProperties = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryForProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ClientDiscoveryForServiceSpecification"
                }
            }
        }
    }
};
const ClientDiscoveryForServiceSpecification = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryForServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClientDiscoveryForLogSpecification"
                        }
                    }
                }
            }
        }
    }
};
const ClientDiscoveryForLogSpecification = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryForLogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BackupResourceVaultConfig = {
    type: {
        name: "Composite",
        className: "BackupResourceVaultConfig",
        modelProperties: {
            storageModelType: {
                serializedName: "storageModelType",
                type: {
                    name: "String"
                }
            },
            storageType: {
                serializedName: "storageType",
                type: {
                    name: "String"
                }
            },
            storageTypeState: {
                serializedName: "storageTypeState",
                type: {
                    name: "String"
                }
            },
            enhancedSecurityState: {
                serializedName: "enhancedSecurityState",
                type: {
                    name: "String"
                }
            },
            softDeleteFeatureState: {
                serializedName: "softDeleteFeatureState",
                type: {
                    name: "String"
                }
            },
            softDeleteRetentionPeriodInDays: {
                serializedName: "softDeleteRetentionPeriodInDays",
                type: {
                    name: "Number"
                }
            },
            resourceGuardOperationRequests: {
                serializedName: "resourceGuardOperationRequests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isSoftDeleteFeatureStateEditable: {
                serializedName: "isSoftDeleteFeatureStateEditable",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const BackupResourceEncryptionConfig = {
    type: {
        name: "Composite",
        className: "BackupResourceEncryptionConfig",
        modelProperties: {
            encryptionAtRestType: {
                serializedName: "encryptionAtRestType",
                type: {
                    name: "String"
                }
            },
            keyUri: {
                serializedName: "keyUri",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            lastUpdateStatus: {
                serializedName: "lastUpdateStatus",
                type: {
                    name: "String"
                }
            },
            infrastructureEncryptionState: {
                serializedName: "infrastructureEncryptionState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            },
            groupIds: {
                serializedName: "groupIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "OperationStatusError"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationStatusExtendedInfo"
                }
            }
        }
    }
};
const OperationStatusError = {
    type: {
        name: "Composite",
        className: "OperationStatusError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationStatusExtendedInfo = {
    type: {
        name: "Composite",
        className: "OperationStatusExtendedInfo",
        uberParent: "OperationStatusExtendedInfo",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrepareDataMoveRequest = {
    type: {
        name: "Composite",
        className: "PrepareDataMoveRequest",
        modelProperties: {
            targetResourceId: {
                serializedName: "targetResourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            targetRegion: {
                serializedName: "targetRegion",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataMoveLevel: {
                serializedName: "dataMoveLevel",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceContainerArmIds: {
                serializedName: "sourceContainerArmIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            ignoreMoved: {
                serializedName: "ignoreMoved",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const VaultStorageConfigOperationResultResponse = {
    type: {
        name: "Composite",
        className: "VaultStorageConfigOperationResultResponse",
        uberParent: "VaultStorageConfigOperationResultResponse",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerDataMoveRequest = {
    type: {
        name: "Composite",
        className: "TriggerDataMoveRequest",
        modelProperties: {
            sourceResourceId: {
                serializedName: "sourceResourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceRegion: {
                serializedName: "sourceRegion",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataMoveLevel: {
                serializedName: "dataMoveLevel",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceContainerArmIds: {
                serializedName: "sourceContainerArmIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            pauseGC: {
                serializedName: "pauseGC",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ProtectedItem = {
    type: {
        name: "Composite",
        className: "ProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: {
            serializedName: "protectedItemType",
            clientName: "protectedItemType"
        },
        modelProperties: {
            protectedItemType: {
                serializedName: "protectedItemType",
                required: true,
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            },
            sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            },
            policyId: {
                serializedName: "policyId",
                type: {
                    name: "String"
                }
            },
            lastRecoveryPoint: {
                serializedName: "lastRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            backupSetName: {
                serializedName: "backupSetName",
                type: {
                    name: "String"
                }
            },
            createMode: {
                serializedName: "createMode",
                type: {
                    name: "String"
                }
            },
            deferredDeleteTimeInUTC: {
                serializedName: "deferredDeleteTimeInUTC",
                type: {
                    name: "DateTime"
                }
            },
            isScheduledForDeferredDelete: {
                serializedName: "isScheduledForDeferredDelete",
                type: {
                    name: "Boolean"
                }
            },
            deferredDeleteTimeRemaining: {
                serializedName: "deferredDeleteTimeRemaining",
                type: {
                    name: "String"
                }
            },
            isDeferredDeleteScheduleUpcoming: {
                serializedName: "isDeferredDeleteScheduleUpcoming",
                type: {
                    name: "Boolean"
                }
            },
            isRehydrate: {
                serializedName: "isRehydrate",
                type: {
                    name: "Boolean"
                }
            },
            resourceGuardOperationRequests: {
                serializedName: "resourceGuardOperationRequests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isArchiveEnabled: {
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            },
            softDeleteRetentionPeriodInDays: {
                serializedName: "softDeleteRetentionPeriodInDays",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RecoveryPoint = {
    type: {
        name: "Composite",
        className: "RecoveryPoint",
        uberParent: "RecoveryPoint",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RestoreRequest = {
    type: {
        name: "Composite",
        className: "RestoreRequest",
        uberParent: "RestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProtectionPolicy = {
    type: {
        name: "Composite",
        className: "ProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: {
            serializedName: "backupManagementType",
            clientName: "backupManagementType"
        },
        modelProperties: {
            protectedItemsCount: {
                serializedName: "protectedItemsCount",
                type: {
                    name: "Number"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGuardOperationRequests: {
                serializedName: "resourceGuardOperationRequests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Job = {
    type: {
        name: "Composite",
        className: "Job",
        uberParent: "Job",
        polymorphicDiscriminator: {
            serializedName: "jobType",
            clientName: "jobType"
        },
        modelProperties: {
            entityFriendlyName: {
                serializedName: "entityFriendlyName",
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            activityId: {
                serializedName: "activityId",
                type: {
                    name: "String"
                }
            },
            jobType: {
                serializedName: "jobType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResultInfoBase = {
    type: {
        name: "Composite",
        className: "OperationResultInfoBase",
        uberParent: "OperationResultInfoBase",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationWorkerResponse = {
    type: {
        name: "Composite",
        className: "OperationWorkerResponse",
        modelProperties: {
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Continue",
                        "SwitchingProtocols",
                        "OK",
                        "Created",
                        "Accepted",
                        "NonAuthoritativeInformation",
                        "NoContent",
                        "ResetContent",
                        "PartialContent",
                        "MultipleChoices",
                        "Ambiguous",
                        "MovedPermanently",
                        "Moved",
                        "Found",
                        "Redirect",
                        "SeeOther",
                        "RedirectMethod",
                        "NotModified",
                        "UseProxy",
                        "Unused",
                        "TemporaryRedirect",
                        "RedirectKeepVerb",
                        "BadRequest",
                        "Unauthorized",
                        "PaymentRequired",
                        "Forbidden",
                        "NotFound",
                        "MethodNotAllowed",
                        "NotAcceptable",
                        "ProxyAuthenticationRequired",
                        "RequestTimeout",
                        "Conflict",
                        "Gone",
                        "LengthRequired",
                        "PreconditionFailed",
                        "RequestEntityTooLarge",
                        "RequestUriTooLong",
                        "UnsupportedMediaType",
                        "RequestedRangeNotSatisfiable",
                        "ExpectationFailed",
                        "UpgradeRequired",
                        "InternalServerError",
                        "NotImplemented",
                        "BadGateway",
                        "ServiceUnavailable",
                        "GatewayTimeout",
                        "HttpVersionNotSupported"
                    ]
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            }
        }
    }
};
const ValidateOperationRequest = {
    type: {
        name: "Composite",
        className: "ValidateOperationRequest",
        uberParent: "ValidateOperationRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ValidateOperationsResponse = {
    type: {
        name: "Composite",
        className: "ValidateOperationsResponse",
        modelProperties: {
            validateOperationResponse: {
                serializedName: "validateOperationResponse",
                type: {
                    name: "Composite",
                    className: "ValidateOperationResponse"
                }
            }
        }
    }
};
const ValidateOperationResponse = {
    type: {
        name: "Composite",
        className: "ValidateOperationResponse",
        modelProperties: {
            validationResults: {
                serializedName: "validationResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const BackupEngineBase = {
    type: {
        name: "Composite",
        className: "BackupEngineBase",
        uberParent: "BackupEngineBase",
        polymorphicDiscriminator: {
            serializedName: "backupEngineType",
            clientName: "backupEngineType"
        },
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            registrationStatus: {
                serializedName: "registrationStatus",
                type: {
                    name: "String"
                }
            },
            backupEngineState: {
                serializedName: "backupEngineState",
                type: {
                    name: "String"
                }
            },
            healthStatus: {
                serializedName: "healthStatus",
                type: {
                    name: "String"
                }
            },
            backupEngineType: {
                serializedName: "backupEngineType",
                required: true,
                type: {
                    name: "String"
                }
            },
            canReRegister: {
                serializedName: "canReRegister",
                type: {
                    name: "Boolean"
                }
            },
            backupEngineId: {
                serializedName: "backupEngineId",
                type: {
                    name: "String"
                }
            },
            dpmVersion: {
                serializedName: "dpmVersion",
                type: {
                    name: "String"
                }
            },
            azureBackupAgentVersion: {
                serializedName: "azureBackupAgentVersion",
                type: {
                    name: "String"
                }
            },
            isAzureBackupAgentUpgradeAvailable: {
                serializedName: "isAzureBackupAgentUpgradeAvailable",
                type: {
                    name: "Boolean"
                }
            },
            isDpmUpgradeAvailable: {
                serializedName: "isDpmUpgradeAvailable",
                type: {
                    name: "Boolean"
                }
            },
            extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "BackupEngineExtendedInfo"
                }
            }
        }
    }
};
const BackupEngineExtendedInfo = {
    type: {
        name: "Composite",
        className: "BackupEngineExtendedInfo",
        modelProperties: {
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            protectedItemsCount: {
                serializedName: "protectedItemsCount",
                type: {
                    name: "Number"
                }
            },
            protectedServersCount: {
                serializedName: "protectedServersCount",
                type: {
                    name: "Number"
                }
            },
            diskCount: {
                serializedName: "diskCount",
                type: {
                    name: "Number"
                }
            },
            usedDiskSpace: {
                serializedName: "usedDiskSpace",
                type: {
                    name: "Number"
                }
            },
            availableDiskSpace: {
                serializedName: "availableDiskSpace",
                type: {
                    name: "Number"
                }
            },
            refreshedAt: {
                serializedName: "refreshedAt",
                type: {
                    name: "DateTime"
                }
            },
            azureProtectedInstances: {
                serializedName: "azureProtectedInstances",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ProtectableContainer = {
    type: {
        name: "Composite",
        className: "ProtectableContainer",
        uberParent: "ProtectableContainer",
        polymorphicDiscriminator: {
            serializedName: "protectableContainerType",
            clientName: "protectableContainerType"
        },
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            protectableContainerType: {
                serializedName: "protectableContainerType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Invalid",
                        "Unknown",
                        "IaasVMContainer",
                        "IaasVMServiceContainer",
                        "DPMContainer",
                        "AzureBackupServerContainer",
                        "MABContainer",
                        "Cluster",
                        "AzureSqlContainer",
                        "Windows",
                        "VCenter",
                        "VMAppContainer",
                        "SQLAGWorkLoadContainer",
                        "StorageContainer",
                        "GenericContainer",
                        "Microsoft.ClassicCompute/virtualMachines",
                        "Microsoft.Compute/virtualMachines",
                        "AzureWorkloadContainer"
                    ]
                }
            },
            healthStatus: {
                serializedName: "healthStatus",
                type: {
                    name: "String"
                }
            },
            containerId: {
                serializedName: "containerId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProtectionContainer = {
    type: {
        name: "Composite",
        className: "ProtectionContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: {
            serializedName: "containerType",
            clientName: "containerType"
        },
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            registrationStatus: {
                serializedName: "registrationStatus",
                type: {
                    name: "String"
                }
            },
            healthStatus: {
                serializedName: "healthStatus",
                type: {
                    name: "String"
                }
            },
            containerType: {
                serializedName: "containerType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Invalid",
                        "Unknown",
                        "IaasVMContainer",
                        "IaasVMServiceContainer",
                        "DPMContainer",
                        "AzureBackupServerContainer",
                        "MABContainer",
                        "Cluster",
                        "AzureSqlContainer",
                        "Windows",
                        "VCenter",
                        "VMAppContainer",
                        "SQLAGWorkLoadContainer",
                        "StorageContainer",
                        "GenericContainer",
                        "Microsoft.ClassicCompute/virtualMachines",
                        "Microsoft.Compute/virtualMachines",
                        "AzureWorkloadContainer"
                    ]
                }
            },
            protectableObjectType: {
                serializedName: "protectableObjectType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkloadItem = {
    type: {
        name: "Composite",
        className: "WorkloadItem",
        uberParent: "WorkloadItem",
        polymorphicDiscriminator: {
            serializedName: "workloadItemType",
            clientName: "workloadItemType"
        },
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            },
            workloadItemType: {
                serializedName: "workloadItemType",
                required: true,
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BackupRequest = {
    type: {
        name: "Composite",
        className: "BackupRequest",
        uberParent: "BackupRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ILRRequest = {
    type: {
        name: "Composite",
        className: "ILRRequest",
        uberParent: "ILRRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkloadProtectableItem = {
    type: {
        name: "Composite",
        className: "WorkloadProtectableItem",
        uberParent: "WorkloadProtectableItem",
        polymorphicDiscriminator: {
            serializedName: "protectableItemType",
            clientName: "protectableItemType"
        },
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            },
            protectableItemType: {
                serializedName: "protectableItemType",
                required: true,
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecurityPinBase = {
    type: {
        name: "Composite",
        className: "SecurityPinBase",
        modelProperties: {
            resourceGuardOperationRequests: {
                serializedName: "resourceGuardOperationRequests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const TokenInformation = {
    type: {
        name: "Composite",
        className: "TokenInformation",
        modelProperties: {
            token: {
                serializedName: "token",
                type: {
                    name: "String"
                }
            },
            expiryTimeInUtcTicks: {
                serializedName: "expiryTimeInUtcTicks",
                type: {
                    name: "Number"
                }
            },
            securityPIN: {
                serializedName: "securityPIN",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MoveRPAcrossTiersRequest = {
    type: {
        name: "Composite",
        className: "MoveRPAcrossTiersRequest",
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                type: {
                    name: "String"
                }
            },
            sourceTierType: {
                serializedName: "sourceTierType",
                type: {
                    name: "Enum",
                    allowedValues: ["Invalid", "InstantRP", "HardenedRP", "ArchivedRP"]
                }
            },
            targetTierType: {
                serializedName: "targetTierType",
                type: {
                    name: "Enum",
                    allowedValues: ["Invalid", "InstantRP", "HardenedRP", "ArchivedRP"]
                }
            }
        }
    }
};
const ListRecoveryPointsRecommendedForMoveRequest = {
    type: {
        name: "Composite",
        className: "ListRecoveryPointsRecommendedForMoveRequest",
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                type: {
                    name: "String"
                }
            },
            excludedRPList: {
                serializedName: "excludedRPList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ResourceGuardProxyBase = {
    type: {
        name: "Composite",
        className: "ResourceGuardProxyBase",
        modelProperties: {
            resourceGuardResourceId: {
                serializedName: "resourceGuardResourceId",
                type: {
                    name: "String"
                }
            },
            resourceGuardOperationDetails: {
                serializedName: "resourceGuardOperationDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceGuardOperationDetail"
                        }
                    }
                }
            },
            lastUpdatedTime: {
                serializedName: "lastUpdatedTime",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceGuardOperationDetail = {
    type: {
        name: "Composite",
        className: "ResourceGuardOperationDetail",
        modelProperties: {
            vaultCriticalOperation: {
                serializedName: "vaultCriticalOperation",
                type: {
                    name: "String"
                }
            },
            defaultResourceRequest: {
                serializedName: "defaultResourceRequest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UnlockDeleteRequest = {
    type: {
        name: "Composite",
        className: "UnlockDeleteRequest",
        modelProperties: {
            resourceGuardOperationRequests: {
                serializedName: "resourceGuardOperationRequests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            resourceToBeDeleted: {
                serializedName: "resourceToBeDeleted",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UnlockDeleteResponse = {
    type: {
        name: "Composite",
        className: "UnlockDeleteResponse",
        modelProperties: {
            unlockDeleteExpiryTime: {
                serializedName: "unlockDeleteExpiryTime",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KPIResourceHealthDetails = {
    type: {
        name: "Composite",
        className: "KPIResourceHealthDetails",
        modelProperties: {
            resourceHealthStatus: {
                serializedName: "resourceHealthStatus",
                type: {
                    name: "String"
                }
            },
            resourceHealthDetails: {
                serializedName: "resourceHealthDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceHealthDetails"
                        }
                    }
                }
            }
        }
    }
};
const ResourceHealthDetails = {
    type: {
        name: "Composite",
        className: "ResourceHealthDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            title: {
                serializedName: "title",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AzureFileshareProtectedItemExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureFileshareProtectedItemExtendedInfo",
        modelProperties: {
            oldestRecoveryPoint: {
                serializedName: "oldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            recoveryPointCount: {
                serializedName: "recoveryPointCount",
                type: {
                    name: "Number"
                }
            },
            policyState: {
                serializedName: "policyState",
                type: {
                    name: "String"
                }
            },
            resourceState: {
                serializedName: "resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceStateSyncTime: {
                serializedName: "resourceStateSyncTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const RecoveryPointProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPointProperties",
        modelProperties: {
            expiryTime: {
                serializedName: "expiryTime",
                type: {
                    name: "String"
                }
            },
            ruleName: {
                serializedName: "ruleName",
                type: {
                    name: "String"
                }
            },
            isSoftDeleted: {
                serializedName: "isSoftDeleted",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const RestoreFileSpecs = {
    type: {
        name: "Composite",
        className: "RestoreFileSpecs",
        modelProperties: {
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            fileSpecType: {
                serializedName: "fileSpecType",
                type: {
                    name: "String"
                }
            },
            targetFolderPath: {
                serializedName: "targetFolderPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetAFSRestoreInfo = {
    type: {
        name: "Composite",
        className: "TargetAFSRestoreInfo",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            targetResourceId: {
                serializedName: "targetResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Settings = {
    type: {
        name: "Composite",
        className: "Settings",
        modelProperties: {
            timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            },
            issqlcompression: {
                serializedName: "issqlcompression",
                type: {
                    name: "Boolean"
                }
            },
            isCompression: {
                serializedName: "isCompression",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SubProtectionPolicy = {
    type: {
        name: "Composite",
        className: "SubProtectionPolicy",
        modelProperties: {
            policyType: {
                serializedName: "policyType",
                type: {
                    name: "String"
                }
            },
            schedulePolicy: {
                serializedName: "schedulePolicy",
                type: {
                    name: "Composite",
                    className: "SchedulePolicy"
                }
            },
            retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            },
            tieringPolicy: {
                serializedName: "tieringPolicy",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "TieringPolicy" } }
                }
            }
        }
    }
};
const SchedulePolicy = {
    type: {
        name: "Composite",
        className: "SchedulePolicy",
        uberParent: "SchedulePolicy",
        polymorphicDiscriminator: {
            serializedName: "schedulePolicyType",
            clientName: "schedulePolicyType"
        },
        modelProperties: {
            schedulePolicyType: {
                serializedName: "schedulePolicyType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RetentionPolicy = {
    type: {
        name: "Composite",
        className: "RetentionPolicy",
        uberParent: "RetentionPolicy",
        polymorphicDiscriminator: {
            serializedName: "retentionPolicyType",
            clientName: "retentionPolicyType"
        },
        modelProperties: {
            retentionPolicyType: {
                serializedName: "retentionPolicyType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TieringPolicy = {
    type: {
        name: "Composite",
        className: "TieringPolicy",
        modelProperties: {
            tieringMode: {
                serializedName: "tieringMode",
                type: {
                    name: "String"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "Number"
                }
            },
            durationType: {
                serializedName: "durationType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureIaaSVMProtectedItemExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureIaaSVMProtectedItemExtendedInfo",
        modelProperties: {
            oldestRecoveryPoint: {
                serializedName: "oldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            oldestRecoveryPointInVault: {
                serializedName: "oldestRecoveryPointInVault",
                type: {
                    name: "DateTime"
                }
            },
            oldestRecoveryPointInArchive: {
                serializedName: "oldestRecoveryPointInArchive",
                type: {
                    name: "DateTime"
                }
            },
            newestRecoveryPointInArchive: {
                serializedName: "newestRecoveryPointInArchive",
                type: {
                    name: "DateTime"
                }
            },
            recoveryPointCount: {
                serializedName: "recoveryPointCount",
                type: {
                    name: "Number"
                }
            },
            policyInconsistent: {
                serializedName: "policyInconsistent",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ExtendedProperties = {
    type: {
        name: "Composite",
        className: "ExtendedProperties",
        modelProperties: {
            diskExclusionProperties: {
                serializedName: "diskExclusionProperties",
                type: {
                    name: "Composite",
                    className: "DiskExclusionProperties"
                }
            },
            linuxVmApplicationName: {
                serializedName: "linuxVmApplicationName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DiskExclusionProperties = {
    type: {
        name: "Composite",
        className: "DiskExclusionProperties",
        modelProperties: {
            diskLunList: {
                serializedName: "diskLunList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            isInclusionList: {
                serializedName: "isInclusionList",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AzureIaaSVMErrorInfo = {
    type: {
        name: "Composite",
        className: "AzureIaaSVMErrorInfo",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            errorTitle: {
                serializedName: "errorTitle",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errorString: {
                serializedName: "errorString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AzureIaaSVMJobExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureIaaSVMJobExtendedInfo",
        modelProperties: {
            tasksList: {
                serializedName: "tasksList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureIaaSVMJobTaskDetails"
                        }
                    }
                }
            },
            propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            internalPropertyBag: {
                serializedName: "internalPropertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            progressPercentage: {
                serializedName: "progressPercentage",
                type: {
                    name: "Number"
                }
            },
            estimatedRemainingDuration: {
                serializedName: "estimatedRemainingDuration",
                type: {
                    name: "String"
                }
            },
            dynamicErrorMessage: {
                serializedName: "dynamicErrorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureIaaSVMJobTaskDetails = {
    type: {
        name: "Composite",
        className: "AzureIaaSVMJobTaskDetails",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            instanceId: {
                serializedName: "instanceId",
                type: {
                    name: "String"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            progressPercentage: {
                serializedName: "progressPercentage",
                type: {
                    name: "Number"
                }
            },
            taskExecutionDetails: {
                serializedName: "taskExecutionDetails",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InstantRPAdditionalDetails = {
    type: {
        name: "Composite",
        className: "InstantRPAdditionalDetails",
        modelProperties: {
            azureBackupRGNamePrefix: {
                serializedName: "azureBackupRGNamePrefix",
                type: {
                    name: "String"
                }
            },
            azureBackupRGNameSuffix: {
                serializedName: "azureBackupRGNameSuffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureSqlProtectedItemExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureSqlProtectedItemExtendedInfo",
        modelProperties: {
            oldestRecoveryPoint: {
                serializedName: "oldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            recoveryPointCount: {
                serializedName: "recoveryPointCount",
                type: {
                    name: "Number"
                }
            },
            policyState: {
                serializedName: "policyState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureStorageErrorInfo = {
    type: {
        name: "Composite",
        className: "AzureStorageErrorInfo",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "Number"
                }
            },
            errorString: {
                serializedName: "errorString",
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AzureStorageJobExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureStorageJobExtendedInfo",
        modelProperties: {
            tasksList: {
                serializedName: "tasksList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureStorageJobTaskDetails"
                        }
                    }
                }
            },
            propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dynamicErrorMessage: {
                serializedName: "dynamicErrorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureStorageJobTaskDetails = {
    type: {
        name: "Composite",
        className: "AzureStorageJobTaskDetails",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureVmWorkloadProtectedItemExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureVmWorkloadProtectedItemExtendedInfo",
        modelProperties: {
            oldestRecoveryPoint: {
                serializedName: "oldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            oldestRecoveryPointInVault: {
                serializedName: "oldestRecoveryPointInVault",
                type: {
                    name: "DateTime"
                }
            },
            oldestRecoveryPointInArchive: {
                serializedName: "oldestRecoveryPointInArchive",
                type: {
                    name: "DateTime"
                }
            },
            newestRecoveryPointInArchive: {
                serializedName: "newestRecoveryPointInArchive",
                type: {
                    name: "DateTime"
                }
            },
            recoveryPointCount: {
                serializedName: "recoveryPointCount",
                type: {
                    name: "Number"
                }
            },
            policyState: {
                serializedName: "policyState",
                type: {
                    name: "String"
                }
            },
            recoveryModel: {
                serializedName: "recoveryModel",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DistributedNodesInfo = {
    type: {
        name: "Composite",
        className: "DistributedNodesInfo",
        modelProperties: {
            nodeName: {
                serializedName: "nodeName",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errorDetail: {
                serializedName: "errorDetail",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            },
            sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureWorkloadErrorInfo = {
    type: {
        name: "Composite",
        className: "AzureWorkloadErrorInfo",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "Number"
                }
            },
            errorString: {
                serializedName: "errorString",
                type: {
                    name: "String"
                }
            },
            errorTitle: {
                serializedName: "errorTitle",
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            additionalDetails: {
                serializedName: "additionalDetails",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureWorkloadJobExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureWorkloadJobExtendedInfo",
        modelProperties: {
            tasksList: {
                serializedName: "tasksList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureWorkloadJobTaskDetails"
                        }
                    }
                }
            },
            propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dynamicErrorMessage: {
                serializedName: "dynamicErrorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureWorkloadJobTaskDetails = {
    type: {
        name: "Composite",
        className: "AzureWorkloadJobTaskDetails",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PointInTimeRange = {
    type: {
        name: "Composite",
        className: "PointInTimeRange",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const RecoveryPointTierInformation = {
    type: {
        name: "Composite",
        className: "RecoveryPointTierInformation",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: ["Invalid", "InstantRP", "HardenedRP", "ArchivedRP"]
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Invalid",
                        "Valid",
                        "Disabled",
                        "Deleted",
                        "Rehydrated"
                    ]
                }
            },
            extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const RecoveryPointMoveReadinessInfo = {
    type: {
        name: "Composite",
        className: "RecoveryPointMoveReadinessInfo",
        modelProperties: {
            isReadyForMove: {
                serializedName: "isReadyForMove",
                type: {
                    name: "Boolean"
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetRestoreInfo = {
    type: {
        name: "Composite",
        className: "TargetRestoreInfo",
        modelProperties: {
            overwriteOption: {
                serializedName: "overwriteOption",
                type: {
                    name: "String"
                }
            },
            containerId: {
                serializedName: "containerId",
                type: {
                    name: "String"
                }
            },
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            targetDirectoryForFileRestore: {
                serializedName: "targetDirectoryForFileRestore",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureWorkloadSQLRecoveryPointExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLRecoveryPointExtendedInfo",
        modelProperties: {
            dataDirectoryTimeInUTC: {
                serializedName: "dataDirectoryTimeInUTC",
                type: {
                    name: "DateTime"
                }
            },
            dataDirectoryPaths: {
                serializedName: "dataDirectoryPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SQLDataDirectory"
                        }
                    }
                }
            }
        }
    }
};
const SQLDataDirectory = {
    type: {
        name: "Composite",
        className: "SQLDataDirectory",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            logicalName: {
                serializedName: "logicalName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SQLDataDirectoryMapping = {
    type: {
        name: "Composite",
        className: "SQLDataDirectoryMapping",
        modelProperties: {
            mappingType: {
                serializedName: "mappingType",
                type: {
                    name: "String"
                }
            },
            sourceLogicalName: {
                serializedName: "sourceLogicalName",
                type: {
                    name: "String"
                }
            },
            sourcePath: {
                serializedName: "sourcePath",
                type: {
                    name: "String"
                }
            },
            targetPath: {
                serializedName: "targetPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BEKDetails = {
    type: {
        name: "Composite",
        className: "BEKDetails",
        modelProperties: {
            secretUrl: {
                serializedName: "secretUrl",
                type: {
                    name: "String"
                }
            },
            secretVaultId: {
                serializedName: "secretVaultId",
                type: {
                    name: "String"
                }
            },
            secretData: {
                serializedName: "secretData",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BmsrpQueryObject = {
    type: {
        name: "Composite",
        className: "BmsrpQueryObject",
        modelProperties: {
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "DateTime"
                }
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "DateTime"
                }
            },
            restorePointQueryType: {
                serializedName: "restorePointQueryType",
                type: {
                    name: "String"
                }
            },
            extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Boolean"
                }
            },
            moveReadyRPOnly: {
                serializedName: "moveReadyRPOnly",
                type: {
                    name: "Boolean"
                }
            },
            includeSoftDeletedRP: {
                serializedName: "includeSoftDeletedRP",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DiskInformation = {
    type: {
        name: "Composite",
        className: "DiskInformation",
        modelProperties: {
            lun: {
                serializedName: "lun",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DailyRetentionFormat = {
    type: {
        name: "Composite",
        className: "DailyRetentionFormat",
        modelProperties: {
            daysOfTheMonth: {
                serializedName: "daysOfTheMonth",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Day"
                        }
                    }
                }
            }
        }
    }
};
const Day = {
    type: {
        name: "Composite",
        className: "Day",
        modelProperties: {
            date: {
                serializedName: "date",
                type: {
                    name: "Number"
                }
            },
            isLast: {
                serializedName: "isLast",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DailyRetentionSchedule = {
    type: {
        name: "Composite",
        className: "DailyRetentionSchedule",
        modelProperties: {
            retentionTimes: {
                serializedName: "retentionTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            },
            retentionDuration: {
                serializedName: "retentionDuration",
                type: {
                    name: "Composite",
                    className: "RetentionDuration"
                }
            }
        }
    }
};
const RetentionDuration = {
    type: {
        name: "Composite",
        className: "RetentionDuration",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            durationType: {
                serializedName: "durationType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DpmErrorInfo = {
    type: {
        name: "Composite",
        className: "DpmErrorInfo",
        modelProperties: {
            errorString: {
                serializedName: "errorString",
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const DpmJobExtendedInfo = {
    type: {
        name: "Composite",
        className: "DpmJobExtendedInfo",
        modelProperties: {
            tasksList: {
                serializedName: "tasksList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DpmJobTaskDetails"
                        }
                    }
                }
            },
            propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dynamicErrorMessage: {
                serializedName: "dynamicErrorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DpmJobTaskDetails = {
    type: {
        name: "Composite",
        className: "DpmJobTaskDetails",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DPMProtectedItemExtendedInfo = {
    type: {
        name: "Composite",
        className: "DPMProtectedItemExtendedInfo",
        modelProperties: {
            protectableObjectLoadPath: {
                serializedName: "protectableObjectLoadPath",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            protected: {
                serializedName: "protected",
                type: {
                    name: "Boolean"
                }
            },
            isPresentOnCloud: {
                serializedName: "isPresentOnCloud",
                type: {
                    name: "Boolean"
                }
            },
            lastBackupStatus: {
                serializedName: "lastBackupStatus",
                type: {
                    name: "String"
                }
            },
            lastRefreshedAt: {
                serializedName: "lastRefreshedAt",
                type: {
                    name: "DateTime"
                }
            },
            oldestRecoveryPoint: {
                serializedName: "oldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            recoveryPointCount: {
                serializedName: "recoveryPointCount",
                type: {
                    name: "Number"
                }
            },
            onPremiseOldestRecoveryPoint: {
                serializedName: "onPremiseOldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            onPremiseLatestRecoveryPoint: {
                serializedName: "onPremiseLatestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            onPremiseRecoveryPointCount: {
                serializedName: "onPremiseRecoveryPointCount",
                type: {
                    name: "Number"
                }
            },
            isCollocated: {
                serializedName: "isCollocated",
                type: {
                    name: "Boolean"
                }
            },
            protectionGroupName: {
                serializedName: "protectionGroupName",
                type: {
                    name: "String"
                }
            },
            diskStorageUsedInBytes: {
                serializedName: "diskStorageUsedInBytes",
                type: {
                    name: "String"
                }
            },
            totalDiskStorageSizeInBytes: {
                serializedName: "totalDiskStorageSizeInBytes",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EncryptionDetails = {
    type: {
        name: "Composite",
        className: "EncryptionDetails",
        modelProperties: {
            encryptionEnabled: {
                serializedName: "encryptionEnabled",
                type: {
                    name: "Boolean"
                }
            },
            kekUrl: {
                serializedName: "kekUrl",
                type: {
                    name: "String"
                }
            },
            secretKeyUrl: {
                serializedName: "secretKeyUrl",
                type: {
                    name: "String"
                }
            },
            kekVaultId: {
                serializedName: "kekVaultId",
                type: {
                    name: "String"
                }
            },
            secretKeyVaultId: {
                serializedName: "secretKeyVaultId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HourlySchedule = {
    type: {
        name: "Composite",
        className: "HourlySchedule",
        modelProperties: {
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number"
                }
            },
            scheduleWindowStartTime: {
                serializedName: "scheduleWindowStartTime",
                type: {
                    name: "DateTime"
                }
            },
            scheduleWindowDuration: {
                serializedName: "scheduleWindowDuration",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DailySchedule = {
    type: {
        name: "Composite",
        className: "DailySchedule",
        modelProperties: {
            scheduleRunTimes: {
                serializedName: "scheduleRunTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            }
        }
    }
};
const WeeklySchedule = {
    type: {
        name: "Composite",
        className: "WeeklySchedule",
        modelProperties: {
            scheduleRunDays: {
                serializedName: "scheduleRunDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            scheduleRunTimes: {
                serializedName: "scheduleRunTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            }
        }
    }
};
const IdentityBasedRestoreDetails = {
    type: {
        name: "Composite",
        className: "IdentityBasedRestoreDetails",
        modelProperties: {
            objectType: {
                serializedName: "objectType",
                type: {
                    name: "String"
                }
            },
            targetStorageAccountId: {
                serializedName: "targetStorageAccountId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IdentityInfo = {
    type: {
        name: "Composite",
        className: "IdentityInfo",
        modelProperties: {
            isSystemAssignedIdentity: {
                serializedName: "isSystemAssignedIdentity",
                type: {
                    name: "Boolean"
                }
            },
            managedIdentityResourceId: {
                serializedName: "managedIdentityResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GetProtectedItemQueryObject = {
    type: {
        name: "Composite",
        className: "GetProtectedItemQueryObject",
        modelProperties: {
            expand: {
                serializedName: "expand",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyAndSecretDetails = {
    type: {
        name: "Composite",
        className: "KeyAndSecretDetails",
        modelProperties: {
            kekDetails: {
                serializedName: "kekDetails",
                type: {
                    name: "Composite",
                    className: "KEKDetails"
                }
            },
            bekDetails: {
                serializedName: "bekDetails",
                type: {
                    name: "Composite",
                    className: "BEKDetails"
                }
            },
            encryptionMechanism: {
                serializedName: "encryptionMechanism",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KEKDetails = {
    type: {
        name: "Composite",
        className: "KEKDetails",
        modelProperties: {
            keyUrl: {
                serializedName: "keyUrl",
                type: {
                    name: "String"
                }
            },
            keyVaultId: {
                serializedName: "keyVaultId",
                type: {
                    name: "String"
                }
            },
            keyBackupData: {
                serializedName: "keyBackupData",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RecoveryPointDiskConfiguration = {
    type: {
        name: "Composite",
        className: "RecoveryPointDiskConfiguration",
        modelProperties: {
            numberOfDisksIncludedInBackup: {
                serializedName: "numberOfDisksIncludedInBackup",
                type: {
                    name: "Number"
                }
            },
            numberOfDisksAttachedToVm: {
                serializedName: "numberOfDisksAttachedToVm",
                type: {
                    name: "Number"
                }
            },
            includedDiskList: {
                serializedName: "includedDiskList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskInformation"
                        }
                    }
                }
            },
            excludedDiskList: {
                serializedName: "excludedDiskList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskInformation"
                        }
                    }
                }
            }
        }
    }
};
const ExtendedLocation = {
    type: {
        name: "Composite",
        className: "ExtendedLocation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecuredVMDetails = {
    type: {
        name: "Composite",
        className: "SecuredVMDetails",
        modelProperties: {
            securedVMOsDiskEncryptionSetId: {
                serializedName: "securedVMOsDiskEncryptionSetId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetDiskNetworkAccessSettings = {
    type: {
        name: "Composite",
        className: "TargetDiskNetworkAccessSettings",
        modelProperties: {
            targetDiskNetworkAccessOption: {
                serializedName: "targetDiskNetworkAccessOption",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SameAsOnSourceDisks",
                        "EnablePrivateAccessForAllDisks",
                        "EnablePublicAccessForAllDisks"
                    ]
                }
            },
            targetDiskAccessId: {
                serializedName: "targetDiskAccessId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobQueryObject = {
    type: {
        name: "Composite",
        className: "JobQueryObject",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            jobId: {
                serializedName: "jobId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const WeeklyRetentionSchedule = {
    type: {
        name: "Composite",
        className: "WeeklyRetentionSchedule",
        modelProperties: {
            daysOfTheWeek: {
                serializedName: "daysOfTheWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            retentionTimes: {
                serializedName: "retentionTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            },
            retentionDuration: {
                serializedName: "retentionDuration",
                type: {
                    name: "Composite",
                    className: "RetentionDuration"
                }
            }
        }
    }
};
const MonthlyRetentionSchedule = {
    type: {
        name: "Composite",
        className: "MonthlyRetentionSchedule",
        modelProperties: {
            retentionScheduleFormatType: {
                serializedName: "retentionScheduleFormatType",
                type: {
                    name: "String"
                }
            },
            retentionScheduleDaily: {
                serializedName: "retentionScheduleDaily",
                type: {
                    name: "Composite",
                    className: "DailyRetentionFormat"
                }
            },
            retentionScheduleWeekly: {
                serializedName: "retentionScheduleWeekly",
                type: {
                    name: "Composite",
                    className: "WeeklyRetentionFormat"
                }
            },
            retentionTimes: {
                serializedName: "retentionTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            },
            retentionDuration: {
                serializedName: "retentionDuration",
                type: {
                    name: "Composite",
                    className: "RetentionDuration"
                }
            }
        }
    }
};
const WeeklyRetentionFormat = {
    type: {
        name: "Composite",
        className: "WeeklyRetentionFormat",
        modelProperties: {
            daysOfTheWeek: {
                serializedName: "daysOfTheWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            },
            weeksOfTheMonth: {
                serializedName: "weeksOfTheMonth",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "First",
                                "Second",
                                "Third",
                                "Fourth",
                                "Last",
                                "Invalid"
                            ]
                        }
                    }
                }
            }
        }
    }
};
const YearlyRetentionSchedule = {
    type: {
        name: "Composite",
        className: "YearlyRetentionSchedule",
        modelProperties: {
            retentionScheduleFormatType: {
                serializedName: "retentionScheduleFormatType",
                type: {
                    name: "String"
                }
            },
            monthsOfYear: {
                serializedName: "monthsOfYear",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Invalid",
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December"
                            ]
                        }
                    }
                }
            },
            retentionScheduleDaily: {
                serializedName: "retentionScheduleDaily",
                type: {
                    name: "Composite",
                    className: "DailyRetentionFormat"
                }
            },
            retentionScheduleWeekly: {
                serializedName: "retentionScheduleWeekly",
                type: {
                    name: "Composite",
                    className: "WeeklyRetentionFormat"
                }
            },
            retentionTimes: {
                serializedName: "retentionTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            },
            retentionDuration: {
                serializedName: "retentionDuration",
                type: {
                    name: "Composite",
                    className: "RetentionDuration"
                }
            }
        }
    }
};
const MabErrorInfo = {
    type: {
        name: "Composite",
        className: "MabErrorInfo",
        modelProperties: {
            errorString: {
                serializedName: "errorString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const MabFileFolderProtectedItemExtendedInfo = {
    type: {
        name: "Composite",
        className: "MabFileFolderProtectedItemExtendedInfo",
        modelProperties: {
            lastRefreshedAt: {
                serializedName: "lastRefreshedAt",
                type: {
                    name: "DateTime"
                }
            },
            oldestRecoveryPoint: {
                serializedName: "oldestRecoveryPoint",
                type: {
                    name: "DateTime"
                }
            },
            recoveryPointCount: {
                serializedName: "recoveryPointCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const MabJobExtendedInfo = {
    type: {
        name: "Composite",
        className: "MabJobExtendedInfo",
        modelProperties: {
            tasksList: {
                serializedName: "tasksList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MabJobTaskDetails"
                        }
                    }
                }
            },
            propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            dynamicErrorMessage: {
                serializedName: "dynamicErrorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MabJobTaskDetails = {
    type: {
        name: "Composite",
        className: "MabJobTaskDetails",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProtectedItemQueryObject = {
    type: {
        name: "Composite",
        className: "ProtectedItemQueryObject",
        modelProperties: {
            healthState: {
                serializedName: "healthState",
                type: {
                    name: "String"
                }
            },
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            itemType: {
                serializedName: "itemType",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            },
            backupEngineName: {
                serializedName: "backupEngineName",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            },
            backupSetName: {
                serializedName: "backupSetName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProtectionPolicyQueryObject = {
    type: {
        name: "Composite",
        className: "ProtectionPolicyQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VaultJobErrorInfo = {
    type: {
        name: "Composite",
        className: "VaultJobErrorInfo",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "Number"
                }
            },
            errorString: {
                serializedName: "errorString",
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const VaultJobExtendedInfo = {
    type: {
        name: "Composite",
        className: "VaultJobExtendedInfo",
        modelProperties: {
            propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const DPMContainerExtendedInfo = {
    type: {
        name: "Composite",
        className: "DPMContainerExtendedInfo",
        modelProperties: {
            lastRefreshedAt: {
                serializedName: "lastRefreshedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AzureWorkloadContainerExtendedInfo = {
    type: {
        name: "Composite",
        className: "AzureWorkloadContainerExtendedInfo",
        modelProperties: {
            hostServerName: {
                serializedName: "hostServerName",
                type: {
                    name: "String"
                }
            },
            inquiryInfo: {
                serializedName: "inquiryInfo",
                type: {
                    name: "Composite",
                    className: "InquiryInfo"
                }
            },
            nodesList: {
                serializedName: "nodesList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DistributedNodesInfo"
                        }
                    }
                }
            }
        }
    }
};
const InquiryInfo = {
    type: {
        name: "Composite",
        className: "InquiryInfo",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errorDetail: {
                serializedName: "errorDetail",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            },
            inquiryDetails: {
                serializedName: "inquiryDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WorkloadInquiryDetails"
                        }
                    }
                }
            }
        }
    }
};
const WorkloadInquiryDetails = {
    type: {
        name: "Composite",
        className: "WorkloadInquiryDetails",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            itemCount: {
                serializedName: "itemCount",
                type: {
                    name: "Number"
                }
            },
            inquiryValidation: {
                serializedName: "inquiryValidation",
                type: {
                    name: "Composite",
                    className: "InquiryValidation"
                }
            }
        }
    }
};
const InquiryValidation = {
    type: {
        name: "Composite",
        className: "InquiryValidation",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errorDetail: {
                serializedName: "errorDetail",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            },
            additionalDetail: {
                serializedName: "additionalDetail",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            protectableItemCount: {
                serializedName: "protectableItemCount",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const PreBackupValidation = {
    type: {
        name: "Composite",
        className: "PreBackupValidation",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSBackupSummariesQueryObject = {
    type: {
        name: "Composite",
        className: "BMSBackupSummariesQueryObject",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProtectionIntentQueryObject = {
    type: {
        name: "Composite",
        className: "ProtectionIntentQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            itemType: {
                serializedName: "itemType",
                type: {
                    name: "String"
                }
            },
            parentName: {
                serializedName: "parentName",
                type: {
                    name: "String"
                }
            },
            itemName: {
                serializedName: "itemName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSBackupEngineQueryObject = {
    type: {
        name: "Composite",
        className: "BMSBackupEngineQueryObject",
        modelProperties: {
            expand: {
                serializedName: "expand",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSBackupEnginesQueryObject = {
    type: {
        name: "Composite",
        className: "BMSBackupEnginesQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            expand: {
                serializedName: "expand",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSContainerQueryObject = {
    type: {
        name: "Composite",
        className: "BMSContainerQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                required: true,
                type: {
                    name: "String"
                }
            },
            containerType: {
                serializedName: "containerType",
                type: {
                    name: "String"
                }
            },
            backupEngineName: {
                serializedName: "backupEngineName",
                type: {
                    name: "String"
                }
            },
            fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSContainersInquiryQueryObject = {
    type: {
        name: "Composite",
        className: "BMSContainersInquiryQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BmspoQueryObject = {
    type: {
        name: "Composite",
        className: "BmspoQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSRefreshContainersQueryObject = {
    type: {
        name: "Composite",
        className: "BMSRefreshContainersQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BMSWorkloadItemQueryObject = {
    type: {
        name: "Composite",
        className: "BMSWorkloadItemQueryObject",
        modelProperties: {
            backupManagementType: {
                serializedName: "backupManagementType",
                type: {
                    name: "String"
                }
            },
            workloadItemType: {
                serializedName: "workloadItemType",
                type: {
                    name: "String"
                }
            },
            workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            },
            protectionStatus: {
                serializedName: "protectionStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientScriptForConnect = {
    type: {
        name: "Composite",
        className: "ClientScriptForConnect",
        modelProperties: {
            scriptContent: {
                serializedName: "scriptContent",
                type: {
                    name: "String"
                }
            },
            scriptExtension: {
                serializedName: "scriptExtension",
                type: {
                    name: "String"
                }
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            scriptNameSuffix: {
                serializedName: "scriptNameSuffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerIdentityInfo = {
    type: {
        name: "Composite",
        className: "ContainerIdentityInfo",
        modelProperties: {
            uniqueName: {
                serializedName: "uniqueName",
                type: {
                    name: "String"
                }
            },
            aadTenantId: {
                serializedName: "aadTenantId",
                type: {
                    name: "String"
                }
            },
            servicePrincipalClientId: {
                serializedName: "servicePrincipalClientId",
                type: {
                    name: "String"
                }
            },
            audience: {
                serializedName: "audience",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GenericContainerExtendedInfo = {
    type: {
        name: "Composite",
        className: "GenericContainerExtendedInfo",
        modelProperties: {
            rawCertData: {
                serializedName: "rawCertData",
                type: {
                    name: "String"
                }
            },
            containerIdentityInfo: {
                serializedName: "containerIdentityInfo",
                type: {
                    name: "Composite",
                    className: "ContainerIdentityInfo"
                }
            },
            serviceEndpoints: {
                serializedName: "serviceEndpoints",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const InstantItemRecoveryTarget = {
    type: {
        name: "Composite",
        className: "InstantItemRecoveryTarget",
        modelProperties: {
            clientScripts: {
                serializedName: "clientScripts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClientScriptForConnect"
                        }
                    }
                }
            }
        }
    }
};
const MabContainerExtendedInfo = {
    type: {
        name: "Composite",
        className: "MabContainerExtendedInfo",
        modelProperties: {
            lastRefreshedAt: {
                serializedName: "lastRefreshedAt",
                type: {
                    name: "DateTime"
                }
            },
            backupItemType: {
                serializedName: "backupItemType",
                type: {
                    name: "String"
                }
            },
            backupItems: {
                serializedName: "backupItems",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            },
            lastBackupStatus: {
                serializedName: "lastBackupStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MABContainerHealthDetails = {
    type: {
        name: "Composite",
        className: "MABContainerHealthDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "Number"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            recommendations: {
                serializedName: "recommendations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const RecoveryPointRehydrationInfo = {
    type: {
        name: "Composite",
        className: "RecoveryPointRehydrationInfo",
        modelProperties: {
            rehydrationRetentionDuration: {
                serializedName: "rehydrationRetentionDuration",
                type: {
                    name: "String"
                }
            },
            rehydrationPriority: {
                serializedName: "rehydrationPriority",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BackupResourceConfigResource = {
    type: {
        name: "Composite",
        className: "BackupResourceConfigResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BackupResourceConfig"
                }
            } })
    }
};
const ProtectionIntentResource = {
    type: {
        name: "Composite",
        className: "ProtectionIntentResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectionIntent"
                }
            } })
    }
};
const BackupResourceVaultConfigResource = {
    type: {
        name: "Composite",
        className: "BackupResourceVaultConfigResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BackupResourceVaultConfig"
                }
            } })
    }
};
const BackupResourceEncryptionConfigExtendedResource = {
    type: {
        name: "Composite",
        className: "BackupResourceEncryptionConfigExtendedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BackupResourceEncryptionConfigExtended"
                }
            } })
    }
};
const BackupResourceEncryptionConfigResource = {
    type: {
        name: "Composite",
        className: "BackupResourceEncryptionConfigResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BackupResourceEncryptionConfig"
                }
            } })
    }
};
const PrivateEndpointConnectionResource = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointConnection"
                }
            } })
    }
};
const ProtectedItemResource = {
    type: {
        name: "Composite",
        className: "ProtectedItemResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectedItem"
                }
            } })
    }
};
const RecoveryPointResource = {
    type: {
        name: "Composite",
        className: "RecoveryPointResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPoint"
                }
            } })
    }
};
const RestoreRequestResource = {
    type: {
        name: "Composite",
        className: "RestoreRequestResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RestoreRequest"
                }
            } })
    }
};
const ProtectionPolicyResource = {
    type: {
        name: "Composite",
        className: "ProtectionPolicyResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectionPolicy"
                }
            } })
    }
};
const JobResource = {
    type: {
        name: "Composite",
        className: "JobResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Job"
                }
            } })
    }
};
const BackupEngineBaseResource = {
    type: {
        name: "Composite",
        className: "BackupEngineBaseResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BackupEngineBase"
                }
            } })
    }
};
const ProtectableContainerResource = {
    type: {
        name: "Composite",
        className: "ProtectableContainerResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectableContainer"
                }
            } })
    }
};
const ProtectionContainerResource = {
    type: {
        name: "Composite",
        className: "ProtectionContainerResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectionContainer"
                }
            } })
    }
};
const WorkloadItemResource = {
    type: {
        name: "Composite",
        className: "WorkloadItemResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "WorkloadItem"
                }
            } })
    }
};
const BackupRequestResource = {
    type: {
        name: "Composite",
        className: "BackupRequestResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BackupRequest"
                }
            } })
    }
};
const ILRRequestResource = {
    type: {
        name: "Composite",
        className: "ILRRequestResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ILRRequest"
                }
            } })
    }
};
const WorkloadProtectableItemResource = {
    type: {
        name: "Composite",
        className: "WorkloadProtectableItemResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "WorkloadProtectableItem"
                }
            } })
    }
};
const ResourceGuardProxyBaseResource = {
    type: {
        name: "Composite",
        className: "ResourceGuardProxyBaseResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ResourceGuardProxyBase"
                }
            } })
    }
};
const AzureBackupGoalFeatureSupportRequest = {
    serializedName: "AzureBackupGoals",
    type: {
        name: "Composite",
        className: "AzureBackupGoalFeatureSupportRequest",
        uberParent: "FeatureSupportRequest",
        polymorphicDiscriminator: FeatureSupportRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, FeatureSupportRequest.type.modelProperties)
    }
};
const AzureVMResourceFeatureSupportRequest = {
    serializedName: "AzureVMResourceBackup",
    type: {
        name: "Composite",
        className: "AzureVMResourceFeatureSupportRequest",
        uberParent: "FeatureSupportRequest",
        polymorphicDiscriminator: FeatureSupportRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FeatureSupportRequest.type.modelProperties), { vmSize: {
                serializedName: "vmSize",
                type: {
                    name: "String"
                }
            }, vmSku: {
                serializedName: "vmSku",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureRecoveryServiceVaultProtectionIntent = {
    serializedName: "RecoveryServiceVaultItem",
    type: {
        name: "Composite",
        className: "AzureRecoveryServiceVaultProtectionIntent",
        uberParent: "ProtectionIntent",
        polymorphicDiscriminator: {
            serializedName: "protectionIntentItemType",
            clientName: "protectionIntentItemType"
        },
        modelProperties: Object.assign({}, ProtectionIntent.type.modelProperties)
    }
};
const AzureResourceProtectionIntent = {
    serializedName: "AzureResourceItem",
    type: {
        name: "Composite",
        className: "AzureResourceProtectionIntent",
        uberParent: "ProtectionIntent",
        polymorphicDiscriminator: ProtectionIntent.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionIntent.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureWorkloadContainerAutoProtectionIntent = {
    serializedName: "AzureWorkloadContainerAutoProtectionIntent",
    type: {
        name: "Composite",
        className: "AzureWorkloadContainerAutoProtectionIntent",
        uberParent: "ProtectionIntent",
        polymorphicDiscriminator: ProtectionIntent.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ProtectionIntent.type.modelProperties)
    }
};
const ProtectionIntentResourceList = {
    type: {
        name: "Composite",
        className: "ProtectionIntentResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectionIntentResource"
                        }
                    }
                }
            } })
    }
};
const RecoveryPointResourceList = {
    type: {
        name: "Composite",
        className: "RecoveryPointResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPointResource"
                        }
                    }
                }
            } })
    }
};
const ProtectionPolicyResourceList = {
    type: {
        name: "Composite",
        className: "ProtectionPolicyResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectionPolicyResource"
                        }
                    }
                }
            } })
    }
};
const JobResourceList = {
    type: {
        name: "Composite",
        className: "JobResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobResource"
                        }
                    }
                }
            } })
    }
};
const ProtectedItemResourceList = {
    type: {
        name: "Composite",
        className: "ProtectedItemResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectedItemResource"
                        }
                    }
                }
            } })
    }
};
const BackupEngineBaseResourceList = {
    type: {
        name: "Composite",
        className: "BackupEngineBaseResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BackupEngineBaseResource"
                        }
                    }
                }
            } })
    }
};
const ProtectableContainerResourceList = {
    type: {
        name: "Composite",
        className: "ProtectableContainerResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectableContainerResource"
                        }
                    }
                }
            } })
    }
};
const WorkloadItemResourceList = {
    type: {
        name: "Composite",
        className: "WorkloadItemResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WorkloadItemResource"
                        }
                    }
                }
            } })
    }
};
const WorkloadProtectableItemResourceList = {
    type: {
        name: "Composite",
        className: "WorkloadProtectableItemResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WorkloadProtectableItemResource"
                        }
                    }
                }
            } })
    }
};
const ProtectionContainerResourceList = {
    type: {
        name: "Composite",
        className: "ProtectionContainerResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectionContainerResource"
                        }
                    }
                }
            } })
    }
};
const ResourceGuardProxyBaseResourceList = {
    type: {
        name: "Composite",
        className: "ResourceGuardProxyBaseResourceList",
        modelProperties: Object.assign(Object.assign({}, ResourceList.type.modelProperties), { value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceGuardProxyBaseResource"
                        }
                    }
                }
            } })
    }
};
const BackupResourceEncryptionConfigExtended = {
    type: {
        name: "Composite",
        className: "BackupResourceEncryptionConfigExtended",
        modelProperties: Object.assign(Object.assign({}, BackupResourceEncryptionConfig.type.modelProperties), { userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }, useSystemAssignedIdentity: {
                serializedName: "useSystemAssignedIdentity",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const OperationStatusJobExtendedInfo = {
    serializedName: "OperationStatusJobExtendedInfo",
    type: {
        name: "Composite",
        className: "OperationStatusJobExtendedInfo",
        uberParent: "OperationStatusExtendedInfo",
        polymorphicDiscriminator: OperationStatusExtendedInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, OperationStatusExtendedInfo.type.modelProperties), { jobId: {
                serializedName: "jobId",
                type: {
                    name: "String"
                }
            } })
    }
};
const OperationStatusJobsExtendedInfo = {
    serializedName: "OperationStatusJobsExtendedInfo",
    type: {
        name: "Composite",
        className: "OperationStatusJobsExtendedInfo",
        uberParent: "OperationStatusExtendedInfo",
        polymorphicDiscriminator: OperationStatusExtendedInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, OperationStatusExtendedInfo.type.modelProperties), { jobIds: {
                serializedName: "jobIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, failedJobsError: {
                serializedName: "failedJobsError",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const OperationStatusProvisionILRExtendedInfo = {
    serializedName: "OperationStatusProvisionILRExtendedInfo",
    type: {
        name: "Composite",
        className: "OperationStatusProvisionILRExtendedInfo",
        uberParent: "OperationStatusExtendedInfo",
        polymorphicDiscriminator: OperationStatusExtendedInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, OperationStatusExtendedInfo.type.modelProperties), { recoveryTarget: {
                serializedName: "recoveryTarget",
                type: {
                    name: "Composite",
                    className: "InstantItemRecoveryTarget"
                }
            } })
    }
};
const OperationStatusValidateOperationExtendedInfo = {
    serializedName: "OperationStatusValidateOperationExtendedInfo",
    type: {
        name: "Composite",
        className: "OperationStatusValidateOperationExtendedInfo",
        uberParent: "OperationStatusExtendedInfo",
        polymorphicDiscriminator: OperationStatusExtendedInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, OperationStatusExtendedInfo.type.modelProperties), { validateOperationResponse: {
                serializedName: "validateOperationResponse",
                type: {
                    name: "Composite",
                    className: "ValidateOperationResponse"
                }
            } })
    }
};
const PrepareDataMoveResponse = {
    serializedName: "PrepareDataMoveResponse",
    type: {
        name: "Composite",
        className: "PrepareDataMoveResponse",
        uberParent: "VaultStorageConfigOperationResultResponse",
        polymorphicDiscriminator: VaultStorageConfigOperationResultResponse.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, VaultStorageConfigOperationResultResponse.type.modelProperties), { correlationId: {
                serializedName: "correlationId",
                type: {
                    name: "String"
                }
            }, sourceVaultProperties: {
                serializedName: "sourceVaultProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const AzureFileshareProtectedItem = {
    serializedName: "AzureFileShareProtectedItem",
    type: {
        name: "Composite",
        className: "AzureFileshareProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }, protectionStatus: {
                serializedName: "protectionStatus",
                type: {
                    name: "String"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, lastBackupStatus: {
                serializedName: "lastBackupStatus",
                type: {
                    name: "String"
                }
            }, lastBackupTime: {
                serializedName: "lastBackupTime",
                type: {
                    name: "DateTime"
                }
            }, kpisHealths: {
                serializedName: "kpisHealths",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "KPIResourceHealthDetails" }
                    }
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureFileshareProtectedItemExtendedInfo"
                }
            } })
    }
};
const AzureIaaSVMProtectedItem = {
    serializedName: "AzureIaaSVMProtectedItem",
    type: {
        name: "Composite",
        className: "AzureIaaSVMProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: {
            serializedName: "protectedItemType",
            clientName: "protectedItemType"
        },
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, virtualMachineId: {
                serializedName: "virtualMachineId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, protectionStatus: {
                serializedName: "protectionStatus",
                type: {
                    name: "String"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, healthStatus: {
                serializedName: "healthStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, healthDetails: {
                serializedName: "healthDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureIaaSVMHealthDetails"
                        }
                    }
                }
            }, kpisHealths: {
                serializedName: "kpisHealths",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "KPIResourceHealthDetails" }
                    }
                }
            }, lastBackupStatus: {
                serializedName: "lastBackupStatus",
                type: {
                    name: "String"
                }
            }, lastBackupTime: {
                serializedName: "lastBackupTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, protectedItemDataId: {
                serializedName: "protectedItemDataId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureIaaSVMProtectedItemExtendedInfo"
                }
            }, extendedProperties: {
                serializedName: "extendedProperties",
                type: {
                    name: "Composite",
                    className: "ExtendedProperties"
                }
            } })
    }
};
const AzureSqlProtectedItem = {
    serializedName: "Microsoft.Sql/servers/databases",
    type: {
        name: "Composite",
        className: "AzureSqlProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { protectedItemDataId: {
                serializedName: "protectedItemDataId",
                type: {
                    name: "String"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureSqlProtectedItemExtendedInfo"
                }
            } })
    }
};
const AzureVmWorkloadProtectedItem = {
    serializedName: "AzureVmWorkloadProtectedItem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: {
            serializedName: "protectedItemType",
            clientName: "protectedItemType"
        },
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, serverName: {
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            }, parentName: {
                serializedName: "parentName",
                type: {
                    name: "String"
                }
            }, parentType: {
                serializedName: "parentType",
                type: {
                    name: "String"
                }
            }, protectionStatus: {
                serializedName: "protectionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, lastBackupStatus: {
                serializedName: "lastBackupStatus",
                type: {
                    name: "String"
                }
            }, lastBackupTime: {
                serializedName: "lastBackupTime",
                type: {
                    name: "DateTime"
                }
            }, lastBackupErrorDetail: {
                serializedName: "lastBackupErrorDetail",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }, protectedItemDataSourceId: {
                serializedName: "protectedItemDataSourceId",
                type: {
                    name: "String"
                }
            }, protectedItemHealthStatus: {
                serializedName: "protectedItemHealthStatus",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureVmWorkloadProtectedItemExtendedInfo"
                }
            }, kpisHealths: {
                serializedName: "kpisHealths",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "KPIResourceHealthDetails" }
                    }
                }
            }, nodesList: {
                serializedName: "nodesList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DistributedNodesInfo"
                        }
                    }
                }
            } })
    }
};
const DPMProtectedItem = {
    serializedName: "DPMProtectedItem",
    type: {
        name: "Composite",
        className: "DPMProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }, backupEngineName: {
                serializedName: "backupEngineName",
                type: {
                    name: "String"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "DPMProtectedItemExtendedInfo"
                }
            } })
    }
};
const GenericProtectedItem = {
    serializedName: "GenericProtectedItem",
    type: {
        name: "Composite",
        className: "GenericProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }, policyState: {
                serializedName: "policyState",
                type: {
                    name: "String"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, protectedItemId: {
                serializedName: "protectedItemId",
                type: {
                    name: "Number"
                }
            }, sourceAssociations: {
                serializedName: "sourceAssociations",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            } })
    }
};
const MabFileFolderProtectedItem = {
    serializedName: "MabFileFolderProtectedItem",
    type: {
        name: "Composite",
        className: "MabFileFolderProtectedItem",
        uberParent: "ProtectedItem",
        polymorphicDiscriminator: ProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectedItem.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }, computerName: {
                serializedName: "computerName",
                type: {
                    name: "String"
                }
            }, lastBackupStatus: {
                serializedName: "lastBackupStatus",
                type: {
                    name: "String"
                }
            }, lastBackupTime: {
                serializedName: "lastBackupTime",
                type: {
                    name: "DateTime"
                }
            }, protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String"
                }
            }, deferredDeleteSyncTimeInUTC: {
                serializedName: "deferredDeleteSyncTimeInUTC",
                type: {
                    name: "Number"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "MabFileFolderProtectedItemExtendedInfo"
                }
            } })
    }
};
const AzureFileShareRecoveryPoint = {
    serializedName: "AzureFileShareRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureFileShareRecoveryPoint",
        uberParent: "RecoveryPoint",
        polymorphicDiscriminator: RecoveryPoint.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPoint.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String"
                }
            }, recoveryPointTime: {
                serializedName: "recoveryPointTime",
                type: {
                    name: "DateTime"
                }
            }, fileShareSnapshotUri: {
                serializedName: "fileShareSnapshotUri",
                type: {
                    name: "String"
                }
            }, recoveryPointSizeInGB: {
                serializedName: "recoveryPointSizeInGB",
                type: {
                    name: "Number"
                }
            }, recoveryPointProperties: {
                serializedName: "recoveryPointProperties",
                type: {
                    name: "Composite",
                    className: "RecoveryPointProperties"
                }
            } })
    }
};
const AzureWorkloadRecoveryPoint = {
    serializedName: "AzureWorkloadRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureWorkloadRecoveryPoint",
        uberParent: "RecoveryPoint",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, RecoveryPoint.type.modelProperties), { recoveryPointTimeInUTC: {
                serializedName: "recoveryPointTimeInUTC",
                type: {
                    name: "DateTime"
                }
            }, type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }, recoveryPointTierDetails: {
                serializedName: "recoveryPointTierDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPointTierInformationV2"
                        }
                    }
                }
            }, recoveryPointMoveReadinessInfo: {
                serializedName: "recoveryPointMoveReadinessInfo",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPointMoveReadinessInfo"
                        }
                    }
                }
            }, recoveryPointProperties: {
                serializedName: "recoveryPointProperties",
                type: {
                    name: "Composite",
                    className: "RecoveryPointProperties"
                }
            } })
    }
};
const GenericRecoveryPoint = {
    serializedName: "GenericRecoveryPoint",
    type: {
        name: "Composite",
        className: "GenericRecoveryPoint",
        uberParent: "RecoveryPoint",
        polymorphicDiscriminator: RecoveryPoint.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPoint.type.modelProperties), { friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            }, recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String"
                }
            }, recoveryPointTime: {
                serializedName: "recoveryPointTime",
                type: {
                    name: "DateTime"
                }
            }, recoveryPointAdditionalInfo: {
                serializedName: "recoveryPointAdditionalInfo",
                type: {
                    name: "String"
                }
            }, recoveryPointProperties: {
                serializedName: "recoveryPointProperties",
                type: {
                    name: "Composite",
                    className: "RecoveryPointProperties"
                }
            } })
    }
};
const IaasVMRecoveryPoint = {
    serializedName: "IaasVMRecoveryPoint",
    type: {
        name: "Composite",
        className: "IaasVMRecoveryPoint",
        uberParent: "RecoveryPoint",
        polymorphicDiscriminator: RecoveryPoint.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPoint.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String"
                }
            }, recoveryPointTime: {
                serializedName: "recoveryPointTime",
                type: {
                    name: "DateTime"
                }
            }, recoveryPointAdditionalInfo: {
                serializedName: "recoveryPointAdditionalInfo",
                type: {
                    name: "String"
                }
            }, sourceVMStorageType: {
                serializedName: "sourceVMStorageType",
                type: {
                    name: "String"
                }
            }, isSourceVMEncrypted: {
                serializedName: "isSourceVMEncrypted",
                type: {
                    name: "Boolean"
                }
            }, keyAndSecret: {
                serializedName: "keyAndSecret",
                type: {
                    name: "Composite",
                    className: "KeyAndSecretDetails"
                }
            }, isInstantIlrSessionActive: {
                serializedName: "isInstantIlrSessionActive",
                type: {
                    name: "Boolean"
                }
            }, recoveryPointTierDetails: {
                serializedName: "recoveryPointTierDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPointTierInformationV2"
                        }
                    }
                }
            }, isManagedVirtualMachine: {
                serializedName: "isManagedVirtualMachine",
                type: {
                    name: "Boolean"
                }
            }, virtualMachineSize: {
                serializedName: "virtualMachineSize",
                type: {
                    name: "String"
                }
            }, originalStorageAccountOption: {
                serializedName: "originalStorageAccountOption",
                type: {
                    name: "Boolean"
                }
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String"
                }
            }, recoveryPointDiskConfiguration: {
                serializedName: "recoveryPointDiskConfiguration",
                type: {
                    name: "Composite",
                    className: "RecoveryPointDiskConfiguration"
                }
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, recoveryPointMoveReadinessInfo: {
                serializedName: "recoveryPointMoveReadinessInfo",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPointMoveReadinessInfo"
                        }
                    }
                }
            }, securityType: {
                serializedName: "securityType",
                type: {
                    name: "String"
                }
            }, recoveryPointProperties: {
                serializedName: "recoveryPointProperties",
                type: {
                    name: "Composite",
                    className: "RecoveryPointProperties"
                }
            }, isPrivateAccessEnabledOnAnyDisk: {
                serializedName: "isPrivateAccessEnabledOnAnyDisk",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AzureFileShareRestoreRequest = {
    serializedName: "AzureFileShareRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureFileShareRestoreRequest",
        uberParent: "RestoreRequest",
        polymorphicDiscriminator: RestoreRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RestoreRequest.type.modelProperties), { recoveryType: {
                serializedName: "recoveryType",
                type: {
                    name: "String"
                }
            }, sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            }, copyOptions: {
                serializedName: "copyOptions",
                type: {
                    name: "String"
                }
            }, restoreRequestType: {
                serializedName: "restoreRequestType",
                type: {
                    name: "String"
                }
            }, restoreFileSpecs: {
                serializedName: "restoreFileSpecs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RestoreFileSpecs"
                        }
                    }
                }
            }, targetDetails: {
                serializedName: "targetDetails",
                type: {
                    name: "Composite",
                    className: "TargetAFSRestoreInfo"
                }
            } })
    }
};
const AzureWorkloadRestoreRequest = {
    serializedName: "AzureWorkloadRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadRestoreRequest",
        uberParent: "RestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, RestoreRequest.type.modelProperties), { recoveryType: {
                serializedName: "recoveryType",
                type: {
                    name: "String"
                }
            }, sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            }, propertyBag: {
                serializedName: "propertyBag",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, targetInfo: {
                serializedName: "targetInfo",
                type: {
                    name: "Composite",
                    className: "TargetRestoreInfo"
                }
            }, recoveryMode: {
                serializedName: "recoveryMode",
                type: {
                    name: "String"
                }
            }, targetVirtualMachineId: {
                serializedName: "targetVirtualMachineId",
                type: {
                    name: "String"
                }
            } })
    }
};
const IaasVMRestoreRequest = {
    serializedName: "IaasVMRestoreRequest",
    type: {
        name: "Composite",
        className: "IaasVMRestoreRequest",
        uberParent: "RestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, RestoreRequest.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String"
                }
            }, recoveryType: {
                serializedName: "recoveryType",
                type: {
                    name: "String"
                }
            }, sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            }, targetVirtualMachineId: {
                serializedName: "targetVirtualMachineId",
                type: {
                    name: "String"
                }
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                type: {
                    name: "String"
                }
            }, storageAccountId: {
                serializedName: "storageAccountId",
                type: {
                    name: "String"
                }
            }, virtualNetworkId: {
                serializedName: "virtualNetworkId",
                type: {
                    name: "String"
                }
            }, subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            }, targetDomainNameId: {
                serializedName: "targetDomainNameId",
                type: {
                    name: "String"
                }
            }, region: {
                serializedName: "region",
                type: {
                    name: "String"
                }
            }, affinityGroup: {
                serializedName: "affinityGroup",
                type: {
                    name: "String"
                }
            }, createNewCloudService: {
                serializedName: "createNewCloudService",
                type: {
                    name: "Boolean"
                }
            }, originalStorageAccountOption: {
                serializedName: "originalStorageAccountOption",
                type: {
                    name: "Boolean"
                }
            }, encryptionDetails: {
                serializedName: "encryptionDetails",
                type: {
                    name: "Composite",
                    className: "EncryptionDetails"
                }
            }, restoreDiskLunList: {
                serializedName: "restoreDiskLunList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            }, restoreWithManagedDisks: {
                serializedName: "restoreWithManagedDisks",
                type: {
                    name: "Boolean"
                }
            }, diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String"
                }
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, identityInfo: {
                serializedName: "identityInfo",
                type: {
                    name: "Composite",
                    className: "IdentityInfo"
                }
            }, identityBasedRestoreDetails: {
                serializedName: "identityBasedRestoreDetails",
                type: {
                    name: "Composite",
                    className: "IdentityBasedRestoreDetails"
                }
            }, extendedLocation: {
                serializedName: "extendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation"
                }
            }, securedVMDetails: {
                serializedName: "securedVMDetails",
                type: {
                    name: "Composite",
                    className: "SecuredVMDetails"
                }
            }, targetDiskNetworkAccessSettings: {
                serializedName: "targetDiskNetworkAccessSettings",
                type: {
                    name: "Composite",
                    className: "TargetDiskNetworkAccessSettings"
                }
            } })
    }
};
const AzureVmWorkloadProtectionPolicy = {
    serializedName: "AzureWorkload",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionPolicy.type.modelProperties), { workLoadType: {
                serializedName: "workLoadType",
                type: {
                    name: "String"
                }
            }, settings: {
                serializedName: "settings",
                type: {
                    name: "Composite",
                    className: "Settings"
                }
            }, subProtectionPolicy: {
                serializedName: "subProtectionPolicy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubProtectionPolicy"
                        }
                    }
                }
            }, makePolicyConsistent: {
                serializedName: "makePolicyConsistent",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AzureFileShareProtectionPolicy = {
    serializedName: "AzureStorage",
    type: {
        name: "Composite",
        className: "AzureFileShareProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionPolicy.type.modelProperties), { workLoadType: {
                serializedName: "workLoadType",
                type: {
                    name: "String"
                }
            }, schedulePolicy: {
                serializedName: "schedulePolicy",
                type: {
                    name: "Composite",
                    className: "SchedulePolicy"
                }
            }, retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            }, timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureIaaSVMProtectionPolicy = {
    serializedName: "AzureIaasVM",
    type: {
        name: "Composite",
        className: "AzureIaaSVMProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionPolicy.type.modelProperties), { instantRPDetails: {
                serializedName: "instantRPDetails",
                type: {
                    name: "Composite",
                    className: "InstantRPAdditionalDetails"
                }
            }, schedulePolicy: {
                serializedName: "schedulePolicy",
                type: {
                    name: "Composite",
                    className: "SchedulePolicy"
                }
            }, retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            }, tieringPolicy: {
                serializedName: "tieringPolicy",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "TieringPolicy" } }
                }
            }, instantRpRetentionRangeInDays: {
                serializedName: "instantRpRetentionRangeInDays",
                type: {
                    name: "Number"
                }
            }, timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            }, policyType: {
                serializedName: "policyType",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureSqlProtectionPolicy = {
    serializedName: "AzureSql",
    type: {
        name: "Composite",
        className: "AzureSqlProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionPolicy.type.modelProperties), { retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            } })
    }
};
const GenericProtectionPolicy = {
    serializedName: "GenericProtectionPolicy",
    type: {
        name: "Composite",
        className: "GenericProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionPolicy.type.modelProperties), { subProtectionPolicy: {
                serializedName: "subProtectionPolicy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubProtectionPolicy"
                        }
                    }
                }
            }, timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String"
                }
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            } })
    }
};
const MabProtectionPolicy = {
    serializedName: "MAB",
    type: {
        name: "Composite",
        className: "MabProtectionPolicy",
        uberParent: "ProtectionPolicy",
        polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionPolicy.type.modelProperties), { schedulePolicy: {
                serializedName: "schedulePolicy",
                type: {
                    name: "Composite",
                    className: "SchedulePolicy"
                }
            }, retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            } })
    }
};
const AzureIaaSVMJob = {
    serializedName: "AzureIaaSVMJob",
    type: {
        name: "Composite",
        className: "AzureIaaSVMJob",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureIaaSVMErrorInfo"
                        }
                    }
                }
            }, virtualMachineVersion: {
                serializedName: "virtualMachineVersion",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureIaaSVMJobExtendedInfo"
                }
            }, containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            }, isUserTriggered: {
                serializedName: "isUserTriggered",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AzureIaaSVMJobV2 = {
    serializedName: "AzureIaaSVMJobV2",
    type: {
        name: "Composite",
        className: "AzureIaaSVMJobV2",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            }, duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureIaaSVMErrorInfo"
                        }
                    }
                }
            }, virtualMachineVersion: {
                serializedName: "virtualMachineVersion",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureIaaSVMJobExtendedInfo"
                }
            } })
    }
};
const AzureStorageJob = {
    serializedName: "AzureStorageJob",
    type: {
        name: "Composite",
        className: "AzureStorageJob",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureStorageErrorInfo"
                        }
                    }
                }
            }, storageAccountName: {
                serializedName: "storageAccountName",
                type: {
                    name: "String"
                }
            }, storageAccountVersion: {
                serializedName: "storageAccountVersion",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureStorageJobExtendedInfo"
                }
            }, isUserTriggered: {
                serializedName: "isUserTriggered",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AzureWorkloadJob = {
    serializedName: "AzureWorkloadJob",
    type: {
        name: "Composite",
        className: "AzureWorkloadJob",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            }, duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureWorkloadErrorInfo"
                        }
                    }
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureWorkloadJobExtendedInfo"
                }
            } })
    }
};
const DpmJob = {
    serializedName: "DpmJob",
    type: {
        name: "Composite",
        className: "DpmJob",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, dpmServerName: {
                serializedName: "dpmServerName",
                type: {
                    name: "String"
                }
            }, containerName: {
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            }, containerType: {
                serializedName: "containerType",
                type: {
                    name: "String"
                }
            }, workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            }, actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DpmErrorInfo"
                        }
                    }
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "DpmJobExtendedInfo"
                }
            } })
    }
};
const MabJob = {
    serializedName: "MabJob",
    type: {
        name: "Composite",
        className: "MabJob",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, mabServerName: {
                serializedName: "mabServerName",
                type: {
                    name: "String"
                }
            }, mabServerType: {
                serializedName: "mabServerType",
                type: {
                    name: "String"
                }
            }, workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MabErrorInfo"
                        }
                    }
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "MabJobExtendedInfo"
                }
            } })
    }
};
const VaultJob = {
    serializedName: "VaultJob",
    type: {
        name: "Composite",
        className: "VaultJob",
        uberParent: "Job",
        polymorphicDiscriminator: Job.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Job.type.modelProperties), { duration: {
                serializedName: "duration",
                type: {
                    name: "TimeSpan"
                }
            }, actionsInfo: {
                serializedName: "actionsInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Invalid", "Cancellable", "Retriable"]
                        }
                    }
                }
            }, errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VaultJobErrorInfo"
                        }
                    }
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "VaultJobExtendedInfo"
                }
            } })
    }
};
const ExportJobsOperationResultInfo = {
    serializedName: "ExportJobsOperationResultInfo",
    type: {
        name: "Composite",
        className: "ExportJobsOperationResultInfo",
        uberParent: "OperationResultInfoBase",
        polymorphicDiscriminator: OperationResultInfoBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, OperationResultInfoBase.type.modelProperties), { blobUrl: {
                serializedName: "blobUrl",
                type: {
                    name: "String"
                }
            }, blobSasKey: {
                serializedName: "blobSasKey",
                type: {
                    name: "String"
                }
            }, excelFileBlobUrl: {
                serializedName: "excelFileBlobUrl",
                type: {
                    name: "String"
                }
            }, excelFileBlobSasKey: {
                serializedName: "excelFileBlobSasKey",
                type: {
                    name: "String"
                }
            } })
    }
};
const OperationResultInfo = {
    serializedName: "OperationResultInfo",
    type: {
        name: "Composite",
        className: "OperationResultInfo",
        uberParent: "OperationResultInfoBase",
        modelProperties: Object.assign(Object.assign({}, OperationResultInfoBase.type.modelProperties), { jobList: {
                serializedName: "jobList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
OperationResultInfoBase.type.polymorphicDiscriminator =
    OperationResultInfoBase.type.polymorphicDiscriminator;
const OperationResultInfoBaseResource = {
    type: {
        name: "Composite",
        className: "OperationResultInfoBaseResource",
        modelProperties: Object.assign(Object.assign({}, OperationWorkerResponse.type.modelProperties), { operation: {
                serializedName: "operation",
                type: {
                    name: "Composite",
                    className: "OperationResultInfoBase"
                }
            } })
    }
};
const ValidateRestoreOperationRequest = {
    serializedName: "ValidateRestoreOperationRequest",
    type: {
        name: "Composite",
        className: "ValidateRestoreOperationRequest",
        uberParent: "ValidateOperationRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, ValidateOperationRequest.type.modelProperties), { restoreRequest: {
                serializedName: "restoreRequest",
                type: {
                    name: "Composite",
                    className: "RestoreRequest"
                }
            } })
    }
};
const AzureBackupServerEngine = {
    serializedName: "AzureBackupServerEngine",
    type: {
        name: "Composite",
        className: "AzureBackupServerEngine",
        uberParent: "BackupEngineBase",
        polymorphicDiscriminator: BackupEngineBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, BackupEngineBase.type.modelProperties)
    }
};
const DpmBackupEngine = {
    serializedName: "DpmBackupEngine",
    type: {
        name: "Composite",
        className: "DpmBackupEngine",
        uberParent: "BackupEngineBase",
        polymorphicDiscriminator: BackupEngineBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, BackupEngineBase.type.modelProperties)
    }
};
const AzureStorageProtectableContainer = {
    serializedName: "StorageContainer",
    type: {
        name: "Composite",
        className: "AzureStorageProtectableContainer",
        uberParent: "ProtectableContainer",
        polymorphicDiscriminator: ProtectableContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ProtectableContainer.type.modelProperties)
    }
};
const AzureVMAppContainerProtectableContainer = {
    serializedName: "VMAppContainer",
    type: {
        name: "Composite",
        className: "AzureVMAppContainerProtectableContainer",
        uberParent: "ProtectableContainer",
        polymorphicDiscriminator: ProtectableContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ProtectableContainer.type.modelProperties)
    }
};
const DpmContainer = {
    serializedName: "DPMContainer",
    type: {
        name: "Composite",
        className: "DpmContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: {
            serializedName: "containerType",
            clientName: "containerType"
        },
        modelProperties: Object.assign(Object.assign({}, ProtectionContainer.type.modelProperties), { canReRegister: {
                serializedName: "canReRegister",
                type: {
                    name: "Boolean"
                }
            }, containerId: {
                serializedName: "containerId",
                type: {
                    name: "String"
                }
            }, protectedItemCount: {
                serializedName: "protectedItemCount",
                type: {
                    name: "Number"
                }
            }, dpmAgentVersion: {
                serializedName: "dpmAgentVersion",
                type: {
                    name: "String"
                }
            }, dpmServers: {
                serializedName: "dpmServers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, upgradeAvailable: {
                serializedName: "upgradeAvailable",
                type: {
                    name: "Boolean"
                }
            }, protectionStatus: {
                serializedName: "protectionStatus",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "DPMContainerExtendedInfo"
                }
            } })
    }
};
const IaaSVMContainer = {
    serializedName: "IaasVMContainer",
    type: {
        name: "Composite",
        className: "IaaSVMContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: {
            serializedName: "containerType",
            clientName: "containerType"
        },
        modelProperties: Object.assign(Object.assign({}, ProtectionContainer.type.modelProperties), { virtualMachineId: {
                serializedName: "virtualMachineId",
                type: {
                    name: "String"
                }
            }, virtualMachineVersion: {
                serializedName: "virtualMachineVersion",
                type: {
                    name: "String"
                }
            }, resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureWorkloadContainer = {
    serializedName: "AzureWorkloadContainer",
    type: {
        name: "Composite",
        className: "AzureWorkloadContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: {
            serializedName: "containerType",
            clientName: "containerType"
        },
        modelProperties: Object.assign(Object.assign({}, ProtectionContainer.type.modelProperties), { sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            }, lastUpdatedTime: {
                serializedName: "lastUpdatedTime",
                type: {
                    name: "DateTime"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureWorkloadContainerExtendedInfo"
                }
            }, workloadType: {
                serializedName: "workloadType",
                type: {
                    name: "String"
                }
            }, operationType: {
                serializedName: "operationType",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureSqlContainer = {
    serializedName: "AzureSqlContainer",
    type: {
        name: "Composite",
        className: "AzureSqlContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ProtectionContainer.type.modelProperties)
    }
};
const AzureStorageContainer = {
    serializedName: "StorageContainer",
    type: {
        name: "Composite",
        className: "AzureStorageContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionContainer.type.modelProperties), { sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            }, storageAccountVersion: {
                serializedName: "storageAccountVersion",
                type: {
                    name: "String"
                }
            }, resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            }, protectedItemCount: {
                serializedName: "protectedItemCount",
                type: {
                    name: "Number"
                }
            }, acquireStorageAccountLock: {
                serializedName: "acquireStorageAccountLock",
                type: {
                    name: "String"
                }
            } })
    }
};
const GenericContainer = {
    serializedName: "GenericContainer",
    type: {
        name: "Composite",
        className: "GenericContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionContainer.type.modelProperties), { fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String"
                }
            }, extendedInformation: {
                serializedName: "extendedInformation",
                type: {
                    name: "Composite",
                    className: "GenericContainerExtendedInfo"
                }
            } })
    }
};
const MabContainer = {
    serializedName: "Windows",
    type: {
        name: "Composite",
        className: "MabContainer",
        uberParent: "ProtectionContainer",
        polymorphicDiscriminator: ProtectionContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionContainer.type.modelProperties), { canReRegister: {
                serializedName: "canReRegister",
                type: {
                    name: "Boolean"
                }
            }, containerId: {
                serializedName: "containerId",
                type: {
                    name: "Number"
                }
            }, protectedItemCount: {
                serializedName: "protectedItemCount",
                type: {
                    name: "Number"
                }
            }, agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String"
                }
            }, extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "MabContainerExtendedInfo"
                }
            }, mabContainerHealthDetails: {
                serializedName: "mabContainerHealthDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MABContainerHealthDetails"
                        }
                    }
                }
            }, containerHealthState: {
                serializedName: "containerHealthState",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureVmWorkloadItem = {
    serializedName: "AzureVmWorkloadItem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadItem",
        uberParent: "WorkloadItem",
        polymorphicDiscriminator: {
            serializedName: "workloadItemType",
            clientName: "workloadItemType"
        },
        modelProperties: Object.assign(Object.assign({}, WorkloadItem.type.modelProperties), { parentName: {
                serializedName: "parentName",
                type: {
                    name: "String"
                }
            }, serverName: {
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            }, isAutoProtectable: {
                serializedName: "isAutoProtectable",
                type: {
                    name: "Boolean"
                }
            }, subinquireditemcount: {
                serializedName: "subinquireditemcount",
                type: {
                    name: "Number"
                }
            }, subWorkloadItemCount: {
                serializedName: "subWorkloadItemCount",
                type: {
                    name: "Number"
                }
            } })
    }
};
const AzureFileShareBackupRequest = {
    serializedName: "AzureFileShareBackupRequest",
    type: {
        name: "Composite",
        className: "AzureFileShareBackupRequest",
        uberParent: "BackupRequest",
        polymorphicDiscriminator: BackupRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BackupRequest.type.modelProperties), { recoveryPointExpiryTimeInUTC: {
                serializedName: "recoveryPointExpiryTimeInUTC",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AzureWorkloadBackupRequest = {
    serializedName: "AzureWorkloadBackupRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadBackupRequest",
        uberParent: "BackupRequest",
        polymorphicDiscriminator: BackupRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BackupRequest.type.modelProperties), { backupType: {
                serializedName: "backupType",
                type: {
                    name: "String"
                }
            }, enableCompression: {
                serializedName: "enableCompression",
                type: {
                    name: "Boolean"
                }
            }, recoveryPointExpiryTimeInUTC: {
                serializedName: "recoveryPointExpiryTimeInUTC",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const IaasVMBackupRequest = {
    serializedName: "IaasVMBackupRequest",
    type: {
        name: "Composite",
        className: "IaasVMBackupRequest",
        uberParent: "BackupRequest",
        polymorphicDiscriminator: BackupRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, BackupRequest.type.modelProperties), { recoveryPointExpiryTimeInUTC: {
                serializedName: "recoveryPointExpiryTimeInUTC",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AzureFileShareProvisionILRRequest = {
    serializedName: "AzureFileShareProvisionILRRequest",
    type: {
        name: "Composite",
        className: "AzureFileShareProvisionILRRequest",
        uberParent: "ILRRequest",
        polymorphicDiscriminator: ILRRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ILRRequest.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String"
                }
            }, sourceResourceId: {
                serializedName: "sourceResourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
const IaasVmilrRegistrationRequest = {
    serializedName: "IaasVMILRRegistrationRequest",
    type: {
        name: "Composite",
        className: "IaasVmilrRegistrationRequest",
        uberParent: "ILRRequest",
        polymorphicDiscriminator: ILRRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ILRRequest.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String"
                }
            }, virtualMachineId: {
                serializedName: "virtualMachineId",
                type: {
                    name: "String"
                }
            }, initiatorName: {
                serializedName: "initiatorName",
                type: {
                    name: "String"
                }
            }, renewExistingRegistration: {
                serializedName: "renewExistingRegistration",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AzureFileShareProtectableItem = {
    serializedName: "AzureFileShare",
    type: {
        name: "Composite",
        className: "AzureFileShareProtectableItem",
        uberParent: "WorkloadProtectableItem",
        polymorphicDiscriminator: WorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, WorkloadProtectableItem.type.modelProperties), { parentContainerFabricId: {
                serializedName: "parentContainerFabricId",
                type: {
                    name: "String"
                }
            }, parentContainerFriendlyName: {
                serializedName: "parentContainerFriendlyName",
                type: {
                    name: "String"
                }
            }, azureFileShareType: {
                serializedName: "azureFileShareType",
                type: {
                    name: "String"
                }
            } })
    }
};
const IaaSVMProtectableItem = {
    serializedName: "IaaSVMProtectableItem",
    type: {
        name: "Composite",
        className: "IaaSVMProtectableItem",
        uberParent: "WorkloadProtectableItem",
        polymorphicDiscriminator: {
            serializedName: "protectableItemType",
            clientName: "protectableItemType"
        },
        modelProperties: Object.assign(Object.assign({}, WorkloadProtectableItem.type.modelProperties), { virtualMachineId: {
                serializedName: "virtualMachineId",
                type: {
                    name: "String"
                }
            }, virtualMachineVersion: {
                serializedName: "virtualMachineVersion",
                type: {
                    name: "String"
                }
            }, resourceGroup: {
                serializedName: "resourceGroup",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureVmWorkloadProtectableItem = {
    serializedName: "AzureVmWorkloadProtectableItem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadProtectableItem",
        uberParent: "WorkloadProtectableItem",
        polymorphicDiscriminator: {
            serializedName: "protectableItemType",
            clientName: "protectableItemType"
        },
        modelProperties: Object.assign(Object.assign({}, WorkloadProtectableItem.type.modelProperties), { parentName: {
                serializedName: "parentName",
                type: {
                    name: "String"
                }
            }, parentUniqueName: {
                serializedName: "parentUniqueName",
                type: {
                    name: "String"
                }
            }, serverName: {
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            }, isAutoProtectable: {
                serializedName: "isAutoProtectable",
                type: {
                    name: "Boolean"
                }
            }, isAutoProtected: {
                serializedName: "isAutoProtected",
                type: {
                    name: "Boolean"
                }
            }, subinquireditemcount: {
                serializedName: "subinquireditemcount",
                type: {
                    name: "Number"
                }
            }, subprotectableitemcount: {
                serializedName: "subprotectableitemcount",
                type: {
                    name: "Number"
                }
            }, prebackupvalidation: {
                serializedName: "prebackupvalidation",
                type: {
                    name: "Composite",
                    className: "PreBackupValidation"
                }
            }, isProtectable: {
                serializedName: "isProtectable",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const AzureIaaSVMHealthDetails = {
    type: {
        name: "Composite",
        className: "AzureIaaSVMHealthDetails",
        modelProperties: Object.assign({}, ResourceHealthDetails.type.modelProperties)
    }
};
const LogSchedulePolicy = {
    serializedName: "LogSchedulePolicy",
    type: {
        name: "Composite",
        className: "LogSchedulePolicy",
        uberParent: "SchedulePolicy",
        polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SchedulePolicy.type.modelProperties), { scheduleFrequencyInMins: {
                serializedName: "scheduleFrequencyInMins",
                type: {
                    name: "Number"
                }
            } })
    }
};
const LongTermSchedulePolicy = {
    serializedName: "LongTermSchedulePolicy",
    type: {
        name: "Composite",
        className: "LongTermSchedulePolicy",
        uberParent: "SchedulePolicy",
        polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, SchedulePolicy.type.modelProperties)
    }
};
const SimpleSchedulePolicy = {
    serializedName: "SimpleSchedulePolicy",
    type: {
        name: "Composite",
        className: "SimpleSchedulePolicy",
        uberParent: "SchedulePolicy",
        polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SchedulePolicy.type.modelProperties), { scheduleRunFrequency: {
                serializedName: "scheduleRunFrequency",
                type: {
                    name: "String"
                }
            }, scheduleRunDays: {
                serializedName: "scheduleRunDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday"
                            ]
                        }
                    }
                }
            }, scheduleRunTimes: {
                serializedName: "scheduleRunTimes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "DateTime"
                        }
                    }
                }
            }, hourlySchedule: {
                serializedName: "hourlySchedule",
                type: {
                    name: "Composite",
                    className: "HourlySchedule"
                }
            }, scheduleWeeklyFrequency: {
                serializedName: "scheduleWeeklyFrequency",
                type: {
                    name: "Number"
                }
            } })
    }
};
const SimpleSchedulePolicyV2 = {
    serializedName: "SimpleSchedulePolicyV2",
    type: {
        name: "Composite",
        className: "SimpleSchedulePolicyV2",
        uberParent: "SchedulePolicy",
        polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SchedulePolicy.type.modelProperties), { scheduleRunFrequency: {
                serializedName: "scheduleRunFrequency",
                type: {
                    name: "String"
                }
            }, hourlySchedule: {
                serializedName: "hourlySchedule",
                type: {
                    name: "Composite",
                    className: "HourlySchedule"
                }
            }, dailySchedule: {
                serializedName: "dailySchedule",
                type: {
                    name: "Composite",
                    className: "DailySchedule"
                }
            }, weeklySchedule: {
                serializedName: "weeklySchedule",
                type: {
                    name: "Composite",
                    className: "WeeklySchedule"
                }
            } })
    }
};
const LongTermRetentionPolicy = {
    serializedName: "LongTermRetentionPolicy",
    type: {
        name: "Composite",
        className: "LongTermRetentionPolicy",
        uberParent: "RetentionPolicy",
        polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RetentionPolicy.type.modelProperties), { dailySchedule: {
                serializedName: "dailySchedule",
                type: {
                    name: "Composite",
                    className: "DailyRetentionSchedule"
                }
            }, weeklySchedule: {
                serializedName: "weeklySchedule",
                type: {
                    name: "Composite",
                    className: "WeeklyRetentionSchedule"
                }
            }, monthlySchedule: {
                serializedName: "monthlySchedule",
                type: {
                    name: "Composite",
                    className: "MonthlyRetentionSchedule"
                }
            }, yearlySchedule: {
                serializedName: "yearlySchedule",
                type: {
                    name: "Composite",
                    className: "YearlyRetentionSchedule"
                }
            } })
    }
};
const SimpleRetentionPolicy = {
    serializedName: "SimpleRetentionPolicy",
    type: {
        name: "Composite",
        className: "SimpleRetentionPolicy",
        uberParent: "RetentionPolicy",
        polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RetentionPolicy.type.modelProperties), { retentionDuration: {
                serializedName: "retentionDuration",
                type: {
                    name: "Composite",
                    className: "RetentionDuration"
                }
            } })
    }
};
const RecoveryPointTierInformationV2 = {
    type: {
        name: "Composite",
        className: "RecoveryPointTierInformationV2",
        modelProperties: Object.assign({}, RecoveryPointTierInformation.type.modelProperties)
    }
};
const AzureWorkloadAutoProtectionIntent = {
    serializedName: "AzureWorkloadAutoProtectionIntent",
    type: {
        name: "Composite",
        className: "AzureWorkloadAutoProtectionIntent",
        uberParent: "AzureRecoveryServiceVaultProtectionIntent",
        polymorphicDiscriminator: {
            serializedName: "protectionIntentItemType",
            clientName: "protectionIntentItemType"
        },
        modelProperties: Object.assign({}, AzureRecoveryServiceVaultProtectionIntent.type.modelProperties)
    }
};
const AzureIaaSClassicComputeVMProtectedItem = {
    serializedName: "Microsoft.ClassicCompute/virtualMachines",
    type: {
        name: "Composite",
        className: "AzureIaaSClassicComputeVMProtectedItem",
        uberParent: "AzureIaaSVMProtectedItem",
        polymorphicDiscriminator: AzureIaaSVMProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureIaaSVMProtectedItem.type.modelProperties)
    }
};
const AzureIaaSComputeVMProtectedItem = {
    serializedName: "Microsoft.Compute/virtualMachines",
    type: {
        name: "Composite",
        className: "AzureIaaSComputeVMProtectedItem",
        uberParent: "AzureIaaSVMProtectedItem",
        polymorphicDiscriminator: AzureIaaSVMProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureIaaSVMProtectedItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPAseDatabaseProtectedItem = {
    serializedName: "AzureVmWorkloadSAPAseDatabase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPAseDatabaseProtectedItem",
        uberParent: "AzureVmWorkloadProtectedItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectedItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaDatabaseProtectedItem = {
    serializedName: "AzureVmWorkloadSAPHanaDatabase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaDatabaseProtectedItem",
        uberParent: "AzureVmWorkloadProtectedItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectedItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaDBInstanceProtectedItem = {
    serializedName: "AzureVmWorkloadSAPHanaDBInstance",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaDBInstanceProtectedItem",
        uberParent: "AzureVmWorkloadProtectedItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectedItem.type.modelProperties)
    }
};
const AzureVmWorkloadSQLDatabaseProtectedItem = {
    serializedName: "AzureVmWorkloadSQLDatabase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSQLDatabaseProtectedItem",
        uberParent: "AzureVmWorkloadProtectedItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectedItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectedItem.type.modelProperties)
    }
};
const AzureWorkloadPointInTimeRecoveryPoint = {
    serializedName: "AzureWorkloadPointInTimeRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureWorkloadPointInTimeRecoveryPoint",
        uberParent: "AzureWorkloadRecoveryPoint",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadRecoveryPoint.type.modelProperties), { timeRanges: {
                serializedName: "timeRanges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PointInTimeRange"
                        }
                    }
                }
            } })
    }
};
const AzureWorkloadSAPHanaRecoveryPoint = {
    serializedName: "AzureWorkloadSAPHanaRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureWorkloadSAPHanaRecoveryPoint",
        uberParent: "AzureWorkloadRecoveryPoint",
        polymorphicDiscriminator: AzureWorkloadRecoveryPoint.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureWorkloadRecoveryPoint.type.modelProperties)
    }
};
const AzureWorkloadSQLRecoveryPoint = {
    serializedName: "AzureWorkloadSQLRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLRecoveryPoint",
        uberParent: "AzureWorkloadRecoveryPoint",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadRecoveryPoint.type.modelProperties), { extendedInfo: {
                serializedName: "extendedInfo",
                type: {
                    name: "Composite",
                    className: "AzureWorkloadSQLRecoveryPointExtendedInfo"
                }
            } })
    }
};
const AzureWorkloadPointInTimeRestoreRequest = {
    serializedName: "AzureWorkloadPointInTimeRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadPointInTimeRestoreRequest",
        uberParent: "AzureWorkloadRestoreRequest",
        polymorphicDiscriminator: AzureWorkloadRestoreRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadRestoreRequest.type.modelProperties), { pointInTime: {
                serializedName: "pointInTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AzureWorkloadSAPHanaRestoreRequest = {
    serializedName: "AzureWorkloadSAPHanaRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSAPHanaRestoreRequest",
        uberParent: "AzureWorkloadRestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign({}, AzureWorkloadRestoreRequest.type.modelProperties)
    }
};
const AzureWorkloadSQLRestoreRequest = {
    serializedName: "AzureWorkloadSQLRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLRestoreRequest",
        uberParent: "AzureWorkloadRestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadRestoreRequest.type.modelProperties), { shouldUseAlternateTargetLocation: {
                serializedName: "shouldUseAlternateTargetLocation",
                type: {
                    name: "Boolean"
                }
            }, isNonRecoverable: {
                serializedName: "isNonRecoverable",
                type: {
                    name: "Boolean"
                }
            }, alternateDirectoryPaths: {
                serializedName: "alternateDirectoryPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SQLDataDirectoryMapping"
                        }
                    }
                }
            } })
    }
};
const IaasVMRestoreWithRehydrationRequest = {
    serializedName: "IaasVMRestoreWithRehydrationRequest",
    type: {
        name: "Composite",
        className: "IaasVMRestoreWithRehydrationRequest",
        uberParent: "IaasVMRestoreRequest",
        polymorphicDiscriminator: IaasVMRestoreRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, IaasVMRestoreRequest.type.modelProperties), { recoveryPointRehydrationInfo: {
                serializedName: "recoveryPointRehydrationInfo",
                type: {
                    name: "Composite",
                    className: "RecoveryPointRehydrationInfo"
                }
            } })
    }
};
const ValidateIaasVMRestoreOperationRequest = {
    serializedName: "ValidateIaasVMRestoreOperationRequest",
    type: {
        name: "Composite",
        className: "ValidateIaasVMRestoreOperationRequest",
        uberParent: "ValidateRestoreOperationRequest",
        polymorphicDiscriminator: ValidateRestoreOperationRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ValidateRestoreOperationRequest.type.modelProperties)
    }
};
const AzureBackupServerContainer = {
    serializedName: "AzureBackupServerContainer",
    type: {
        name: "Composite",
        className: "AzureBackupServerContainer",
        uberParent: "DpmContainer",
        polymorphicDiscriminator: DpmContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, DpmContainer.type.modelProperties)
    }
};
const AzureIaaSClassicComputeVMContainer = {
    serializedName: "Microsoft.ClassicCompute/virtualMachines",
    type: {
        name: "Composite",
        className: "AzureIaaSClassicComputeVMContainer",
        uberParent: "IaaSVMContainer",
        polymorphicDiscriminator: IaaSVMContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, IaaSVMContainer.type.modelProperties)
    }
};
const AzureIaaSComputeVMContainer = {
    serializedName: "Microsoft.Compute/virtualMachines",
    type: {
        name: "Composite",
        className: "AzureIaaSComputeVMContainer",
        uberParent: "IaaSVMContainer",
        polymorphicDiscriminator: IaaSVMContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, IaaSVMContainer.type.modelProperties)
    }
};
const AzureSqlagWorkloadContainerProtectionContainer = {
    serializedName: "SQLAGWorkLoadContainer",
    type: {
        name: "Composite",
        className: "AzureSqlagWorkloadContainerProtectionContainer",
        uberParent: "AzureWorkloadContainer",
        polymorphicDiscriminator: AzureWorkloadContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureWorkloadContainer.type.modelProperties)
    }
};
const AzureVMAppContainerProtectionContainer = {
    serializedName: "VMAppContainer",
    type: {
        name: "Composite",
        className: "AzureVMAppContainerProtectionContainer",
        uberParent: "AzureWorkloadContainer",
        polymorphicDiscriminator: AzureWorkloadContainer.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureWorkloadContainer.type.modelProperties)
    }
};
const AzureVmWorkloadSAPAseDatabaseWorkloadItem = {
    serializedName: "SAPAseDatabase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPAseDatabaseWorkloadItem",
        uberParent: "AzureVmWorkloadItem",
        polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPAseSystemWorkloadItem = {
    serializedName: "SAPAseSystem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPAseSystemWorkloadItem",
        uberParent: "AzureVmWorkloadItem",
        polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaDatabaseWorkloadItem = {
    serializedName: "SAPHanaDatabase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaDatabaseWorkloadItem",
        uberParent: "AzureVmWorkloadItem",
        polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaSystemWorkloadItem = {
    serializedName: "SAPHanaSystem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaSystemWorkloadItem",
        uberParent: "AzureVmWorkloadItem",
        polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadItem.type.modelProperties)
    }
};
const AzureVmWorkloadSQLDatabaseWorkloadItem = {
    serializedName: "SQLDataBase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSQLDatabaseWorkloadItem",
        uberParent: "AzureVmWorkloadItem",
        polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadItem.type.modelProperties)
    }
};
const AzureVmWorkloadSQLInstanceWorkloadItem = {
    serializedName: "SQLInstance",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSQLInstanceWorkloadItem",
        uberParent: "AzureVmWorkloadItem",
        polymorphicDiscriminator: AzureVmWorkloadItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureVmWorkloadItem.type.modelProperties), { dataDirectoryPaths: {
                serializedName: "dataDirectoryPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SQLDataDirectory"
                        }
                    }
                }
            } })
    }
};
const AzureIaaSClassicComputeVMProtectableItem = {
    serializedName: "Microsoft.ClassicCompute/virtualMachines",
    type: {
        name: "Composite",
        className: "AzureIaaSClassicComputeVMProtectableItem",
        uberParent: "IaaSVMProtectableItem",
        polymorphicDiscriminator: IaaSVMProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, IaaSVMProtectableItem.type.modelProperties)
    }
};
const AzureIaaSComputeVMProtectableItem = {
    serializedName: "Microsoft.Compute/virtualMachines",
    type: {
        name: "Composite",
        className: "AzureIaaSComputeVMProtectableItem",
        uberParent: "IaaSVMProtectableItem",
        polymorphicDiscriminator: IaaSVMProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, IaaSVMProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPAseSystemProtectableItem = {
    serializedName: "SAPAseSystem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPAseSystemProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaDatabaseProtectableItem = {
    serializedName: "SAPHanaDatabase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaDatabaseProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaSystemProtectableItem = {
    serializedName: "SAPHanaSystem",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaSystemProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaDBInstance = {
    serializedName: "SAPHanaDBInstance",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaDBInstance",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSAPHanaHSRProtectableItem = {
    serializedName: "HanaHSRContainer",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSAPHanaHSRProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSQLAvailabilityGroupProtectableItem = {
    serializedName: "SQLAvailabilityGroupContainer",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSQLAvailabilityGroupProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties), { nodesList: {
                serializedName: "nodesList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DistributedNodesInfo"
                        }
                    }
                }
            } })
    }
};
const AzureVmWorkloadSQLDatabaseProtectableItem = {
    serializedName: "SQLDataBase",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSQLDatabaseProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureVmWorkloadSQLInstanceProtectableItem = {
    serializedName: "SQLInstance",
    type: {
        name: "Composite",
        className: "AzureVmWorkloadSQLInstanceProtectableItem",
        uberParent: "AzureVmWorkloadProtectableItem",
        polymorphicDiscriminator: AzureVmWorkloadProtectableItem.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureVmWorkloadProtectableItem.type.modelProperties)
    }
};
const AzureWorkloadSQLAutoProtectionIntent = {
    serializedName: "AzureWorkloadSQLAutoProtectionIntent",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLAutoProtectionIntent",
        uberParent: "AzureWorkloadAutoProtectionIntent",
        polymorphicDiscriminator: AzureWorkloadAutoProtectionIntent.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadAutoProtectionIntent.type.modelProperties), { workloadItemType: {
                serializedName: "workloadItemType",
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureWorkloadSAPHanaPointInTimeRecoveryPoint = {
    serializedName: "AzureWorkloadSAPHanaPointInTimeRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureWorkloadSAPHanaPointInTimeRecoveryPoint",
        uberParent: "AzureWorkloadPointInTimeRecoveryPoint",
        polymorphicDiscriminator: AzureWorkloadPointInTimeRecoveryPoint.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, AzureWorkloadPointInTimeRecoveryPoint.type.modelProperties)
    }
};
const AzureWorkloadSQLPointInTimeRecoveryPoint = {
    serializedName: "AzureWorkloadSQLPointInTimeRecoveryPoint",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLPointInTimeRecoveryPoint",
        uberParent: "AzureWorkloadSQLRecoveryPoint",
        polymorphicDiscriminator: AzureWorkloadSQLRecoveryPoint.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSQLRecoveryPoint.type.modelProperties), { timeRanges: {
                serializedName: "timeRanges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PointInTimeRange"
                        }
                    }
                }
            } })
    }
};
const AzureWorkloadSAPHanaPointInTimeRestoreRequest = {
    serializedName: "AzureWorkloadSAPHanaPointInTimeRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSAPHanaPointInTimeRestoreRequest",
        uberParent: "AzureWorkloadSAPHanaRestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSAPHanaRestoreRequest.type.modelProperties), { pointInTime: {
                serializedName: "pointInTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AzureWorkloadSAPHanaRestoreWithRehydrateRequest = {
    serializedName: "AzureWorkloadSAPHanaRestoreWithRehydrateRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSAPHanaRestoreWithRehydrateRequest",
        uberParent: "AzureWorkloadSAPHanaRestoreRequest",
        polymorphicDiscriminator: AzureWorkloadSAPHanaRestoreRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSAPHanaRestoreRequest.type.modelProperties), { recoveryPointRehydrationInfo: {
                serializedName: "recoveryPointRehydrationInfo",
                type: {
                    name: "Composite",
                    className: "RecoveryPointRehydrationInfo"
                }
            } })
    }
};
const AzureWorkloadSQLPointInTimeRestoreRequest = {
    serializedName: "AzureWorkloadSQLPointInTimeRestoreRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLPointInTimeRestoreRequest",
        uberParent: "AzureWorkloadSQLRestoreRequest",
        polymorphicDiscriminator: {
            serializedName: "objectType",
            clientName: "objectType"
        },
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSQLRestoreRequest.type.modelProperties), { pointInTime: {
                serializedName: "pointInTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AzureWorkloadSQLRestoreWithRehydrateRequest = {
    serializedName: "AzureWorkloadSQLRestoreWithRehydrateRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLRestoreWithRehydrateRequest",
        uberParent: "AzureWorkloadSQLRestoreRequest",
        polymorphicDiscriminator: AzureWorkloadSQLRestoreRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSQLRestoreRequest.type.modelProperties), { recoveryPointRehydrationInfo: {
                serializedName: "recoveryPointRehydrationInfo",
                type: {
                    name: "Composite",
                    className: "RecoveryPointRehydrationInfo"
                }
            } })
    }
};
const AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest = {
    serializedName: "AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest",
        uberParent: "AzureWorkloadSAPHanaPointInTimeRestoreRequest",
        polymorphicDiscriminator: AzureWorkloadSAPHanaPointInTimeRestoreRequest.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSAPHanaPointInTimeRestoreRequest.type.modelProperties), { recoveryPointRehydrationInfo: {
                serializedName: "recoveryPointRehydrationInfo",
                type: {
                    name: "Composite",
                    className: "RecoveryPointRehydrationInfo"
                }
            } })
    }
};
const AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest = {
    serializedName: "AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest",
    type: {
        name: "Composite",
        className: "AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest",
        uberParent: "AzureWorkloadSQLPointInTimeRestoreRequest",
        polymorphicDiscriminator: AzureWorkloadSQLPointInTimeRestoreRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AzureWorkloadSQLPointInTimeRestoreRequest.type.modelProperties), { recoveryPointRehydrationInfo: {
                serializedName: "recoveryPointRehydrationInfo",
                type: {
                    name: "Composite",
                    className: "RecoveryPointRehydrationInfo"
                }
            } })
    }
};
let discriminators = {
    FeatureSupportRequest: FeatureSupportRequest,
    ProtectionIntent: ProtectionIntent,
    OperationStatusExtendedInfo: OperationStatusExtendedInfo,
    VaultStorageConfigOperationResultResponse: VaultStorageConfigOperationResultResponse,
    ProtectedItem: ProtectedItem,
    RecoveryPoint: RecoveryPoint,
    RestoreRequest: RestoreRequest,
    ProtectionPolicy: ProtectionPolicy,
    Job: Job,
    OperationResultInfoBase: OperationResultInfoBase,
    ValidateOperationRequest: ValidateOperationRequest,
    BackupEngineBase: BackupEngineBase,
    ProtectableContainer: ProtectableContainer,
    ProtectionContainer: ProtectionContainer,
    WorkloadItem: WorkloadItem,
    BackupRequest: BackupRequest,
    ILRRequest: ILRRequest,
    WorkloadProtectableItem: WorkloadProtectableItem,
    SchedulePolicy: SchedulePolicy,
    RetentionPolicy: RetentionPolicy,
    "FeatureSupportRequest.AzureBackupGoals": AzureBackupGoalFeatureSupportRequest,
    "FeatureSupportRequest.AzureVMResourceBackup": AzureVMResourceFeatureSupportRequest,
    "ProtectionIntent.RecoveryServiceVaultItem": AzureRecoveryServiceVaultProtectionIntent,
    "ProtectionIntent.AzureResourceItem": AzureResourceProtectionIntent,
    "ProtectionIntent.AzureWorkloadContainerAutoProtectionIntent": AzureWorkloadContainerAutoProtectionIntent,
    "OperationStatusExtendedInfo.OperationStatusJobExtendedInfo": OperationStatusJobExtendedInfo,
    "OperationStatusExtendedInfo.OperationStatusJobsExtendedInfo": OperationStatusJobsExtendedInfo,
    "OperationStatusExtendedInfo.OperationStatusProvisionILRExtendedInfo": OperationStatusProvisionILRExtendedInfo,
    "OperationStatusExtendedInfo.OperationStatusValidateOperationExtendedInfo": OperationStatusValidateOperationExtendedInfo,
    "VaultStorageConfigOperationResultResponse.PrepareDataMoveResponse": PrepareDataMoveResponse,
    "ProtectedItem.AzureFileShareProtectedItem": AzureFileshareProtectedItem,
    "ProtectedItem.AzureIaaSVMProtectedItem": AzureIaaSVMProtectedItem,
    "ProtectedItem.Microsoft.Sql/servers/databases": AzureSqlProtectedItem,
    "ProtectedItem.AzureVmWorkloadProtectedItem": AzureVmWorkloadProtectedItem,
    "ProtectedItem.DPMProtectedItem": DPMProtectedItem,
    "ProtectedItem.GenericProtectedItem": GenericProtectedItem,
    "ProtectedItem.MabFileFolderProtectedItem": MabFileFolderProtectedItem,
    "RecoveryPoint.AzureFileShareRecoveryPoint": AzureFileShareRecoveryPoint,
    "RecoveryPoint.AzureWorkloadRecoveryPoint": AzureWorkloadRecoveryPoint,
    "RecoveryPoint.GenericRecoveryPoint": GenericRecoveryPoint,
    "RecoveryPoint.IaasVMRecoveryPoint": IaasVMRecoveryPoint,
    "RestoreRequest.AzureFileShareRestoreRequest": AzureFileShareRestoreRequest,
    "RestoreRequest.AzureWorkloadRestoreRequest": AzureWorkloadRestoreRequest,
    "RestoreRequest.IaasVMRestoreRequest": IaasVMRestoreRequest,
    "ProtectionPolicy.AzureWorkload": AzureVmWorkloadProtectionPolicy,
    "ProtectionPolicy.AzureStorage": AzureFileShareProtectionPolicy,
    "ProtectionPolicy.AzureIaasVM": AzureIaaSVMProtectionPolicy,
    "ProtectionPolicy.AzureSql": AzureSqlProtectionPolicy,
    "ProtectionPolicy.GenericProtectionPolicy": GenericProtectionPolicy,
    "ProtectionPolicy.MAB": MabProtectionPolicy,
    "Job.AzureIaaSVMJob": AzureIaaSVMJob,
    "Job.AzureIaaSVMJobV2": AzureIaaSVMJobV2,
    "Job.AzureStorageJob": AzureStorageJob,
    "Job.AzureWorkloadJob": AzureWorkloadJob,
    "Job.DpmJob": DpmJob,
    "Job.MabJob": MabJob,
    "Job.VaultJob": VaultJob,
    "OperationResultInfoBase.ExportJobsOperationResultInfo": ExportJobsOperationResultInfo,
    "OperationResultInfoBase.OperationResultInfo": OperationResultInfo,
    "ValidateOperationRequest.ValidateRestoreOperationRequest": ValidateRestoreOperationRequest,
    "BackupEngineBase.AzureBackupServerEngine": AzureBackupServerEngine,
    "BackupEngineBase.DpmBackupEngine": DpmBackupEngine,
    "ProtectableContainer.StorageContainer": AzureStorageProtectableContainer,
    "ProtectableContainer.VMAppContainer": AzureVMAppContainerProtectableContainer,
    "ProtectionContainer.DPMContainer": DpmContainer,
    "ProtectionContainer.IaasVMContainer": IaaSVMContainer,
    "ProtectionContainer.AzureWorkloadContainer": AzureWorkloadContainer,
    "ProtectionContainer.AzureSqlContainer": AzureSqlContainer,
    "ProtectionContainer.StorageContainer": AzureStorageContainer,
    "ProtectionContainer.GenericContainer": GenericContainer,
    "ProtectionContainer.Windows": MabContainer,
    "WorkloadItem.AzureVmWorkloadItem": AzureVmWorkloadItem,
    "BackupRequest.AzureFileShareBackupRequest": AzureFileShareBackupRequest,
    "BackupRequest.AzureWorkloadBackupRequest": AzureWorkloadBackupRequest,
    "BackupRequest.IaasVMBackupRequest": IaasVMBackupRequest,
    "ILRRequest.AzureFileShareProvisionILRRequest": AzureFileShareProvisionILRRequest,
    "ILRRequest.IaasVMILRRegistrationRequest": IaasVmilrRegistrationRequest,
    "WorkloadProtectableItem.AzureFileShare": AzureFileShareProtectableItem,
    "WorkloadProtectableItem.IaaSVMProtectableItem": IaaSVMProtectableItem,
    "WorkloadProtectableItem.AzureVmWorkloadProtectableItem": AzureVmWorkloadProtectableItem,
    "SchedulePolicy.LogSchedulePolicy": LogSchedulePolicy,
    "SchedulePolicy.LongTermSchedulePolicy": LongTermSchedulePolicy,
    "SchedulePolicy.SimpleSchedulePolicy": SimpleSchedulePolicy,
    "SchedulePolicy.SimpleSchedulePolicyV2": SimpleSchedulePolicyV2,
    "RetentionPolicy.LongTermRetentionPolicy": LongTermRetentionPolicy,
    "RetentionPolicy.SimpleRetentionPolicy": SimpleRetentionPolicy,
    "AzureRecoveryServiceVaultProtectionIntent.AzureWorkloadAutoProtectionIntent": AzureWorkloadAutoProtectionIntent,
    "AzureIaaSVMProtectedItem.Microsoft.ClassicCompute/virtualMachines": AzureIaaSClassicComputeVMProtectedItem,
    "AzureIaaSVMProtectedItem.Microsoft.Compute/virtualMachines": AzureIaaSComputeVMProtectedItem,
    "AzureVmWorkloadProtectedItem.AzureVmWorkloadSAPAseDatabase": AzureVmWorkloadSAPAseDatabaseProtectedItem,
    "AzureVmWorkloadProtectedItem.AzureVmWorkloadSAPHanaDatabase": AzureVmWorkloadSAPHanaDatabaseProtectedItem,
    "AzureVmWorkloadProtectedItem.AzureVmWorkloadSAPHanaDBInstance": AzureVmWorkloadSAPHanaDBInstanceProtectedItem,
    "AzureVmWorkloadProtectedItem.AzureVmWorkloadSQLDatabase": AzureVmWorkloadSQLDatabaseProtectedItem,
    "AzureWorkloadRecoveryPoint.AzureWorkloadPointInTimeRecoveryPoint": AzureWorkloadPointInTimeRecoveryPoint,
    "AzureWorkloadRecoveryPoint.AzureWorkloadSAPHanaRecoveryPoint": AzureWorkloadSAPHanaRecoveryPoint,
    "AzureWorkloadRecoveryPoint.AzureWorkloadSQLRecoveryPoint": AzureWorkloadSQLRecoveryPoint,
    "AzureWorkloadRestoreRequest.AzureWorkloadPointInTimeRestoreRequest": AzureWorkloadPointInTimeRestoreRequest,
    "AzureWorkloadRestoreRequest.AzureWorkloadSAPHanaRestoreRequest": AzureWorkloadSAPHanaRestoreRequest,
    "AzureWorkloadRestoreRequest.AzureWorkloadSQLRestoreRequest": AzureWorkloadSQLRestoreRequest,
    "IaasVMRestoreRequest.IaasVMRestoreWithRehydrationRequest": IaasVMRestoreWithRehydrationRequest,
    "ValidateRestoreOperationRequest.ValidateIaasVMRestoreOperationRequest": ValidateIaasVMRestoreOperationRequest,
    "DpmContainer.AzureBackupServerContainer": AzureBackupServerContainer,
    "IaaSVMContainer.Microsoft.ClassicCompute/virtualMachines": AzureIaaSClassicComputeVMContainer,
    "IaaSVMContainer.Microsoft.Compute/virtualMachines": AzureIaaSComputeVMContainer,
    "AzureWorkloadContainer.SQLAGWorkLoadContainer": AzureSqlagWorkloadContainerProtectionContainer,
    "AzureWorkloadContainer.VMAppContainer": AzureVMAppContainerProtectionContainer,
    "AzureVmWorkloadItem.SAPAseDatabase": AzureVmWorkloadSAPAseDatabaseWorkloadItem,
    "AzureVmWorkloadItem.SAPAseSystem": AzureVmWorkloadSAPAseSystemWorkloadItem,
    "AzureVmWorkloadItem.SAPHanaDatabase": AzureVmWorkloadSAPHanaDatabaseWorkloadItem,
    "AzureVmWorkloadItem.SAPHanaSystem": AzureVmWorkloadSAPHanaSystemWorkloadItem,
    "AzureVmWorkloadItem.SQLDataBase": AzureVmWorkloadSQLDatabaseWorkloadItem,
    "AzureVmWorkloadItem.SQLInstance": AzureVmWorkloadSQLInstanceWorkloadItem,
    "IaaSVMProtectableItem.Microsoft.ClassicCompute/virtualMachines": AzureIaaSClassicComputeVMProtectableItem,
    "IaaSVMProtectableItem.Microsoft.Compute/virtualMachines": AzureIaaSComputeVMProtectableItem,
    "AzureVmWorkloadProtectableItem.SAPAseSystem": AzureVmWorkloadSAPAseSystemProtectableItem,
    "AzureVmWorkloadProtectableItem.SAPHanaDatabase": AzureVmWorkloadSAPHanaDatabaseProtectableItem,
    "AzureVmWorkloadProtectableItem.SAPHanaSystem": AzureVmWorkloadSAPHanaSystemProtectableItem,
    "AzureVmWorkloadProtectableItem.SAPHanaDBInstance": AzureVmWorkloadSAPHanaDBInstance,
    "AzureVmWorkloadProtectableItem.HanaHSRContainer": AzureVmWorkloadSAPHanaHSRProtectableItem,
    "AzureVmWorkloadProtectableItem.SQLAvailabilityGroupContainer": AzureVmWorkloadSQLAvailabilityGroupProtectableItem,
    "AzureVmWorkloadProtectableItem.SQLDataBase": AzureVmWorkloadSQLDatabaseProtectableItem,
    "AzureVmWorkloadProtectableItem.SQLInstance": AzureVmWorkloadSQLInstanceProtectableItem,
    "AzureWorkloadAutoProtectionIntent.AzureWorkloadSQLAutoProtectionIntent": AzureWorkloadSQLAutoProtectionIntent,
    "AzureWorkloadPointInTimeRecoveryPoint.AzureWorkloadSAPHanaPointInTimeRecoveryPoint": AzureWorkloadSAPHanaPointInTimeRecoveryPoint,
    "AzureWorkloadSQLRecoveryPoint.AzureWorkloadSQLPointInTimeRecoveryPoint": AzureWorkloadSQLPointInTimeRecoveryPoint,
    "AzureWorkloadSAPHanaRestoreRequest.AzureWorkloadSAPHanaPointInTimeRestoreRequest": AzureWorkloadSAPHanaPointInTimeRestoreRequest,
    "AzureWorkloadSAPHanaRestoreRequest.AzureWorkloadSAPHanaRestoreWithRehydrateRequest": AzureWorkloadSAPHanaRestoreWithRehydrateRequest,
    "AzureWorkloadSQLRestoreRequest.AzureWorkloadSQLPointInTimeRestoreRequest": AzureWorkloadSQLPointInTimeRestoreRequest,
    "AzureWorkloadSQLRestoreRequest.AzureWorkloadSQLRestoreWithRehydrateRequest": AzureWorkloadSQLRestoreWithRehydrateRequest,
    "AzureWorkloadSAPHanaPointInTimeRestoreRequest.AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest": AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest,
    "AzureWorkloadSQLPointInTimeRestoreRequest.AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest": AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BackupResourceConfig: BackupResourceConfig,
    Resource: Resource,
    NewErrorResponse: NewErrorResponse,
    NewErrorResponseError: NewErrorResponseError,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    PreValidateEnableBackupRequest: PreValidateEnableBackupRequest,
    PreValidateEnableBackupResponse: PreValidateEnableBackupResponse,
    BackupStatusRequest: BackupStatusRequest,
    BackupStatusResponse: BackupStatusResponse,
    FeatureSupportRequest: FeatureSupportRequest,
    AzureVMResourceFeatureSupportResponse: AzureVMResourceFeatureSupportResponse,
    ProtectionIntent: ProtectionIntent,
    ResourceList: ResourceList,
    BackupManagementUsageList: BackupManagementUsageList,
    BackupManagementUsage: BackupManagementUsage,
    NameInfo: NameInfo,
    ClientDiscoveryResponse: ClientDiscoveryResponse,
    ClientDiscoveryValueForSingleApi: ClientDiscoveryValueForSingleApi,
    ClientDiscoveryDisplay: ClientDiscoveryDisplay,
    ClientDiscoveryForProperties: ClientDiscoveryForProperties,
    ClientDiscoveryForServiceSpecification: ClientDiscoveryForServiceSpecification,
    ClientDiscoveryForLogSpecification: ClientDiscoveryForLogSpecification,
    BackupResourceVaultConfig: BackupResourceVaultConfig,
    BackupResourceEncryptionConfig: BackupResourceEncryptionConfig,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    OperationStatus: OperationStatus,
    OperationStatusError: OperationStatusError,
    OperationStatusExtendedInfo: OperationStatusExtendedInfo,
    PrepareDataMoveRequest: PrepareDataMoveRequest,
    VaultStorageConfigOperationResultResponse: VaultStorageConfigOperationResultResponse,
    TriggerDataMoveRequest: TriggerDataMoveRequest,
    ProtectedItem: ProtectedItem,
    RecoveryPoint: RecoveryPoint,
    RestoreRequest: RestoreRequest,
    ProtectionPolicy: ProtectionPolicy,
    Job: Job,
    OperationResultInfoBase: OperationResultInfoBase,
    OperationWorkerResponse: OperationWorkerResponse,
    ValidateOperationRequest: ValidateOperationRequest,
    ValidateOperationsResponse: ValidateOperationsResponse,
    ValidateOperationResponse: ValidateOperationResponse,
    ErrorDetail: ErrorDetail,
    BackupEngineBase: BackupEngineBase,
    BackupEngineExtendedInfo: BackupEngineExtendedInfo,
    ProtectableContainer: ProtectableContainer,
    ProtectionContainer: ProtectionContainer,
    WorkloadItem: WorkloadItem,
    BackupRequest: BackupRequest,
    ILRRequest: ILRRequest,
    WorkloadProtectableItem: WorkloadProtectableItem,
    SecurityPinBase: SecurityPinBase,
    TokenInformation: TokenInformation,
    MoveRPAcrossTiersRequest: MoveRPAcrossTiersRequest,
    ListRecoveryPointsRecommendedForMoveRequest: ListRecoveryPointsRecommendedForMoveRequest,
    ResourceGuardProxyBase: ResourceGuardProxyBase,
    ResourceGuardOperationDetail: ResourceGuardOperationDetail,
    UnlockDeleteRequest: UnlockDeleteRequest,
    UnlockDeleteResponse: UnlockDeleteResponse,
    KPIResourceHealthDetails: KPIResourceHealthDetails,
    ResourceHealthDetails: ResourceHealthDetails,
    AzureFileshareProtectedItemExtendedInfo: AzureFileshareProtectedItemExtendedInfo,
    RecoveryPointProperties: RecoveryPointProperties,
    RestoreFileSpecs: RestoreFileSpecs,
    TargetAFSRestoreInfo: TargetAFSRestoreInfo,
    Settings: Settings,
    SubProtectionPolicy: SubProtectionPolicy,
    SchedulePolicy: SchedulePolicy,
    RetentionPolicy: RetentionPolicy,
    TieringPolicy: TieringPolicy,
    AzureIaaSVMProtectedItemExtendedInfo: AzureIaaSVMProtectedItemExtendedInfo,
    ExtendedProperties: ExtendedProperties,
    DiskExclusionProperties: DiskExclusionProperties,
    AzureIaaSVMErrorInfo: AzureIaaSVMErrorInfo,
    AzureIaaSVMJobExtendedInfo: AzureIaaSVMJobExtendedInfo,
    AzureIaaSVMJobTaskDetails: AzureIaaSVMJobTaskDetails,
    InstantRPAdditionalDetails: InstantRPAdditionalDetails,
    AzureSqlProtectedItemExtendedInfo: AzureSqlProtectedItemExtendedInfo,
    AzureStorageErrorInfo: AzureStorageErrorInfo,
    AzureStorageJobExtendedInfo: AzureStorageJobExtendedInfo,
    AzureStorageJobTaskDetails: AzureStorageJobTaskDetails,
    AzureVmWorkloadProtectedItemExtendedInfo: AzureVmWorkloadProtectedItemExtendedInfo,
    DistributedNodesInfo: DistributedNodesInfo,
    AzureWorkloadErrorInfo: AzureWorkloadErrorInfo,
    AzureWorkloadJobExtendedInfo: AzureWorkloadJobExtendedInfo,
    AzureWorkloadJobTaskDetails: AzureWorkloadJobTaskDetails,
    PointInTimeRange: PointInTimeRange,
    RecoveryPointTierInformation: RecoveryPointTierInformation,
    RecoveryPointMoveReadinessInfo: RecoveryPointMoveReadinessInfo,
    TargetRestoreInfo: TargetRestoreInfo,
    AzureWorkloadSQLRecoveryPointExtendedInfo: AzureWorkloadSQLRecoveryPointExtendedInfo,
    SQLDataDirectory: SQLDataDirectory,
    SQLDataDirectoryMapping: SQLDataDirectoryMapping,
    BEKDetails: BEKDetails,
    BmsrpQueryObject: BmsrpQueryObject,
    DiskInformation: DiskInformation,
    DailyRetentionFormat: DailyRetentionFormat,
    Day: Day,
    DailyRetentionSchedule: DailyRetentionSchedule,
    RetentionDuration: RetentionDuration,
    DpmErrorInfo: DpmErrorInfo,
    DpmJobExtendedInfo: DpmJobExtendedInfo,
    DpmJobTaskDetails: DpmJobTaskDetails,
    DPMProtectedItemExtendedInfo: DPMProtectedItemExtendedInfo,
    EncryptionDetails: EncryptionDetails,
    HourlySchedule: HourlySchedule,
    DailySchedule: DailySchedule,
    WeeklySchedule: WeeklySchedule,
    IdentityBasedRestoreDetails: IdentityBasedRestoreDetails,
    IdentityInfo: IdentityInfo,
    GetProtectedItemQueryObject: GetProtectedItemQueryObject,
    KeyAndSecretDetails: KeyAndSecretDetails,
    KEKDetails: KEKDetails,
    RecoveryPointDiskConfiguration: RecoveryPointDiskConfiguration,
    ExtendedLocation: ExtendedLocation,
    SecuredVMDetails: SecuredVMDetails,
    TargetDiskNetworkAccessSettings: TargetDiskNetworkAccessSettings,
    JobQueryObject: JobQueryObject,
    WeeklyRetentionSchedule: WeeklyRetentionSchedule,
    MonthlyRetentionSchedule: MonthlyRetentionSchedule,
    WeeklyRetentionFormat: WeeklyRetentionFormat,
    YearlyRetentionSchedule: YearlyRetentionSchedule,
    MabErrorInfo: MabErrorInfo,
    MabFileFolderProtectedItemExtendedInfo: MabFileFolderProtectedItemExtendedInfo,
    MabJobExtendedInfo: MabJobExtendedInfo,
    MabJobTaskDetails: MabJobTaskDetails,
    ProtectedItemQueryObject: ProtectedItemQueryObject,
    ProtectionPolicyQueryObject: ProtectionPolicyQueryObject,
    VaultJobErrorInfo: VaultJobErrorInfo,
    VaultJobExtendedInfo: VaultJobExtendedInfo,
    DPMContainerExtendedInfo: DPMContainerExtendedInfo,
    AzureWorkloadContainerExtendedInfo: AzureWorkloadContainerExtendedInfo,
    InquiryInfo: InquiryInfo,
    WorkloadInquiryDetails: WorkloadInquiryDetails,
    InquiryValidation: InquiryValidation,
    PreBackupValidation: PreBackupValidation,
    BMSBackupSummariesQueryObject: BMSBackupSummariesQueryObject,
    ProtectionIntentQueryObject: ProtectionIntentQueryObject,
    BMSBackupEngineQueryObject: BMSBackupEngineQueryObject,
    BMSBackupEnginesQueryObject: BMSBackupEnginesQueryObject,
    BMSContainerQueryObject: BMSContainerQueryObject,
    BMSContainersInquiryQueryObject: BMSContainersInquiryQueryObject,
    BmspoQueryObject: BmspoQueryObject,
    BMSRefreshContainersQueryObject: BMSRefreshContainersQueryObject,
    BMSWorkloadItemQueryObject: BMSWorkloadItemQueryObject,
    ClientScriptForConnect: ClientScriptForConnect,
    ContainerIdentityInfo: ContainerIdentityInfo,
    GenericContainerExtendedInfo: GenericContainerExtendedInfo,
    InstantItemRecoveryTarget: InstantItemRecoveryTarget,
    MabContainerExtendedInfo: MabContainerExtendedInfo,
    MABContainerHealthDetails: MABContainerHealthDetails,
    RecoveryPointRehydrationInfo: RecoveryPointRehydrationInfo,
    BackupResourceConfigResource: BackupResourceConfigResource,
    ProtectionIntentResource: ProtectionIntentResource,
    BackupResourceVaultConfigResource: BackupResourceVaultConfigResource,
    BackupResourceEncryptionConfigExtendedResource: BackupResourceEncryptionConfigExtendedResource,
    BackupResourceEncryptionConfigResource: BackupResourceEncryptionConfigResource,
    PrivateEndpointConnectionResource: PrivateEndpointConnectionResource,
    ProtectedItemResource: ProtectedItemResource,
    RecoveryPointResource: RecoveryPointResource,
    RestoreRequestResource: RestoreRequestResource,
    ProtectionPolicyResource: ProtectionPolicyResource,
    JobResource: JobResource,
    BackupEngineBaseResource: BackupEngineBaseResource,
    ProtectableContainerResource: ProtectableContainerResource,
    ProtectionContainerResource: ProtectionContainerResource,
    WorkloadItemResource: WorkloadItemResource,
    BackupRequestResource: BackupRequestResource,
    ILRRequestResource: ILRRequestResource,
    WorkloadProtectableItemResource: WorkloadProtectableItemResource,
    ResourceGuardProxyBaseResource: ResourceGuardProxyBaseResource,
    AzureBackupGoalFeatureSupportRequest: AzureBackupGoalFeatureSupportRequest,
    AzureVMResourceFeatureSupportRequest: AzureVMResourceFeatureSupportRequest,
    AzureRecoveryServiceVaultProtectionIntent: AzureRecoveryServiceVaultProtectionIntent,
    AzureResourceProtectionIntent: AzureResourceProtectionIntent,
    AzureWorkloadContainerAutoProtectionIntent: AzureWorkloadContainerAutoProtectionIntent,
    ProtectionIntentResourceList: ProtectionIntentResourceList,
    RecoveryPointResourceList: RecoveryPointResourceList,
    ProtectionPolicyResourceList: ProtectionPolicyResourceList,
    JobResourceList: JobResourceList,
    ProtectedItemResourceList: ProtectedItemResourceList,
    BackupEngineBaseResourceList: BackupEngineBaseResourceList,
    ProtectableContainerResourceList: ProtectableContainerResourceList,
    WorkloadItemResourceList: WorkloadItemResourceList,
    WorkloadProtectableItemResourceList: WorkloadProtectableItemResourceList,
    ProtectionContainerResourceList: ProtectionContainerResourceList,
    ResourceGuardProxyBaseResourceList: ResourceGuardProxyBaseResourceList,
    BackupResourceEncryptionConfigExtended: BackupResourceEncryptionConfigExtended,
    OperationStatusJobExtendedInfo: OperationStatusJobExtendedInfo,
    OperationStatusJobsExtendedInfo: OperationStatusJobsExtendedInfo,
    OperationStatusProvisionILRExtendedInfo: OperationStatusProvisionILRExtendedInfo,
    OperationStatusValidateOperationExtendedInfo: OperationStatusValidateOperationExtendedInfo,
    PrepareDataMoveResponse: PrepareDataMoveResponse,
    AzureFileshareProtectedItem: AzureFileshareProtectedItem,
    AzureIaaSVMProtectedItem: AzureIaaSVMProtectedItem,
    AzureSqlProtectedItem: AzureSqlProtectedItem,
    AzureVmWorkloadProtectedItem: AzureVmWorkloadProtectedItem,
    DPMProtectedItem: DPMProtectedItem,
    GenericProtectedItem: GenericProtectedItem,
    MabFileFolderProtectedItem: MabFileFolderProtectedItem,
    AzureFileShareRecoveryPoint: AzureFileShareRecoveryPoint,
    AzureWorkloadRecoveryPoint: AzureWorkloadRecoveryPoint,
    GenericRecoveryPoint: GenericRecoveryPoint,
    IaasVMRecoveryPoint: IaasVMRecoveryPoint,
    AzureFileShareRestoreRequest: AzureFileShareRestoreRequest,
    AzureWorkloadRestoreRequest: AzureWorkloadRestoreRequest,
    IaasVMRestoreRequest: IaasVMRestoreRequest,
    AzureVmWorkloadProtectionPolicy: AzureVmWorkloadProtectionPolicy,
    AzureFileShareProtectionPolicy: AzureFileShareProtectionPolicy,
    AzureIaaSVMProtectionPolicy: AzureIaaSVMProtectionPolicy,
    AzureSqlProtectionPolicy: AzureSqlProtectionPolicy,
    GenericProtectionPolicy: GenericProtectionPolicy,
    MabProtectionPolicy: MabProtectionPolicy,
    AzureIaaSVMJob: AzureIaaSVMJob,
    AzureIaaSVMJobV2: AzureIaaSVMJobV2,
    AzureStorageJob: AzureStorageJob,
    AzureWorkloadJob: AzureWorkloadJob,
    DpmJob: DpmJob,
    MabJob: MabJob,
    VaultJob: VaultJob,
    ExportJobsOperationResultInfo: ExportJobsOperationResultInfo,
    OperationResultInfo: OperationResultInfo,
    OperationResultInfoBaseResource: OperationResultInfoBaseResource,
    ValidateRestoreOperationRequest: ValidateRestoreOperationRequest,
    AzureBackupServerEngine: AzureBackupServerEngine,
    DpmBackupEngine: DpmBackupEngine,
    AzureStorageProtectableContainer: AzureStorageProtectableContainer,
    AzureVMAppContainerProtectableContainer: AzureVMAppContainerProtectableContainer,
    DpmContainer: DpmContainer,
    IaaSVMContainer: IaaSVMContainer,
    AzureWorkloadContainer: AzureWorkloadContainer,
    AzureSqlContainer: AzureSqlContainer,
    AzureStorageContainer: AzureStorageContainer,
    GenericContainer: GenericContainer,
    MabContainer: MabContainer,
    AzureVmWorkloadItem: AzureVmWorkloadItem,
    AzureFileShareBackupRequest: AzureFileShareBackupRequest,
    AzureWorkloadBackupRequest: AzureWorkloadBackupRequest,
    IaasVMBackupRequest: IaasVMBackupRequest,
    AzureFileShareProvisionILRRequest: AzureFileShareProvisionILRRequest,
    IaasVmilrRegistrationRequest: IaasVmilrRegistrationRequest,
    AzureFileShareProtectableItem: AzureFileShareProtectableItem,
    IaaSVMProtectableItem: IaaSVMProtectableItem,
    AzureVmWorkloadProtectableItem: AzureVmWorkloadProtectableItem,
    AzureIaaSVMHealthDetails: AzureIaaSVMHealthDetails,
    LogSchedulePolicy: LogSchedulePolicy,
    LongTermSchedulePolicy: LongTermSchedulePolicy,
    SimpleSchedulePolicy: SimpleSchedulePolicy,
    SimpleSchedulePolicyV2: SimpleSchedulePolicyV2,
    LongTermRetentionPolicy: LongTermRetentionPolicy,
    SimpleRetentionPolicy: SimpleRetentionPolicy,
    RecoveryPointTierInformationV2: RecoveryPointTierInformationV2,
    AzureWorkloadAutoProtectionIntent: AzureWorkloadAutoProtectionIntent,
    AzureIaaSClassicComputeVMProtectedItem: AzureIaaSClassicComputeVMProtectedItem,
    AzureIaaSComputeVMProtectedItem: AzureIaaSComputeVMProtectedItem,
    AzureVmWorkloadSAPAseDatabaseProtectedItem: AzureVmWorkloadSAPAseDatabaseProtectedItem,
    AzureVmWorkloadSAPHanaDatabaseProtectedItem: AzureVmWorkloadSAPHanaDatabaseProtectedItem,
    AzureVmWorkloadSAPHanaDBInstanceProtectedItem: AzureVmWorkloadSAPHanaDBInstanceProtectedItem,
    AzureVmWorkloadSQLDatabaseProtectedItem: AzureVmWorkloadSQLDatabaseProtectedItem,
    AzureWorkloadPointInTimeRecoveryPoint: AzureWorkloadPointInTimeRecoveryPoint,
    AzureWorkloadSAPHanaRecoveryPoint: AzureWorkloadSAPHanaRecoveryPoint,
    AzureWorkloadSQLRecoveryPoint: AzureWorkloadSQLRecoveryPoint,
    AzureWorkloadPointInTimeRestoreRequest: AzureWorkloadPointInTimeRestoreRequest,
    AzureWorkloadSAPHanaRestoreRequest: AzureWorkloadSAPHanaRestoreRequest,
    AzureWorkloadSQLRestoreRequest: AzureWorkloadSQLRestoreRequest,
    IaasVMRestoreWithRehydrationRequest: IaasVMRestoreWithRehydrationRequest,
    ValidateIaasVMRestoreOperationRequest: ValidateIaasVMRestoreOperationRequest,
    AzureBackupServerContainer: AzureBackupServerContainer,
    AzureIaaSClassicComputeVMContainer: AzureIaaSClassicComputeVMContainer,
    AzureIaaSComputeVMContainer: AzureIaaSComputeVMContainer,
    AzureSqlagWorkloadContainerProtectionContainer: AzureSqlagWorkloadContainerProtectionContainer,
    AzureVMAppContainerProtectionContainer: AzureVMAppContainerProtectionContainer,
    AzureVmWorkloadSAPAseDatabaseWorkloadItem: AzureVmWorkloadSAPAseDatabaseWorkloadItem,
    AzureVmWorkloadSAPAseSystemWorkloadItem: AzureVmWorkloadSAPAseSystemWorkloadItem,
    AzureVmWorkloadSAPHanaDatabaseWorkloadItem: AzureVmWorkloadSAPHanaDatabaseWorkloadItem,
    AzureVmWorkloadSAPHanaSystemWorkloadItem: AzureVmWorkloadSAPHanaSystemWorkloadItem,
    AzureVmWorkloadSQLDatabaseWorkloadItem: AzureVmWorkloadSQLDatabaseWorkloadItem,
    AzureVmWorkloadSQLInstanceWorkloadItem: AzureVmWorkloadSQLInstanceWorkloadItem,
    AzureIaaSClassicComputeVMProtectableItem: AzureIaaSClassicComputeVMProtectableItem,
    AzureIaaSComputeVMProtectableItem: AzureIaaSComputeVMProtectableItem,
    AzureVmWorkloadSAPAseSystemProtectableItem: AzureVmWorkloadSAPAseSystemProtectableItem,
    AzureVmWorkloadSAPHanaDatabaseProtectableItem: AzureVmWorkloadSAPHanaDatabaseProtectableItem,
    AzureVmWorkloadSAPHanaSystemProtectableItem: AzureVmWorkloadSAPHanaSystemProtectableItem,
    AzureVmWorkloadSAPHanaDBInstance: AzureVmWorkloadSAPHanaDBInstance,
    AzureVmWorkloadSAPHanaHSRProtectableItem: AzureVmWorkloadSAPHanaHSRProtectableItem,
    AzureVmWorkloadSQLAvailabilityGroupProtectableItem: AzureVmWorkloadSQLAvailabilityGroupProtectableItem,
    AzureVmWorkloadSQLDatabaseProtectableItem: AzureVmWorkloadSQLDatabaseProtectableItem,
    AzureVmWorkloadSQLInstanceProtectableItem: AzureVmWorkloadSQLInstanceProtectableItem,
    AzureWorkloadSQLAutoProtectionIntent: AzureWorkloadSQLAutoProtectionIntent,
    AzureWorkloadSAPHanaPointInTimeRecoveryPoint: AzureWorkloadSAPHanaPointInTimeRecoveryPoint,
    AzureWorkloadSQLPointInTimeRecoveryPoint: AzureWorkloadSQLPointInTimeRecoveryPoint,
    AzureWorkloadSAPHanaPointInTimeRestoreRequest: AzureWorkloadSAPHanaPointInTimeRestoreRequest,
    AzureWorkloadSAPHanaRestoreWithRehydrateRequest: AzureWorkloadSAPHanaRestoreWithRehydrateRequest,
    AzureWorkloadSQLPointInTimeRestoreRequest: AzureWorkloadSQLPointInTimeRestoreRequest,
    AzureWorkloadSQLRestoreWithRehydrateRequest: AzureWorkloadSQLRestoreWithRehydrateRequest,
    AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest: AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest,
    AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest: AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const vaultName = {
    parameterPath: "vaultName",
    mapper: {
        serializedName: "vaultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: BackupResourceConfigResource
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: PreValidateEnableBackupRequest
};
const azureRegion = {
    parameterPath: "azureRegion",
    mapper: {
        serializedName: "azureRegion",
        required: true,
        type: {
            name: "String"
        }
    }
};
const fabricName = {
    parameterPath: "fabricName",
    mapper: {
        serializedName: "fabricName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const intentObjectName = {
    parameterPath: "intentObjectName",
    mapper: {
        serializedName: "intentObjectName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: ProtectionIntentResource
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: BackupStatusRequest
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: FeatureSupportRequest
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: BackupResourceVaultConfigResource
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: BackupResourceEncryptionConfigResource
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnectionResource
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: PrepareDataMoveRequest
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: TriggerDataMoveRequest
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: MoveRPAcrossTiersRequest
};
const containerName = {
    parameterPath: "containerName",
    mapper: {
        serializedName: "containerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const protectedItemName = {
    parameterPath: "protectedItemName",
    mapper: {
        serializedName: "protectedItemName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const recoveryPointId = {
    parameterPath: "recoveryPointId",
    mapper: {
        serializedName: "recoveryPointId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: ProtectedItemResource
};
const parameters12 = {
    parameterPath: "parameters",
    mapper: RestoreRequestResource
};
const policyName = {
    parameterPath: "policyName",
    mapper: {
        serializedName: "policyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters13 = {
    parameterPath: "parameters",
    mapper: ProtectionPolicyResource
};
const jobName = {
    parameterPath: "jobName",
    mapper: {
        serializedName: "jobName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters14 = {
    parameterPath: "parameters",
    mapper: ValidateOperationRequest
};
const backupEngineName = {
    parameterPath: "backupEngineName",
    mapper: {
        serializedName: "backupEngineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters15 = {
    parameterPath: "parameters",
    mapper: ProtectionContainerResource
};
const parameters16 = {
    parameterPath: "parameters",
    mapper: BackupRequestResource
};
const parameters17 = {
    parameterPath: "parameters",
    mapper: ILRRequestResource
};
const parameters18 = {
    parameterPath: ["options", "parameters"],
    mapper: SecurityPinBase
};
const parameters19 = {
    parameterPath: "parameters",
    mapper: ListRecoveryPointsRecommendedForMoveRequest
};
const resourceGuardProxyName = {
    parameterPath: "resourceGuardProxyName",
    mapper: {
        serializedName: "resourceGuardProxyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters20 = {
    parameterPath: "parameters",
    mapper: ResourceGuardProxyBaseResource
};
const parameters21 = {
    parameterPath: "parameters",
    mapper: UnlockDeleteRequest
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BackupResourceStorageConfigsNonCRR operations. */
class BackupResourceStorageConfigsNonCRRImpl {
    /**
     * Initialize a new instance of the class BackupResourceStorageConfigsNonCRR class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches resource storage config.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, getOperationSpec$r);
    }
    /**
     * Updates vault storage model type.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Vault storage config request
     * @param options The options parameters.
     */
    update(vaultName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, parameters, options }, updateOperationSpec$2);
    }
    /**
     * Updates vault storage model type.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Vault storage config request
     * @param options The options parameters.
     */
    patch(vaultName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, parameters, options }, patchOperationSpec);
    }
}
// Operation Specifications
const serializer$N = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$r = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupResourceConfigResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$N
};
const updateOperationSpec$2 = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BackupResourceConfigResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$N
};
const patchOperationSpec = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig",
    httpMethod: "PATCH",
    responses: {
        204: {},
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$N
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionIntentOperations operations. */
class ProtectionIntentOperationsImpl {
    /**
     * Initialize a new instance of the class ProtectionIntentOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * It will validate followings
     * 1. Vault capacity
     * 2. VM is already protected
     * 3. Any VM related configuration passed in properties.
     * @param azureRegion Azure region to hit Api
     * @param parameters Enable backup validation request on Virtual Machine
     * @param options The options parameters.
     */
    validate(azureRegion, parameters, options) {
        return this.client.sendOperationRequest({ azureRegion, parameters, options }, validateOperationSpec$2);
    }
    /**
     * Provides the details of the protection intent up item. This is an asynchronous operation. To know
     * the status of the operation,
     * call the GetItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up item.
     * @param intentObjectName Backed up item name whose details are to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, intentObjectName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, intentObjectName, options }, getOperationSpec$q);
    }
    /**
     * Create Intent for Enabling backup of an item. This is a synchronous operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backup item.
     * @param intentObjectName Intent object name.
     * @param parameters resource backed up item
     * @param options The options parameters.
     */
    createOrUpdate(vaultName, resourceGroupName, fabricName, intentObjectName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            intentObjectName,
            parameters,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * Used to remove intent from an item
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the intent.
     * @param intentObjectName Intent to be deleted.
     * @param options The options parameters.
     */
    delete(vaultName, resourceGroupName, fabricName, intentObjectName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, intentObjectName, options }, deleteOperationSpec$4);
    }
}
// Operation Specifications
const serializer$M = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const validateOperationSpec$2 = {
    path: "/Subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{azureRegion}/backupPreValidateProtection",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PreValidateEnableBackupResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        azureRegion
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$M
};
const getOperationSpec$q = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/backupProtectionIntent/{intentObjectName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionIntentResource
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        intentObjectName
    ],
    headerParameters: [accept],
    serializer: serializer$M
};
const createOrUpdateOperationSpec$2 = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/backupProtectionIntent/{intentObjectName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProtectionIntentResource
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        intentObjectName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$M
};
const deleteOperationSpec$4 = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/backupProtectionIntent/{intentObjectName}",
    httpMethod: "DELETE",
    responses: { 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        intentObjectName
    ],
    serializer: serializer$M
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BackupStatus operations. */
class BackupStatusImpl {
    /**
     * Initialize a new instance of the class BackupStatus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the container backup status
     * @param azureRegion Azure region to hit Api
     * @param parameters Container Backup Status Request
     * @param options The options parameters.
     */
    get(azureRegion, parameters, options) {
        return this.client.sendOperationRequest({ azureRegion, parameters, options }, getOperationSpec$p);
    }
}
// Operation Specifications
const serializer$L = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$p = {
    path: "/Subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{azureRegion}/backupStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BackupStatusResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        azureRegion
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$L
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing FeatureSupport operations. */
class FeatureSupportImpl {
    /**
     * Initialize a new instance of the class FeatureSupport class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * It will validate if given feature with resource properties is supported in service
     * @param azureRegion Azure region to hit Api
     * @param parameters Feature support request object
     * @param options The options parameters.
     */
    validate(azureRegion, parameters, options) {
        return this.client.sendOperationRequest({ azureRegion, parameters, options }, validateOperationSpec$1);
    }
}
// Operation Specifications
const serializer$K = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const validateOperationSpec$1 = {
    path: "/Subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{azureRegion}/backupValidateFeatures",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AzureVMResourceFeatureSupportResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        azureRegion
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$K
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupProtectionIntent operations. */
class BackupProtectionIntentImpl {
    /**
     * Initialize a new instance of the class BackupProtectionIntent class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides a pageable list of all intents that are present within a vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Provides a pageable list of all intents that are present within a vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$d);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$c);
    }
}
// Operation Specifications
const serializer$J = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$d = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupProtectionIntents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionIntentResourceList
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$J
};
const listNextOperationSpec$c = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionIntentResourceList
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$J
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupUsageSummaries operations. */
class BackupUsageSummariesImpl {
    /**
     * Initialize a new instance of the class BackupUsageSummaries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the backup management usage summaries of the vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Fetches the backup management usage summaries of the vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$c);
    }
}
// Operation Specifications
const serializer$I = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$c = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupUsageSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupManagementUsageList
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$I
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of available operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of available operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$b);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$H = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$b = {
    path: "/providers/Microsoft.RecoveryServices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClientDiscoveryResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$H
};
const listNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClientDiscoveryResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$H
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BackupResourceVaultConfigs operations. */
class BackupResourceVaultConfigsImpl {
    /**
     * Initialize a new instance of the class BackupResourceVaultConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches resource vault config.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, getOperationSpec$o);
    }
    /**
     * Updates vault security config.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters resource config request
     * @param options The options parameters.
     */
    update(vaultName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, parameters, options }, updateOperationSpec$1);
    }
    /**
     * Updates vault security config.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters resource config request
     * @param options The options parameters.
     */
    put(vaultName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, parameters, options }, putOperationSpec$2);
    }
}
// Operation Specifications
const serializer$G = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$o = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupconfig/vaultconfig",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupResourceVaultConfigResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$G
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupconfig/vaultconfig",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BackupResourceVaultConfigResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$G
};
const putOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupconfig/vaultconfig",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BackupResourceVaultConfigResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$G
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BackupResourceEncryptionConfigs operations. */
class BackupResourceEncryptionConfigsImpl {
    /**
     * Initialize a new instance of the class BackupResourceEncryptionConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches Vault Encryption config.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, getOperationSpec$n);
    }
    /**
     * Updates Vault encryption config.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Vault encryption input config request
     * @param options The options parameters.
     */
    update(vaultName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, parameters, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer$F = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$n = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupEncryptionConfigs/backupResourceEncryptionConfig",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupResourceEncryptionConfigExtendedResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$F
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupEncryptionConfigs/backupResourceEncryptionConfig",
    httpMethod: "PUT",
    responses: {
        200: {},
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$F
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointConnectionOperations operations. */
class PrivateEndpointConnectionOperationsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnectionOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get Private Endpoint Connection. This call is made by Backup Admin.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, privateEndpointConnectionName, options }, getOperationSpec$m);
    }
    /**
     * Approve or Reject Private Endpoint requests. This call is made by Backup Admin.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginPut(vaultName, resourceGroupName, privateEndpointConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    vaultName,
                    resourceGroupName,
                    privateEndpointConnectionName,
                    parameters,
                    options
                },
                spec: putOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Approve or Reject Private Endpoint requests. This call is made by Backup Admin.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginPutAndWait(vaultName, resourceGroupName, privateEndpointConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPut(vaultName, resourceGroupName, privateEndpointConnectionName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete Private Endpoint requests. This call is made by Backup Admin.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(vaultName, resourceGroupName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    vaultName,
                    resourceGroupName,
                    privateEndpointConnectionName,
                    options
                },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete Private Endpoint requests. This call is made by Backup Admin.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(vaultName, resourceGroupName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(vaultName, resourceGroupName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$E = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$m = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$E
};
const putOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        201: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        202: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        204: {
            bodyMapper: PrivateEndpointConnectionResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$E
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$E
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointOperations operations. */
class PrivateEndpointOperationsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the operation status for a private endpoint connection.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param operationId Operation id
     * @param options The options parameters.
     */
    getOperationStatus(vaultName, resourceGroupName, privateEndpointConnectionName, operationId, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            privateEndpointConnectionName,
            operationId,
            options
        }, getOperationStatusOperationSpec$1);
    }
}
// Operation Specifications
const serializer$D = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationStatusOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}/operationsStatus/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        privateEndpointConnectionName,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$D
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BMSPrepareDataMoveOperationResult operations. */
class BMSPrepareDataMoveOperationResultImpl {
    /**
     * Initialize a new instance of the class BMSPrepareDataMoveOperationResult class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches Operation Result for Prepare Data Move
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationSpec$l);
    }
}
// Operation Specifications
const serializer$C = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultStorageConfigOperationResultResponse
        },
        202: {},
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$C
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectedItems operations. */
class ProtectedItemsImpl {
    /**
     * Initialize a new instance of the class ProtectedItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the details of the backed up item. This is an asynchronous operation. To know the status of
     * the operation,
     * call the GetItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up item.
     * @param containerName Container name associated with the backed up item.
     * @param protectedItemName Backed up item name whose details are to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            options
        }, getOperationSpec$k);
    }
    /**
     * Enables backup of an item or to modifies the backup policy information of an already backed up item.
     * This is an
     * asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backup item.
     * @param containerName Container name associated with the backup item.
     * @param protectedItemName Item name to be backed up.
     * @param parameters resource backed up item
     * @param options The options parameters.
     */
    createOrUpdate(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Used to disable backup of an item within a container. This is an asynchronous operation. To know the
     * status of the
     * request, call the GetItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up item.
     * @param containerName Container name associated with the backed up item.
     * @param protectedItemName Backed up item to be deleted.
     * @param options The options parameters.
     */
    delete(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            options
        }, deleteOperationSpec$2);
    }
}
// Operation Specifications
const serializer$B = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectedItemResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept],
    serializer: serializer$B
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProtectedItemResource
        },
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$B
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept],
    serializer: serializer$B
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectedItemOperationResults operations. */
class ProtectedItemOperationResultsImpl {
    /**
     * Initialize a new instance of the class ProtectedItemOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the result of any operation on the backup item.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backup item.
     * @param containerName Container name associated with the backup item.
     * @param protectedItemName Backup item name whose details are to be fetched.
     * @param operationId OperationID which represents the operation whose result needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, operationId, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            operationId,
            options
        }, getOperationSpec$j);
    }
}
// Operation Specifications
const serializer$A = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectedItemResource
        },
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        operationId,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept],
    serializer: serializer$A
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing RecoveryPoints operations. */
class RecoveryPointsImpl {
    /**
     * Initialize a new instance of the class RecoveryPoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the backup copies for the backed up item.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up item.
     * @param containerName Container name associated with the backed up item.
     * @param protectedItemName Backed up item whose backup copies are to be fetched.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the backup copies for the backed up item.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up item.
     * @param containerName Container name associated with the backed up item.
     * @param protectedItemName Backed up item whose backup copies are to be fetched.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            options
        }, listOperationSpec$a);
    }
    /**
     * Provides the information of the backed up data identified using RecoveryPointID. This is an
     * asynchronous operation.
     * To know the status of the operation, call the GetProtectedItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with backed up item.
     * @param containerName Container name associated with backed up item.
     * @param protectedItemName Backed up item name whose backup data needs to be fetched.
     * @param recoveryPointId RecoveryPointID represents the backed up data to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            recoveryPointId,
            options
        }, getOperationSpec$i);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up item.
     * @param containerName Container name associated with the backed up item.
     * @param protectedItemName Backed up item whose backup copies are to be fetched.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, nextLink, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            nextLink,
            options
        }, listNextOperationSpec$a);
    }
}
// Operation Specifications
const serializer$z = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPointResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept],
    serializer: serializer$z
};
const getOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPointResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId
    ],
    headerParameters: [accept],
    serializer: serializer$z
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPointResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        nextLink,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept],
    serializer: serializer$z
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Restores operations. */
class RestoresImpl {
    /**
     * Initialize a new instance of the class Restores class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Restores the specified backed up data. This is an asynchronous operation. To know the status of this
     * API call, use
     * GetProtectedItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up items.
     * @param containerName Container name associated with the backed up items.
     * @param protectedItemName Backed up item to be restored.
     * @param recoveryPointId Recovery point ID which represents the backed up data to be restored.
     * @param parameters resource restore request
     * @param options The options parameters.
     */
    beginTrigger(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    vaultName,
                    resourceGroupName,
                    fabricName,
                    containerName,
                    protectedItemName,
                    recoveryPointId,
                    parameters,
                    options
                },
                spec: triggerOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Restores the specified backed up data. This is an asynchronous operation. To know the status of this
     * API call, use
     * GetProtectedItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up items.
     * @param containerName Container name associated with the backed up items.
     * @param protectedItemName Backed up item to be restored.
     * @param recoveryPointId Recovery point ID which represents the backed up data to be restored.
     * @param parameters resource restore request
     * @param options The options parameters.
     */
    beginTriggerAndWait(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTrigger(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$y = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const triggerOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/restore",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$y
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupPolicies operations. */
class BackupPoliciesImpl {
    /**
     * Initialize a new instance of the class BackupPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists of backup policies associated with Recovery Services Vault. API provides pagination parameters
     * to fetch
     * scoped results.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists of backup policies associated with Recovery Services Vault. API provides pagination parameters
     * to fetch
     * scoped results.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$9);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$x = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionPolicyResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$x
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionPolicyResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$x
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionPolicies operations. */
class ProtectionPoliciesImpl {
    /**
     * Initialize a new instance of the class ProtectionPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the details of the backup policies associated to Recovery Services Vault. This is an
     * asynchronous
     * operation. Status of the operation can be fetched using GetPolicyOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy information to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, policyName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, policyName, options }, getOperationSpec$h);
    }
    /**
     * Creates or modifies a backup policy. This is an asynchronous operation. Status of the operation can
     * be fetched
     * using GetPolicyOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy to be created.
     * @param parameters resource backup policy
     * @param options The options parameters.
     */
    createOrUpdate(vaultName, resourceGroupName, policyName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, policyName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes specified backup policy from your Recovery Services Vault. This is an asynchronous
     * operation. Status of the
     * operation can be fetched using GetProtectionPolicyOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy to be deleted.
     * @param options The options parameters.
     */
    beginDelete(vaultName, resourceGroupName, policyName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { vaultName, resourceGroupName, policyName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes specified backup policy from your Recovery Services Vault. This is an asynchronous
     * operation. Status of the
     * operation can be fetched using GetProtectionPolicyOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy to be deleted.
     * @param options The options parameters.
     */
    beginDeleteAndWait(vaultName, resourceGroupName, policyName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(vaultName, resourceGroupName, policyName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$w = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionPolicyResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        policyName
    ],
    headerParameters: [accept],
    serializer: serializer$w
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProtectionPolicyResource
        },
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters13,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        policyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$w
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        policyName
    ],
    headerParameters: [accept],
    serializer: serializer$w
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionPolicyOperationResults operations. */
class ProtectionPolicyOperationResultsImpl {
    /**
     * Initialize a new instance of the class ProtectionPolicyOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the result of an operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy name whose operation's result needs to be fetched.
     * @param operationId Operation ID which represents the operation whose result needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, policyName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, policyName, operationId, options }, getOperationSpec$g);
    }
}
// Operation Specifications
const serializer$v = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionPolicyResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId,
        policyName
    ],
    headerParameters: [accept],
    serializer: serializer$v
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupJobs operations. */
class BackupJobsImpl {
    /**
     * Initialize a new instance of the class BackupJobs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides a pageable list of jobs.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Provides a pageable list of jobs.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$8);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$u = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupJobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$u
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$u
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing JobDetails operations. */
class JobDetailsImpl {
    /**
     * Initialize a new instance of the class JobDetails class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets extended information associated with the job.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Name of the job whose details are to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, jobName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, jobName, options }, getOperationSpec$f);
    }
}
// Operation Specifications
const serializer$t = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupJobs/{jobName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        jobName
    ],
    headerParameters: [accept],
    serializer: serializer$t
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing JobCancellations operations. */
class JobCancellationsImpl {
    /**
     * Initialize a new instance of the class JobCancellations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Cancels a job. This is an asynchronous operation. To know the status of the cancellation, call
     * GetCancelOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Name of the job to cancel.
     * @param options The options parameters.
     */
    trigger(vaultName, resourceGroupName, jobName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, jobName, options }, triggerOperationSpec$2);
    }
}
// Operation Specifications
const serializer$s = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const triggerOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupJobs/{jobName}/cancel",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        jobName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing JobOperationResults operations. */
class JobOperationResultsImpl {
    /**
     * Initialize a new instance of the class JobOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the result of any operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job name whose operation result has to be fetched.
     * @param operationId OperationID which represents the operation whose result has to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, jobName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, jobName, operationId, options }, getOperationSpec$e);
    }
}
// Operation Specifications
const serializer$r = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupJobs/{jobName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId,
        jobName
    ],
    headerParameters: [accept],
    serializer: serializer$r
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ExportJobsOperationResults operations. */
class ExportJobsOperationResultsImpl {
    /**
     * Initialize a new instance of the class ExportJobsOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the operation result of operation triggered by Export Jobs API. If the operation is successful,
     * then it also
     * contains URL of a Blob and a SAS key to access the same. The blob contains exported jobs in JSON
     * serialized format.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId OperationID which represents the export job.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationSpec$d);
    }
}
// Operation Specifications
const serializer$q = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupJobs/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationResultInfoBaseResource
        },
        202: {
            bodyMapper: OperationResultInfoBaseResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$q
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Jobs operations. */
class JobsImpl {
    /**
     * Initialize a new instance of the class Jobs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Triggers export of jobs specified by filters and returns an OperationID to track.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    export(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, exportOperationSpec);
    }
}
// Operation Specifications
const serializer$p = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const exportOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupJobsExport",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$p
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupProtectedItems operations. */
class BackupProtectedItemsImpl {
    /**
     * Initialize a new instance of the class BackupProtectedItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides a pageable list of all items that are backed up within a vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Provides a pageable list of all items that are backed up within a vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$7);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$o = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupProtectedItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectedItemResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$o
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectedItemResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$o
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operation operations. */
class OperationImpl {
    /**
     * Initialize a new instance of the class Operation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Validate operation for specified backed up item. This is a synchronous operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters resource validate operation request
     * @param options The options parameters.
     */
    validate(vaultName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, parameters, options }, validateOperationSpec);
    }
}
// Operation Specifications
const serializer$n = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const validateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupValidateOperation",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidateOperationsResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters14,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$n
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ValidateOperation operations. */
class ValidateOperationImpl {
    /**
     * Initialize a new instance of the class ValidateOperation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Validate operation for specified backed up item in the form of an asynchronous operation. Returns
     * tracking headers which can be tracked using GetValidateOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters resource validate operation request
     * @param options The options parameters.
     */
    beginTrigger(vaultName, resourceGroupName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { vaultName, resourceGroupName, parameters, options },
                spec: triggerOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Validate operation for specified backed up item in the form of an asynchronous operation. Returns
     * tracking headers which can be tracked using GetValidateOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters resource validate operation request
     * @param options The options parameters.
     */
    beginTriggerAndWait(vaultName, resourceGroupName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTrigger(vaultName, resourceGroupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$m = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const triggerOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupTriggerValidateOperation",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters14,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$m
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ValidateOperationResults operations. */
class ValidateOperationResultsImpl {
    /**
     * Initialize a new instance of the class ValidateOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the result of a triggered validate operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId OperationID which represents the operation whose result needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationSpec$c);
    }
}
// Operation Specifications
const serializer$l = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupValidateOperationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ValidateOperationsResponse
        },
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$l
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ValidateOperationStatuses operations. */
class ValidateOperationStatusesImpl {
    /**
     * Initialize a new instance of the class ValidateOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the status of a triggered validate operation. The status can be in progress, completed
     * or failed. You can refer to the OperationStatus enum for all the possible states of the operation.
     * If operation has completed, this method returns the list of errors obtained while validating the
     * operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId OperationID represents the operation whose status needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationSpec$b);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupValidateOperationsStatuses/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupEngines operations. */
class BackupEnginesImpl {
    /**
     * Initialize a new instance of the class BackupEngines class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Backup management servers registered to Recovery Services Vault. Returns a pageable list of servers.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Backup management servers registered to Recovery Services Vault. Returns a pageable list of servers.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$6);
    }
    /**
     * Returns backup management server registered to Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param backupEngineName Name of the backup management server.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, backupEngineName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, backupEngineName, options }, getOperationSpec$a);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupEngines",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupEngineBaseResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupEngines/{backupEngineName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupEngineBaseResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        backupEngineName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BackupEngineBaseResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionContainerRefreshOperationResults operations. */
class ProtectionContainerRefreshOperationResultsImpl {
    /**
     * Initialize a new instance of the class ProtectionContainerRefreshOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the result of the refresh operation triggered by the BeginRefresh operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param operationId Operation ID associated with the operation whose result needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, operationId, options }, getOperationSpec$9);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ProtectableContainers operations. */
class ProtectableContainersImpl {
    /**
     * Initialize a new instance of the class ProtectableContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the containers that can be registered to Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, fabricName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, fabricName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the containers that can be registered to Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, options }, listOperationSpec$5);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectableContainers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectableContainerResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectableContainerResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionContainers operations. */
class ProtectionContainersImpl {
    /**
     * Initialize a new instance of the class ProtectionContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets details of the specific container registered to your Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the fabric where the container belongs.
     * @param containerName Name of the container whose details need to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, getOperationSpec$8);
    }
    /**
     * Registers the container with Recovery Services vault.
     * This is an asynchronous operation. To track the operation status, use location header to call get
     * latest status of
     * the operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Name of the container to be registered.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    register(vaultName, resourceGroupName, fabricName, containerName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            parameters,
            options
        }, registerOperationSpec);
    }
    /**
     * Unregisters the given container from your Recovery Services Vault. This is an asynchronous
     * operation. To determine
     * whether the backend service has finished processing the request, call Get Container Operation Result
     * API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the fabric where the container belongs.
     * @param containerName Name of the container which needs to be unregistered from the Recovery Services
     *                      Vault.
     * @param options The options parameters.
     */
    unregister(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, unregisterOperationSpec);
    }
    /**
     * This is an async operation and the results should be tracked using location header or
     * Azure-async-url.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric Name associated with the container.
     * @param containerName Name of the container in which inquiry needs to be triggered.
     * @param options The options parameters.
     */
    inquire(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, inquireOperationSpec);
    }
    /**
     * Discovers all the containers in the subscription that can be backed up to Recovery Services Vault.
     * This is an
     * asynchronous operation. To know the status of the operation, call GetRefreshOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated the container.
     * @param options The options parameters.
     */
    refresh(vaultName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, options }, refreshOperationSpec);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const registerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResource
        },
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters15,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const unregisterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const inquireOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/inquire",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const refreshOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/refreshContainers",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupWorkloadItems operations. */
class BackupWorkloadItemsImpl {
    /**
     * Initialize a new instance of the class BackupWorkloadItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides a pageable list of workload item of a specific container according to the query filter and
     * the pagination
     * parameters.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Name of the container.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, fabricName, containerName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, fabricName, containerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, fabricName, containerName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, fabricName, containerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, fabricName, containerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, fabricName, containerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, fabricName, containerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, fabricName, containerName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Provides a pageable list of workload item of a specific container according to the query filter and
     * the pagination
     * parameters.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Name of the container.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, fabricName, containerName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, fabricName, containerName, options }, listOperationSpec$4);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Name of the container.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, fabricName, containerName, nextLink, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            nextLink,
            options
        }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/items",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkloadItemResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkloadItemResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        nextLink,
        containerName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionContainerOperationResults operations. */
class ProtectionContainerOperationResultsImpl {
    /**
     * Initialize a new instance of the class ProtectionContainerOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the result of any operation on the container.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the container.
     * @param containerName Container name whose information should be fetched.
     * @param operationId Operation ID which represents the operation whose result needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, operationId, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            operationId,
            options
        }, getOperationSpec$7);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResource
        },
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        operationId,
        containerName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Backups operations. */
class BackupsImpl {
    /**
     * Initialize a new instance of the class Backups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Triggers backup for specified backed up item. This is an asynchronous operation. To know the status
     * of the
     * operation, call GetProtectedItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backup item.
     * @param containerName Container name associated with the backup item.
     * @param protectedItemName Backup item for which backup needs to be triggered.
     * @param parameters resource backup request
     * @param options The options parameters.
     */
    trigger(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            parameters,
            options
        }, triggerOperationSpec);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const triggerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/backup",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters16,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectedItemOperationStatuses operations. */
class ProtectedItemOperationStatusesImpl {
    /**
     * Initialize a new instance of the class ProtectedItemOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the status of an operation such as triggering a backup, restore. The status can be in
     * progress, completed
     * or failed. You can refer to the OperationStatus enum for all the possible states of the operation.
     * Some operations
     * create jobs. This method returns the list of jobs associated with the operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backup item.
     * @param containerName Container name associated with the backup item.
     * @param protectedItemName Backup item name whose details are to be fetched.
     * @param operationId OperationID represents the operation whose status needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, operationId, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            operationId,
            options
        }, getOperationSpec$6);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/operationsStatus/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        operationId,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ItemLevelRecoveryConnections operations. */
class ItemLevelRecoveryConnectionsImpl {
    /**
     * Initialize a new instance of the class ItemLevelRecoveryConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provisions a script which invokes an iSCSI connection to the backup data. Executing this script
     * opens a file
     * explorer displaying all the recoverable files and folders. This is an asynchronous operation. To
     * know the status of
     * provisioning, call GetProtectedItemOperationResult API.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up items.
     * @param containerName Container name associated with the backed up items.
     * @param protectedItemName Backed up item name whose files/folders are to be restored.
     * @param recoveryPointId Recovery point ID which represents backed up data. iSCSI connection will be
     *                        provisioned
     *                        for this backed up data.
     * @param parameters resource ILR request
     * @param options The options parameters.
     */
    provision(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            recoveryPointId,
            parameters,
            options
        }, provisionOperationSpec);
    }
    /**
     * Revokes an iSCSI connection which can be used to download a script. Executing this script opens a
     * file explorer
     * displaying all recoverable files and folders. This is an asynchronous operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backed up items.
     * @param containerName Container name associated with the backed up items.
     * @param protectedItemName Backed up item name whose files/folders are to be restored.
     * @param recoveryPointId Recovery point ID which represents backed up data. iSCSI connection will be
     *                        revoked for
     *                        this backed up data.
     * @param options The options parameters.
     */
    revoke(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            recoveryPointId,
            options
        }, revokeOperationSpec);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const provisionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/provisionInstantItemRecovery",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters17,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const revokeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/revokeInstantItemRecovery",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BackupOperationResults operations. */
class BackupOperationResultsImpl {
    /**
     * Initialize a new instance of the class BackupOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the status of the delete operations such as deleting backed up item. Once the operation has
     * started, the
     * status code in the response would be Accepted. It will continue to be in this state till it reaches
     * completion. On
     * successful completion, the status code will be OK. This method expects OperationID as an argument.
     * OperationID is
     * part of the Location header of the operation response.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId OperationID which represents the operation.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationSpec$5);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupOperationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BackupOperationStatuses operations. */
class BackupOperationStatusesImpl {
    /**
     * Initialize a new instance of the class BackupOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the status of an operation such as triggering a backup, restore. The status can be in
     * progress, completed
     * or failed. You can refer to the OperationStatus enum for all the possible states of an operation.
     * Some operations
     * create jobs. This method returns the list of jobs when the operation is complete.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId OperationID which represents the operation.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationSpec$4);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupOperations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ProtectionPolicyOperationStatuses operations. */
class ProtectionPolicyOperationStatusesImpl {
    /**
     * Initialize a new instance of the class ProtectionPolicyOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides the status of the asynchronous operations like backup, restore. The status can be in
     * progress, completed
     * or failed. You can refer to the Operation Status enum for all the possible states of an operation.
     * Some operations
     * create jobs. This method returns the list of jobs associated with operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy name whose operation's status needs to be fetched.
     * @param operationId Operation ID which represents an operation whose status needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, policyName, operationId, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, policyName, operationId, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId,
        policyName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupProtectableItems operations. */
class BackupProtectableItemsImpl {
    /**
     * Initialize a new instance of the class BackupProtectableItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Provides a pageable list of protectable objects within your subscription according to the query
     * filter and the
     * pagination parameters.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Provides a pageable list of protectable objects within your subscription according to the query
     * filter and the
     * pagination parameters.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupProtectableItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkloadProtectableItemResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken
    ],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkloadProtectableItemResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BackupProtectionContainers operations. */
class BackupProtectionContainersImpl {
    /**
     * Initialize a new instance of the class BackupProtectionContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the containers registered to Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the containers registered to Recovery Services Vault.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupProtectionContainers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DeletedProtectionContainers operations. */
class DeletedProtectionContainersImpl {
    /**
     * Initialize a new instance of the class DeletedProtectionContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the soft deleted containers registered to Recovery Services Vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    list(resourceGroupName, vaultName, options) {
        const iter = this.listPagingAll(resourceGroupName, vaultName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, vaultName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, vaultName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, vaultName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, vaultName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, vaultName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, vaultName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the soft deleted containers registered to Recovery Services Vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    _list(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param vaultName The name of the recovery services vault.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, vaultName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupDeletedProtectionContainers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SecurityPINs operations. */
class SecurityPINsImpl {
    /**
     * Initialize a new instance of the class SecurityPINs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the security PIN.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupSecurityPIN",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TokenInformation
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters18,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing RecoveryPointsRecommendedForMove operations. */
class RecoveryPointsRecommendedForMoveImpl {
    /**
     * Initialize a new instance of the class RecoveryPointsRecommendedForMove class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the recovery points recommended for move to another tier
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param parameters List Recovery points Recommended for Move Request
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options) {
        const iter = this.listPagingAll(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options, settings);
            }
        };
    }
    listPagingPage(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the recovery points recommended for move to another tier
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param parameters List Recovery points Recommended for Move Request
     * @param options The options parameters.
     */
    _list(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            parameters,
            options
        }, listOperationSpec);
    }
    /**
     * ListNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param parameters List Recovery points Recommended for Move Request
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, parameters, nextLink, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            fabricName,
            containerName,
            protectedItemName,
            parameters,
            nextLink,
            options
        }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPointsRecommendedForMove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPointResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters19,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPointResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        nextLink,
        containerName,
        protectedItemName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceGuardProxies operations. */
class ResourceGuardProxiesImpl {
    /**
     * Initialize a new instance of the class ResourceGuardProxies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the ResourceGuardProxies under vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(vaultName, resourceGroupName, options) {
        const iter = this.getPagingAll(vaultName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getPagingPage(vaultName, resourceGroupName, options, settings);
            }
        };
    }
    getPagingPage(vaultName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* getPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._get(vaultName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._getNext(vaultName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    getPagingAll(vaultName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* getPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.getPagingPage(vaultName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the ResourceGuardProxies under vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _get(vaultName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, options }, getOperationSpec$1);
    }
    /**
     * GetNext
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the Get method.
     * @param options The options parameters.
     */
    _getNext(vaultName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, nextLink, options }, getNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceGuardProxyBaseResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceGuardProxyBaseResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ResourceGuardProxy operations. */
class ResourceGuardProxyImpl {
    /**
     * Initialize a new instance of the class ResourceGuardProxy class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns ResourceGuardProxy under vault and with the name referenced in request
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, resourceGuardProxyName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, resourceGuardProxyName, options }, getOperationSpec);
    }
    /**
     * Add or Update ResourceGuardProxy under vault
     * Secures vault critical operations
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    put(vaultName, resourceGroupName, resourceGuardProxyName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            resourceGuardProxyName,
            parameters,
            options
        }, putOperationSpec);
    }
    /**
     * Delete ResourceGuardProxy under vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param options The options parameters.
     */
    delete(vaultName, resourceGroupName, resourceGuardProxyName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, resourceGuardProxyName, options }, deleteOperationSpec);
    }
    /**
     * Secures delete ResourceGuardProxy operations.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    unlockDelete(vaultName, resourceGroupName, resourceGuardProxyName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            resourceGuardProxyName,
            parameters,
            options
        }, unlockDeleteOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceGuardProxyBaseResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        resourceGuardProxyName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ResourceGuardProxyBaseResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters20,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        resourceGuardProxyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        resourceGuardProxyName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const unlockDeleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}/unlockDelete",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: UnlockDeleteResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters21,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        resourceGuardProxyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class RecoveryServicesBackupClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the RecoveryServicesBackupClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription Id.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-recoveryservicesbackup/11.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-04-01";
        this.backupResourceStorageConfigsNonCRR = new BackupResourceStorageConfigsNonCRRImpl(this);
        this.protectionIntentOperations = new ProtectionIntentOperationsImpl(this);
        this.backupStatus = new BackupStatusImpl(this);
        this.featureSupport = new FeatureSupportImpl(this);
        this.backupProtectionIntent = new BackupProtectionIntentImpl(this);
        this.backupUsageSummaries = new BackupUsageSummariesImpl(this);
        this.operations = new OperationsImpl(this);
        this.backupResourceVaultConfigs = new BackupResourceVaultConfigsImpl(this);
        this.backupResourceEncryptionConfigs = new BackupResourceEncryptionConfigsImpl(this);
        this.privateEndpointConnectionOperations = new PrivateEndpointConnectionOperationsImpl(this);
        this.privateEndpointOperations = new PrivateEndpointOperationsImpl(this);
        this.bMSPrepareDataMoveOperationResult = new BMSPrepareDataMoveOperationResultImpl(this);
        this.protectedItems = new ProtectedItemsImpl(this);
        this.protectedItemOperationResults = new ProtectedItemOperationResultsImpl(this);
        this.recoveryPoints = new RecoveryPointsImpl(this);
        this.restores = new RestoresImpl(this);
        this.backupPolicies = new BackupPoliciesImpl(this);
        this.protectionPolicies = new ProtectionPoliciesImpl(this);
        this.protectionPolicyOperationResults = new ProtectionPolicyOperationResultsImpl(this);
        this.backupJobs = new BackupJobsImpl(this);
        this.jobDetails = new JobDetailsImpl(this);
        this.jobCancellations = new JobCancellationsImpl(this);
        this.jobOperationResults = new JobOperationResultsImpl(this);
        this.exportJobsOperationResults = new ExportJobsOperationResultsImpl(this);
        this.jobs = new JobsImpl(this);
        this.backupProtectedItems = new BackupProtectedItemsImpl(this);
        this.operation = new OperationImpl(this);
        this.validateOperation = new ValidateOperationImpl(this);
        this.validateOperationResults = new ValidateOperationResultsImpl(this);
        this.validateOperationStatuses = new ValidateOperationStatusesImpl(this);
        this.backupEngines = new BackupEnginesImpl(this);
        this.protectionContainerRefreshOperationResults = new ProtectionContainerRefreshOperationResultsImpl(this);
        this.protectableContainers = new ProtectableContainersImpl(this);
        this.protectionContainers = new ProtectionContainersImpl(this);
        this.backupWorkloadItems = new BackupWorkloadItemsImpl(this);
        this.protectionContainerOperationResults = new ProtectionContainerOperationResultsImpl(this);
        this.backups = new BackupsImpl(this);
        this.protectedItemOperationStatuses = new ProtectedItemOperationStatusesImpl(this);
        this.itemLevelRecoveryConnections = new ItemLevelRecoveryConnectionsImpl(this);
        this.backupOperationResults = new BackupOperationResultsImpl(this);
        this.backupOperationStatuses = new BackupOperationStatusesImpl(this);
        this.protectionPolicyOperationStatuses = new ProtectionPolicyOperationStatusesImpl(this);
        this.backupProtectableItems = new BackupProtectableItemsImpl(this);
        this.backupProtectionContainers = new BackupProtectionContainersImpl(this);
        this.deletedProtectionContainers = new DeletedProtectionContainersImpl(this);
        this.securityPINs = new SecurityPINsImpl(this);
        this.recoveryPointsRecommendedForMove = new RecoveryPointsRecommendedForMoveImpl(this);
        this.resourceGuardProxies = new ResourceGuardProxiesImpl(this);
        this.resourceGuardProxy = new ResourceGuardProxyImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Fetches operation status for data move operation on vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationStatus(vaultName, resourceGroupName, operationId, options) {
        return this.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationStatusOperationSpec);
    }
    /**
     * Prepares source vault for Data Move operation
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Prepare data move request
     * @param options The options parameters.
     */
    beginBMSPrepareDataMove(vaultName, resourceGroupName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { vaultName, resourceGroupName, parameters, options },
                spec: bMSPrepareDataMoveOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Prepares source vault for Data Move operation
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Prepare data move request
     * @param options The options parameters.
     */
    beginBMSPrepareDataMoveAndWait(vaultName, resourceGroupName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginBMSPrepareDataMove(vaultName, resourceGroupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers Data Move Operation on target vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Trigger data move request
     * @param options The options parameters.
     */
    beginBMSTriggerDataMove(vaultName, resourceGroupName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { vaultName, resourceGroupName, parameters, options },
                spec: bMSTriggerDataMoveOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Triggers Data Move Operation on target vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Trigger data move request
     * @param options The options parameters.
     */
    beginBMSTriggerDataMoveAndWait(vaultName, resourceGroupName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginBMSTriggerDataMove(vaultName, resourceGroupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Move recovery point from one datastore to another store.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param recoveryPointId
     * @param parameters Move Resource Across Tiers Request
     * @param options The options parameters.
     */
    beginMoveRecoveryPoint(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    vaultName,
                    resourceGroupName,
                    fabricName,
                    containerName,
                    protectedItemName,
                    recoveryPointId,
                    parameters,
                    options
                },
                spec: moveRecoveryPointOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Move recovery point from one datastore to another store.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param recoveryPointId
     * @param parameters Move Resource Across Tiers Request
     * @param options The options parameters.
     */
    beginMoveRecoveryPointAndWait(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMoveRecoveryPoint(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/operationStatus/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer
};
const bMSPrepareDataMoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/prepareDataMove",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const bMSTriggerDataMoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/triggerDataMove",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: NewErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const moveRecoveryPointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/move",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        vaultName,
        resourceGroupName,
        subscriptionId,
        fabricName,
        containerName,
        protectedItemName,
        recoveryPointId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

exports.RecoveryServicesBackupClient = RecoveryServicesBackupClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
