/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { RecoveryServicesBackupClient } from "../src/recoveryServicesBackupClient";
import { RecoveryServicesClient } from "@azure/arm-recoveryservices";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("RecoveryServicesBackup test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let rsclient;
    let location;
    let resourceGroup;
    let resourcename;
    let vaultsname;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new RecoveryServicesBackupClient(credential, subscriptionId, recorder.configureClientOptions({}));
            rsclient = new RecoveryServicesClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "czwjstest";
            resourcename = "resourcetest";
            vaultsname = "vaultstest";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("dependence create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield rsclient.vaults.beginCreateOrUpdateAndWait(resourceGroup, vaultsname, {
                identity: { type: "SystemAssigned" },
                location,
                properties: { publicNetworkAccess: "Enabled" },
                sku: { name: "Standard" }
            }, testPollingOptions);
            assert.equal(res.name, vaultsname);
        });
    });
    it("protectionPolicies create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.protectionPolicies.createOrUpdate(vaultsname, resourceGroup, resourcename, {
                properties: {
                    "backupManagementType": "AzureIaasVM",
                    "policyType": "V1",
                    "instantRPDetails": {},
                    "schedulePolicy": {
                        "schedulePolicyType": "SimpleSchedulePolicy",
                        "scheduleRunFrequency": "Daily",
                        "scheduleRunTimes": [
                            new Date("2023-03-17T18:00:00Z")
                        ],
                        "scheduleWeeklyFrequency": 0
                    },
                    "retentionPolicy": {
                        "retentionPolicyType": "LongTermRetentionPolicy",
                        "dailySchedule": {
                            "retentionTimes": [
                                new Date("2023-03-17T18:00:00Z")
                            ],
                            "retentionDuration": {
                                "count": 180,
                                "durationType": "Days"
                            }
                        }
                    },
                    "tieringPolicy": {
                        "ArchivedRP": {
                            "tieringMode": "DoNotTier",
                            "duration": 0,
                            "durationType": "Invalid"
                        }
                    },
                    "instantRpRetentionRangeInDays": 2,
                    "timeZone": "UTC",
                    "protectedItemsCount": 0
                }
            });
            assert.equal(res.name, resourcename);
        });
    });
    it("protectionPolicies get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.protectionPolicies.get(vaultsname, resourceGroup, resourcename);
            assert.equal(res.name, resourcename);
        });
    });
    it("protectionPolicies delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.protectionPolicies.beginDeleteAndWait(vaultsname, resourceGroup, resourcename);
        });
    });
    it("dependence delete test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield rsclient.vaults.delete(resourceGroup, vaultsname);
            try {
                for (var _d = true, _e = __asyncValues(rsclient.vaults.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=recoveryservicesbackup_operations_test.spec.js.map