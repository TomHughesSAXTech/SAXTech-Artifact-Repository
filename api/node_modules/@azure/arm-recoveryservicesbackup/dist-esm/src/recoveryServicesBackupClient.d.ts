import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { BackupResourceStorageConfigsNonCRR, ProtectionIntentOperations, BackupStatus, FeatureSupport, BackupProtectionIntent, BackupUsageSummaries, Operations, BackupResourceVaultConfigs, BackupResourceEncryptionConfigs, PrivateEndpointConnectionOperations, PrivateEndpointOperations, BMSPrepareDataMoveOperationResult, ProtectedItems, ProtectedItemOperationResults, RecoveryPoints, Restores, BackupPolicies, ProtectionPolicies, ProtectionPolicyOperationResults, BackupJobs, JobDetails, JobCancellations, JobOperationResults, ExportJobsOperationResults, Jobs, BackupProtectedItems, Operation, ValidateOperation, ValidateOperationResults, ValidateOperationStatuses, BackupEngines, ProtectionContainerRefreshOperationResults, ProtectableContainers, ProtectionContainers, BackupWorkloadItems, ProtectionContainerOperationResults, Backups, ProtectedItemOperationStatuses, ItemLevelRecoveryConnections, BackupOperationResults, BackupOperationStatuses, ProtectionPolicyOperationStatuses, BackupProtectableItems, BackupProtectionContainers, DeletedProtectionContainers, SecurityPINs, RecoveryPointsRecommendedForMove, ResourceGuardProxies, ResourceGuardProxy } from "./operationsInterfaces";
import { RecoveryServicesBackupClientOptionalParams, GetOperationStatusOptionalParams, GetOperationStatusResponse, PrepareDataMoveRequest, BMSPrepareDataMoveOptionalParams, TriggerDataMoveRequest, BMSTriggerDataMoveOptionalParams, MoveRPAcrossTiersRequest, MoveRecoveryPointOptionalParams } from "./models";
export declare class RecoveryServicesBackupClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the RecoveryServicesBackupClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription Id.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: RecoveryServicesBackupClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Fetches operation status for data move operation on vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationStatus(vaultName: string, resourceGroupName: string, operationId: string, options?: GetOperationStatusOptionalParams): Promise<GetOperationStatusResponse>;
    /**
     * Prepares source vault for Data Move operation
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Prepare data move request
     * @param options The options parameters.
     */
    beginBMSPrepareDataMove(vaultName: string, resourceGroupName: string, parameters: PrepareDataMoveRequest, options?: BMSPrepareDataMoveOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Prepares source vault for Data Move operation
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Prepare data move request
     * @param options The options parameters.
     */
    beginBMSPrepareDataMoveAndWait(vaultName: string, resourceGroupName: string, parameters: PrepareDataMoveRequest, options?: BMSPrepareDataMoveOptionalParams): Promise<void>;
    /**
     * Triggers Data Move Operation on target vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Trigger data move request
     * @param options The options parameters.
     */
    beginBMSTriggerDataMove(vaultName: string, resourceGroupName: string, parameters: TriggerDataMoveRequest, options?: BMSTriggerDataMoveOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Triggers Data Move Operation on target vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Trigger data move request
     * @param options The options parameters.
     */
    beginBMSTriggerDataMoveAndWait(vaultName: string, resourceGroupName: string, parameters: TriggerDataMoveRequest, options?: BMSTriggerDataMoveOptionalParams): Promise<void>;
    /**
     * Move recovery point from one datastore to another store.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param recoveryPointId
     * @param parameters Move Resource Across Tiers Request
     * @param options The options parameters.
     */
    beginMoveRecoveryPoint(vaultName: string, resourceGroupName: string, fabricName: string, containerName: string, protectedItemName: string, recoveryPointId: string, parameters: MoveRPAcrossTiersRequest, options?: MoveRecoveryPointOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Move recovery point from one datastore to another store.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param recoveryPointId
     * @param parameters Move Resource Across Tiers Request
     * @param options The options parameters.
     */
    beginMoveRecoveryPointAndWait(vaultName: string, resourceGroupName: string, fabricName: string, containerName: string, protectedItemName: string, recoveryPointId: string, parameters: MoveRPAcrossTiersRequest, options?: MoveRecoveryPointOptionalParams): Promise<void>;
    backupResourceStorageConfigsNonCRR: BackupResourceStorageConfigsNonCRR;
    protectionIntentOperations: ProtectionIntentOperations;
    backupStatus: BackupStatus;
    featureSupport: FeatureSupport;
    backupProtectionIntent: BackupProtectionIntent;
    backupUsageSummaries: BackupUsageSummaries;
    operations: Operations;
    backupResourceVaultConfigs: BackupResourceVaultConfigs;
    backupResourceEncryptionConfigs: BackupResourceEncryptionConfigs;
    privateEndpointConnectionOperations: PrivateEndpointConnectionOperations;
    privateEndpointOperations: PrivateEndpointOperations;
    bMSPrepareDataMoveOperationResult: BMSPrepareDataMoveOperationResult;
    protectedItems: ProtectedItems;
    protectedItemOperationResults: ProtectedItemOperationResults;
    recoveryPoints: RecoveryPoints;
    restores: Restores;
    backupPolicies: BackupPolicies;
    protectionPolicies: ProtectionPolicies;
    protectionPolicyOperationResults: ProtectionPolicyOperationResults;
    backupJobs: BackupJobs;
    jobDetails: JobDetails;
    jobCancellations: JobCancellations;
    jobOperationResults: JobOperationResults;
    exportJobsOperationResults: ExportJobsOperationResults;
    jobs: Jobs;
    backupProtectedItems: BackupProtectedItems;
    operation: Operation;
    validateOperation: ValidateOperation;
    validateOperationResults: ValidateOperationResults;
    validateOperationStatuses: ValidateOperationStatuses;
    backupEngines: BackupEngines;
    protectionContainerRefreshOperationResults: ProtectionContainerRefreshOperationResults;
    protectableContainers: ProtectableContainers;
    protectionContainers: ProtectionContainers;
    backupWorkloadItems: BackupWorkloadItems;
    protectionContainerOperationResults: ProtectionContainerOperationResults;
    backups: Backups;
    protectedItemOperationStatuses: ProtectedItemOperationStatuses;
    itemLevelRecoveryConnections: ItemLevelRecoveryConnections;
    backupOperationResults: BackupOperationResults;
    backupOperationStatuses: BackupOperationStatuses;
    protectionPolicyOperationStatuses: ProtectionPolicyOperationStatuses;
    backupProtectableItems: BackupProtectableItems;
    backupProtectionContainers: BackupProtectionContainers;
    deletedProtectionContainers: DeletedProtectionContainers;
    securityPINs: SecurityPINs;
    recoveryPointsRecommendedForMove: RecoveryPointsRecommendedForMove;
    resourceGuardProxies: ResourceGuardProxies;
    resourceGuardProxy: ResourceGuardProxy;
}
//# sourceMappingURL=recoveryServicesBackupClient.d.ts.map