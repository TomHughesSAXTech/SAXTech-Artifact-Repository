/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "./lroImpl";
import { BackupResourceStorageConfigsNonCRRImpl, ProtectionIntentOperationsImpl, BackupStatusImpl, FeatureSupportImpl, BackupProtectionIntentImpl, BackupUsageSummariesImpl, OperationsImpl, BackupResourceVaultConfigsImpl, BackupResourceEncryptionConfigsImpl, PrivateEndpointConnectionOperationsImpl, PrivateEndpointOperationsImpl, BMSPrepareDataMoveOperationResultImpl, ProtectedItemsImpl, ProtectedItemOperationResultsImpl, RecoveryPointsImpl, RestoresImpl, BackupPoliciesImpl, ProtectionPoliciesImpl, ProtectionPolicyOperationResultsImpl, BackupJobsImpl, JobDetailsImpl, JobCancellationsImpl, JobOperationResultsImpl, ExportJobsOperationResultsImpl, JobsImpl, BackupProtectedItemsImpl, OperationImpl, ValidateOperationImpl, ValidateOperationResultsImpl, ValidateOperationStatusesImpl, BackupEnginesImpl, ProtectionContainerRefreshOperationResultsImpl, ProtectableContainersImpl, ProtectionContainersImpl, BackupWorkloadItemsImpl, ProtectionContainerOperationResultsImpl, BackupsImpl, ProtectedItemOperationStatusesImpl, ItemLevelRecoveryConnectionsImpl, BackupOperationResultsImpl, BackupOperationStatusesImpl, ProtectionPolicyOperationStatusesImpl, BackupProtectableItemsImpl, BackupProtectionContainersImpl, DeletedProtectionContainersImpl, SecurityPINsImpl, RecoveryPointsRecommendedForMoveImpl, ResourceGuardProxiesImpl, ResourceGuardProxyImpl } from "./operations";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
export class RecoveryServicesBackupClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the RecoveryServicesBackupClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription Id.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-recoveryservicesbackup/11.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-04-01";
        this.backupResourceStorageConfigsNonCRR = new BackupResourceStorageConfigsNonCRRImpl(this);
        this.protectionIntentOperations = new ProtectionIntentOperationsImpl(this);
        this.backupStatus = new BackupStatusImpl(this);
        this.featureSupport = new FeatureSupportImpl(this);
        this.backupProtectionIntent = new BackupProtectionIntentImpl(this);
        this.backupUsageSummaries = new BackupUsageSummariesImpl(this);
        this.operations = new OperationsImpl(this);
        this.backupResourceVaultConfigs = new BackupResourceVaultConfigsImpl(this);
        this.backupResourceEncryptionConfigs = new BackupResourceEncryptionConfigsImpl(this);
        this.privateEndpointConnectionOperations = new PrivateEndpointConnectionOperationsImpl(this);
        this.privateEndpointOperations = new PrivateEndpointOperationsImpl(this);
        this.bMSPrepareDataMoveOperationResult = new BMSPrepareDataMoveOperationResultImpl(this);
        this.protectedItems = new ProtectedItemsImpl(this);
        this.protectedItemOperationResults = new ProtectedItemOperationResultsImpl(this);
        this.recoveryPoints = new RecoveryPointsImpl(this);
        this.restores = new RestoresImpl(this);
        this.backupPolicies = new BackupPoliciesImpl(this);
        this.protectionPolicies = new ProtectionPoliciesImpl(this);
        this.protectionPolicyOperationResults = new ProtectionPolicyOperationResultsImpl(this);
        this.backupJobs = new BackupJobsImpl(this);
        this.jobDetails = new JobDetailsImpl(this);
        this.jobCancellations = new JobCancellationsImpl(this);
        this.jobOperationResults = new JobOperationResultsImpl(this);
        this.exportJobsOperationResults = new ExportJobsOperationResultsImpl(this);
        this.jobs = new JobsImpl(this);
        this.backupProtectedItems = new BackupProtectedItemsImpl(this);
        this.operation = new OperationImpl(this);
        this.validateOperation = new ValidateOperationImpl(this);
        this.validateOperationResults = new ValidateOperationResultsImpl(this);
        this.validateOperationStatuses = new ValidateOperationStatusesImpl(this);
        this.backupEngines = new BackupEnginesImpl(this);
        this.protectionContainerRefreshOperationResults = new ProtectionContainerRefreshOperationResultsImpl(this);
        this.protectableContainers = new ProtectableContainersImpl(this);
        this.protectionContainers = new ProtectionContainersImpl(this);
        this.backupWorkloadItems = new BackupWorkloadItemsImpl(this);
        this.protectionContainerOperationResults = new ProtectionContainerOperationResultsImpl(this);
        this.backups = new BackupsImpl(this);
        this.protectedItemOperationStatuses = new ProtectedItemOperationStatusesImpl(this);
        this.itemLevelRecoveryConnections = new ItemLevelRecoveryConnectionsImpl(this);
        this.backupOperationResults = new BackupOperationResultsImpl(this);
        this.backupOperationStatuses = new BackupOperationStatusesImpl(this);
        this.protectionPolicyOperationStatuses = new ProtectionPolicyOperationStatusesImpl(this);
        this.backupProtectableItems = new BackupProtectableItemsImpl(this);
        this.backupProtectionContainers = new BackupProtectionContainersImpl(this);
        this.deletedProtectionContainers = new DeletedProtectionContainersImpl(this);
        this.securityPINs = new SecurityPINsImpl(this);
        this.recoveryPointsRecommendedForMove = new RecoveryPointsRecommendedForMoveImpl(this);
        this.resourceGuardProxies = new ResourceGuardProxiesImpl(this);
        this.resourceGuardProxy = new ResourceGuardProxyImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return __awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Fetches operation status for data move operation on vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationStatus(vaultName, resourceGroupName, operationId, options) {
        return this.sendOperationRequest({ vaultName, resourceGroupName, operationId, options }, getOperationStatusOperationSpec);
    }
    /**
     * Prepares source vault for Data Move operation
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Prepare data move request
     * @param options The options parameters.
     */
    beginBMSPrepareDataMove(vaultName, resourceGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { vaultName, resourceGroupName, parameters, options },
                spec: bMSPrepareDataMoveOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Prepares source vault for Data Move operation
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Prepare data move request
     * @param options The options parameters.
     */
    beginBMSPrepareDataMoveAndWait(vaultName, resourceGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginBMSPrepareDataMove(vaultName, resourceGroupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers Data Move Operation on target vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Trigger data move request
     * @param options The options parameters.
     */
    beginBMSTriggerDataMove(vaultName, resourceGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { vaultName, resourceGroupName, parameters, options },
                spec: bMSTriggerDataMoveOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Triggers Data Move Operation on target vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param parameters Trigger data move request
     * @param options The options parameters.
     */
    beginBMSTriggerDataMoveAndWait(vaultName, resourceGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginBMSTriggerDataMove(vaultName, resourceGroupName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Move recovery point from one datastore to another store.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param recoveryPointId
     * @param parameters Move Resource Across Tiers Request
     * @param options The options parameters.
     */
    beginMoveRecoveryPoint(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    vaultName,
                    resourceGroupName,
                    fabricName,
                    containerName,
                    protectedItemName,
                    recoveryPointId,
                    parameters,
                    options
                },
                spec: moveRecoveryPointOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Move recovery point from one datastore to another store.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName
     * @param containerName
     * @param protectedItemName
     * @param recoveryPointId
     * @param parameters Move Resource Across Tiers Request
     * @param options The options parameters.
     */
    beginMoveRecoveryPointAndWait(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMoveRecoveryPoint(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/operationStatus/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.NewErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const bMSPrepareDataMoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/prepareDataMove",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.NewErrorResponse
        }
    },
    requestBody: Parameters.parameters8,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const bMSTriggerDataMoveOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/triggerDataMove",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.NewErrorResponse
        }
    },
    requestBody: Parameters.parameters9,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const moveRecoveryPointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/move",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters10,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.fabricName,
        Parameters.containerName,
        Parameters.protectedItemName,
        Parameters.recoveryPointId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=recoveryServicesBackupClient.js.map