/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing ResourceGuardProxy operations. */
export class ResourceGuardProxyImpl {
    /**
     * Initialize a new instance of the class ResourceGuardProxy class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns ResourceGuardProxy under vault and with the name referenced in request
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param options The options parameters.
     */
    get(vaultName, resourceGroupName, resourceGuardProxyName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, resourceGuardProxyName, options }, getOperationSpec);
    }
    /**
     * Add or Update ResourceGuardProxy under vault
     * Secures vault critical operations
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    put(vaultName, resourceGroupName, resourceGuardProxyName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            resourceGuardProxyName,
            parameters,
            options
        }, putOperationSpec);
    }
    /**
     * Delete ResourceGuardProxy under vault
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param options The options parameters.
     */
    delete(vaultName, resourceGroupName, resourceGuardProxyName, options) {
        return this.client.sendOperationRequest({ vaultName, resourceGroupName, resourceGuardProxyName, options }, deleteOperationSpec);
    }
    /**
     * Secures delete ResourceGuardProxy operations.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceGuardProxyName
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    unlockDelete(vaultName, resourceGroupName, resourceGuardProxyName, parameters, options) {
        return this.client.sendOperationRequest({
            vaultName,
            resourceGroupName,
            resourceGuardProxyName,
            parameters,
            options
        }, unlockDeleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardProxyBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceGuardProxyName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardProxyBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters20,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceGuardProxyName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceGuardProxyName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const unlockDeleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupResourceGuardProxies/{resourceGuardProxyName}/unlockDelete",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.UnlockDeleteResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters21,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.vaultName,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceGuardProxyName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=resourceGuardProxy.js.map