import { ProtectedItemOperationStatuses } from "../operationsInterfaces";
import { RecoveryServicesBackupClient } from "../recoveryServicesBackupClient";
import { ProtectedItemOperationStatusesGetOptionalParams, ProtectedItemOperationStatusesGetResponse } from "../models";
/** Class containing ProtectedItemOperationStatuses operations. */
export declare class ProtectedItemOperationStatusesImpl implements ProtectedItemOperationStatuses {
    private readonly client;
    /**
     * Initialize a new instance of the class ProtectedItemOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client: RecoveryServicesBackupClient);
    /**
     * Fetches the status of an operation such as triggering a backup, restore. The status can be in
     * progress, completed
     * or failed. You can refer to the OperationStatus enum for all the possible states of the operation.
     * Some operations
     * create jobs. This method returns the list of jobs associated with the operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name associated with the backup item.
     * @param containerName Container name associated with the backup item.
     * @param protectedItemName Backup item name whose details are to be fetched.
     * @param operationId OperationID represents the operation whose status needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName: string, resourceGroupName: string, fabricName: string, containerName: string, protectedItemName: string, operationId: string, options?: ProtectedItemOperationStatusesGetOptionalParams): Promise<ProtectedItemOperationStatusesGetResponse>;
}
//# sourceMappingURL=protectedItemOperationStatuses.d.ts.map