import { ProtectionPolicyOperationStatuses } from "../operationsInterfaces";
import { RecoveryServicesBackupClient } from "../recoveryServicesBackupClient";
import { ProtectionPolicyOperationStatusesGetOptionalParams, ProtectionPolicyOperationStatusesGetResponse } from "../models";
/** Class containing ProtectionPolicyOperationStatuses operations. */
export declare class ProtectionPolicyOperationStatusesImpl implements ProtectionPolicyOperationStatuses {
    private readonly client;
    /**
     * Initialize a new instance of the class ProtectionPolicyOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client: RecoveryServicesBackupClient);
    /**
     * Provides the status of the asynchronous operations like backup, restore. The status can be in
     * progress, completed
     * or failed. You can refer to the Operation Status enum for all the possible states of an operation.
     * Some operations
     * create jobs. This method returns the list of jobs associated with operation.
     * @param vaultName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Backup policy name whose operation's status needs to be fetched.
     * @param operationId Operation ID which represents an operation whose status needs to be fetched.
     * @param options The options parameters.
     */
    get(vaultName: string, resourceGroupName: string, policyName: string, operationId: string, options?: ProtectionPolicyOperationStatusesGetOptionalParams): Promise<ProtectionPolicyOperationStatusesGetResponse>;
}
//# sourceMappingURL=protectionPolicyOperationStatuses.d.ts.map