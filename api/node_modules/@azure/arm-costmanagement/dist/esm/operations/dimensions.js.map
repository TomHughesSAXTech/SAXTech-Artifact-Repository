{"version":3,"file":"dimensions.js","sourceRoot":"","sources":["../../../src/operations/dimensions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Dimensions } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  Dimension,\n  DimensionsListOptionalParams,\n  DimensionsListResponse,\n  ExternalCloudProviderType,\n  DimensionsByExternalCloudProviderTypeOptionalParams,\n  DimensionsByExternalCloudProviderTypeResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Dimensions operations. */\nexport class DimensionsImpl implements Dimensions {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class Dimensions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the dimensions by the defined scope.\n   * @param scope The scope associated with dimension operations. This includes\n   *              '/subscriptions/{subscriptionId}/' for subscription scope,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'\n   *              for Management Group scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for billingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'\n   *              for invoiceSection scope, and\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for\n   *              partners.\n   * @param options The options parameters.\n   */\n  public list(\n    scope: string,\n    options?: DimensionsListOptionalParams\n  ): PagedAsyncIterableIterator<Dimension> {\n    const iter = this.listPagingAll(scope, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(scope, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    scope: string,\n    options?: DimensionsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Dimension[]> {\n    let result: DimensionsListResponse;\n    result = await this._list(scope, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    scope: string,\n    options?: DimensionsListOptionalParams\n  ): AsyncIterableIterator<Dimension> {\n    for await (const page of this.listPagingPage(scope, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the dimensions by the external cloud provider type.\n   * @param externalCloudProviderType The external cloud provider type associated with dimension/query\n   *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'\n   *                                  for consolidated account.\n   * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or\n   *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.\n   * @param options The options parameters.\n   */\n  public listByExternalCloudProviderType(\n    externalCloudProviderType: ExternalCloudProviderType,\n    externalCloudProviderId: string,\n    options?: DimensionsByExternalCloudProviderTypeOptionalParams\n  ): PagedAsyncIterableIterator<Dimension> {\n    const iter = this.byExternalCloudProviderTypePagingAll(\n      externalCloudProviderType,\n      externalCloudProviderId,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.byExternalCloudProviderTypePagingPage(\n          externalCloudProviderType,\n          externalCloudProviderId,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *byExternalCloudProviderTypePagingPage(\n    externalCloudProviderType: ExternalCloudProviderType,\n    externalCloudProviderId: string,\n    options?: DimensionsByExternalCloudProviderTypeOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Dimension[]> {\n    let result: DimensionsByExternalCloudProviderTypeResponse;\n    result = await this._byExternalCloudProviderType(\n      externalCloudProviderType,\n      externalCloudProviderId,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *byExternalCloudProviderTypePagingAll(\n    externalCloudProviderType: ExternalCloudProviderType,\n    externalCloudProviderId: string,\n    options?: DimensionsByExternalCloudProviderTypeOptionalParams\n  ): AsyncIterableIterator<Dimension> {\n    for await (const page of this.byExternalCloudProviderTypePagingPage(\n      externalCloudProviderType,\n      externalCloudProviderId,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the dimensions by the defined scope.\n   * @param scope The scope associated with dimension operations. This includes\n   *              '/subscriptions/{subscriptionId}/' for subscription scope,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'\n   *              for Management Group scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for billingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'\n   *              for invoiceSection scope, and\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for\n   *              partners.\n   * @param options The options parameters.\n   */\n  private _list(\n    scope: string,\n    options?: DimensionsListOptionalParams\n  ): Promise<DimensionsListResponse> {\n    return this.client.sendOperationRequest(\n      { scope, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Lists the dimensions by the external cloud provider type.\n   * @param externalCloudProviderType The external cloud provider type associated with dimension/query\n   *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'\n   *                                  for consolidated account.\n   * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or\n   *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.\n   * @param options The options parameters.\n   */\n  private _byExternalCloudProviderType(\n    externalCloudProviderType: ExternalCloudProviderType,\n    externalCloudProviderId: string,\n    options?: DimensionsByExternalCloudProviderTypeOptionalParams\n  ): Promise<DimensionsByExternalCloudProviderTypeResponse> {\n    return this.client.sendOperationRequest(\n      { externalCloudProviderType, externalCloudProviderId, options },\n      byExternalCloudProviderTypeOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/dimensions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DimensionsListResult\n    },\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.filter,\n    Parameters.expand,\n    Parameters.skiptoken,\n    Parameters.top\n  ],\n  urlParameters: [Parameters.$host, Parameters.scope1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst byExternalCloudProviderTypeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/dimensions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DimensionsListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.filter,\n    Parameters.expand,\n    Parameters.skiptoken,\n    Parameters.top\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.externalCloudProviderType,\n    Parameters.externalCloudProviderId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}