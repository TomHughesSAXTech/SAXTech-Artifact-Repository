{"version":3,"file":"generateDetailedCostReportOperationResults.js","sourceRoot":"","sources":["../../../src/operations/generateDetailedCostReportOperationResults.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { GenerateDetailedCostReportOperationResults } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  GenerateDetailedCostReportOperationResultsGetOptionalParams,\n  GenerateDetailedCostReportOperationResultsGetResponse\n} from \"../models/index.js\";\n\n/** Class containing GenerateDetailedCostReportOperationResults operations. */\nexport class GenerateDetailedCostReportOperationResultsImpl\n  implements GenerateDetailedCostReportOperationResults {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class GenerateDetailedCostReportOperationResults class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the result of the specified operation. The link with this operationId is provided as a response\n   * header of the initial request.\n   * @param operationId The target operation Id.\n   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing\n   *              scopes. For details, see https://aka.ms/costmgmt/scopes.\n   * @param options The options parameters.\n   */\n  async beginGet(\n    operationId: string,\n    scope: string,\n    options?: GenerateDetailedCostReportOperationResultsGetOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GenerateDetailedCostReportOperationResultsGetResponse>,\n      GenerateDetailedCostReportOperationResultsGetResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GenerateDetailedCostReportOperationResultsGetResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { operationId, scope, options },\n      spec: getOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GenerateDetailedCostReportOperationResultsGetResponse,\n      OperationState<GenerateDetailedCostReportOperationResultsGetResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Gets the result of the specified operation. The link with this operationId is provided as a response\n   * header of the initial request.\n   * @param operationId The target operation Id.\n   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing\n   *              scopes. For details, see https://aka.ms/costmgmt/scopes.\n   * @param options The options parameters.\n   */\n  async beginGetAndWait(\n    operationId: string,\n    scope: string,\n    options?: GenerateDetailedCostReportOperationResultsGetOptionalParams\n  ): Promise<GenerateDetailedCostReportOperationResultsGetResponse> {\n    const poller = await this.beginGet(operationId, scope, options);\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.CostManagement/operationResults/{operationId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult\n    },\n    201: {\n      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult\n    },\n    202: {\n      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult\n    },\n    204: {\n      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.operationId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}