{"version":3,"file":"generateCostDetailsReport.js","sourceRoot":"","sources":["../../../src/operations/generateCostDetailsReport.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAGH,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAEtD,8CAIyB;AACzB,8CAA8C;AAS9C,6DAA6D;AAC7D,MAAa,6BAA6B;IAEvB,MAAM,CAAuB;IAE9C;;;OAGG;IACH,YAAY,MAA4B;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,KAAK,CAAC,oBAAoB,CACxB,KAAa,EACb,UAAsD,EACtD,OAAgE;QAOhE,MAAM,mBAAmB,GAAG,KAAK,EAC/B,IAAmC,EACnC,IAA8B,EAC6B,EAAE;YAC7D,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC;QACF,MAAM,eAAe,GAAG,KAAK,EAC3B,IAAmC,EACnC,IAA8B,EAC9B,EAAE;YACF,IAAI,kBAAkB,GAEN,SAAS,CAAC;YAC1B,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC;YAClD,MAAM,QAAQ,GAAmC,CAC/C,WAA6C,EAC7C,YAAqB,EACrB,EAAE;gBACF,kBAAkB,GAAG,WAAW,CAAC;gBACjC,gBAAgB,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAChD,CAAC,CAAC;YACF,MAAM,WAAW,GAAG;gBAClB,GAAG,IAAI;gBACP,OAAO,EAAE;oBACP,GAAG,IAAI,CAAC,OAAO;oBACf,UAAU,EAAE,QAAQ;iBACrB;aACF,CAAC;YACF,MAAM,YAAY,GAAG,MAAM,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAClE,OAAO;gBACL,YAAY;gBACZ,WAAW,EAAE;oBACX,UAAU,EAAE,kBAAmB,CAAC,MAAM;oBACtC,IAAI,EAAE,kBAAmB,CAAC,UAAU;oBACpC,OAAO,EAAE,kBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE;iBAC9C;aACF,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,GAAG,GAAG,IAAA,0BAAa,EAAC;YACxB,eAAe;YACf,IAAI,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE;YACpC,IAAI,EAAE,4BAA4B;SACnC,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,IAAA,2BAAgB,EAGnC,GAAG,EAAE;YACL,WAAW,EAAE,OAAO,EAAE,UAAU;YAChC,YAAY,EAAE,OAAO,EAAE,kBAAkB;YACzC,sBAAsB,EAAE,UAAU;SACnC,CAAC,CAAC;QACH,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,KAAK,CAAC,2BAA2B,CAC/B,KAAa,EACb,UAAsD,EACtD,OAAgE;QAEhE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QAC3E,OAAO,MAAM,CAAC,aAAa,EAAE,CAAC;IAChC,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,wBAAwB,CAC5B,KAAa,EACb,WAAmB,EACnB,OAAoE;QAOpE,MAAM,mBAAmB,GAAG,KAAK,EAC/B,IAAmC,EACnC,IAA8B,EACiC,EAAE;YACjE,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC;QACF,MAAM,eAAe,GAAG,KAAK,EAC3B,IAAmC,EACnC,IAA8B,EAC9B,EAAE;YACF,IAAI,kBAAkB,GAEN,SAAS,CAAC;YAC1B,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC;YAClD,MAAM,QAAQ,GAAmC,CAC/C,WAA6C,EAC7C,YAAqB,EACrB,EAAE;gBACF,kBAAkB,GAAG,WAAW,CAAC;gBACjC,gBAAgB,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAChD,CAAC,CAAC;YACF,MAAM,WAAW,GAAG;gBAClB,GAAG,IAAI;gBACP,OAAO,EAAE;oBACP,GAAG,IAAI,CAAC,OAAO;oBACf,UAAU,EAAE,QAAQ;iBACrB;aACF,CAAC;YACF,MAAM,YAAY,GAAG,MAAM,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAClE,OAAO;gBACL,YAAY;gBACZ,WAAW,EAAE;oBACX,UAAU,EAAE,kBAAmB,CAAC,MAAM;oBACtC,IAAI,EAAE,kBAAmB,CAAC,UAAU;oBACpC,OAAO,EAAE,kBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE;iBAC9C;aACF,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,GAAG,GAAG,IAAA,0BAAa,EAAC;YACxB,eAAe;YACf,IAAI,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE;YACrC,IAAI,EAAE,gCAAgC;SACvC,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,IAAA,2BAAgB,EAGnC,GAAG,EAAE;YACL,WAAW,EAAE,OAAO,EAAE,UAAU;YAChC,YAAY,EAAE,OAAO,EAAE,kBAAkB;YACzC,sBAAsB,EAAE,UAAU;SACnC,CAAC,CAAC;QACH,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,+BAA+B,CACnC,KAAa,EACb,WAAmB,EACnB,OAAoE;QAEpE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAChD,KAAK,EACL,WAAW,EACX,OAAO,CACR,CAAC;QACF,OAAO,MAAM,CAAC,aAAa,EAAE,CAAC;IAChC,CAAC;CACF;AAzND,sEAyNC;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,4BAA4B,GAA6B;IAC7D,IAAI,EAAE,uEAAuE;IAC7E,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,sCAAsC;SAC3D;KACF;IACD,WAAW,EAAE,UAAU,CAAC,WAAW;IACnC,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC;IACpD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,gCAAgC,GAA6B;IACjE,IAAI,EACF,uFAAuF;IACzF,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,2BAA2B;SAChD;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC5E,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { GenerateCostDetailsReport } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  GenerateCostDetailsReportRequestDefinition,\n  GenerateCostDetailsReportCreateOperationOptionalParams,\n  GenerateCostDetailsReportCreateOperationResponse,\n  GenerateCostDetailsReportGetOperationResultsOptionalParams,\n  GenerateCostDetailsReportGetOperationResultsResponse\n} from \"../models/index.js\";\n\n/** Class containing GenerateCostDetailsReport operations. */\nexport class GenerateCostDetailsReportImpl\n  implements GenerateCostDetailsReport {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class GenerateCostDetailsReport class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * This API is the replacement for all previously release Usage Details APIs. Request to generate a\n   * cost details report for the provided date range, billing period (Only enterprise customers) or\n   * Invoice Id asynchronously at a certain scope. The initial call to request a report will return a 202\n   * with a 'Location' and 'Retry-After' header. The 'Location' header will provide the endpoint to poll\n   * to get the result of the report generation. The 'Retry-After' provides the duration to wait before\n   * polling for the generated report. A call to poll the report operation will provide a 202 response\n   * with a 'Location' header if the operation is still in progress. Once the report generation operation\n   * completes, the polling endpoint will provide a 200 response along with details on the report blob(s)\n   * that are available for download. The details on the file(s) available for download will be available\n   * in the polling response body. To Understand cost details (formerly known as usage details) fields\n   * found in files ,see\n   * https://learn.microsoft.com/azure/cost-management-billing/automate/understand-usage-details-fields\n   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing\n   *              scopes. For details, see https://aka.ms/costmgmt/scopes.\n   * @param parameters Parameters supplied to the Create cost details operation.\n   * @param options The options parameters.\n   */\n  async beginCreateOperation(\n    scope: string,\n    parameters: GenerateCostDetailsReportRequestDefinition,\n    options?: GenerateCostDetailsReportCreateOperationOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GenerateCostDetailsReportCreateOperationResponse>,\n      GenerateCostDetailsReportCreateOperationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GenerateCostDetailsReportCreateOperationResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { scope, parameters, options },\n      spec: createOperationOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GenerateCostDetailsReportCreateOperationResponse,\n      OperationState<GenerateCostDetailsReportCreateOperationResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * This API is the replacement for all previously release Usage Details APIs. Request to generate a\n   * cost details report for the provided date range, billing period (Only enterprise customers) or\n   * Invoice Id asynchronously at a certain scope. The initial call to request a report will return a 202\n   * with a 'Location' and 'Retry-After' header. The 'Location' header will provide the endpoint to poll\n   * to get the result of the report generation. The 'Retry-After' provides the duration to wait before\n   * polling for the generated report. A call to poll the report operation will provide a 202 response\n   * with a 'Location' header if the operation is still in progress. Once the report generation operation\n   * completes, the polling endpoint will provide a 200 response along with details on the report blob(s)\n   * that are available for download. The details on the file(s) available for download will be available\n   * in the polling response body. To Understand cost details (formerly known as usage details) fields\n   * found in files ,see\n   * https://learn.microsoft.com/azure/cost-management-billing/automate/understand-usage-details-fields\n   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing\n   *              scopes. For details, see https://aka.ms/costmgmt/scopes.\n   * @param parameters Parameters supplied to the Create cost details operation.\n   * @param options The options parameters.\n   */\n  async beginCreateOperationAndWait(\n    scope: string,\n    parameters: GenerateCostDetailsReportRequestDefinition,\n    options?: GenerateCostDetailsReportCreateOperationOptionalParams\n  ): Promise<GenerateCostDetailsReportCreateOperationResponse> {\n    const poller = await this.beginCreateOperation(scope, parameters, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the result of the specified operation. This link is provided in the CostDetails creation request\n   * response Location header.\n   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing\n   *              scopes. For details, see https://aka.ms/costmgmt/scopes.\n   * @param operationId The target operation Id.\n   * @param options The options parameters.\n   */\n  async beginGetOperationResults(\n    scope: string,\n    operationId: string,\n    options?: GenerateCostDetailsReportGetOperationResultsOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GenerateCostDetailsReportGetOperationResultsResponse>,\n      GenerateCostDetailsReportGetOperationResultsResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<GenerateCostDetailsReportGetOperationResultsResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { scope, operationId, options },\n      spec: getOperationResultsOperationSpec\n    });\n    const poller = await createHttpPoller<\n      GenerateCostDetailsReportGetOperationResultsResponse,\n      OperationState<GenerateCostDetailsReportGetOperationResultsResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Get the result of the specified operation. This link is provided in the CostDetails creation request\n   * response Location header.\n   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing\n   *              scopes. For details, see https://aka.ms/costmgmt/scopes.\n   * @param operationId The target operation Id.\n   * @param options The options parameters.\n   */\n  async beginGetOperationResultsAndWait(\n    scope: string,\n    operationId: string,\n    options?: GenerateCostDetailsReportGetOperationResultsOptionalParams\n  ): Promise<GenerateCostDetailsReportGetOperationResultsResponse> {\n    const poller = await this.beginGetOperationResults(\n      scope,\n      operationId,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createOperationOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/generateCostDetailsReport\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    201: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    202: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    204: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    default: {\n      bodyMapper: Mappers.GenerateCostDetailsReportErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters5,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationResultsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.CostManagement/costDetailsOperationResults/{operationId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    201: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    202: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    204: {\n      bodyMapper: Mappers.CostDetailsOperationResults\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.operationId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}