"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceSheetImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/** Class containing PriceSheet operations. */
class PriceSheetImpl {
    client;
    /**
     * Initialize a new instance of the class PriceSheet class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a URL to download the pricesheet for an invoice. The operation is supported for billing
     * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    async beginDownload(billingAccountName, billingProfileName, invoiceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { billingAccountName, billingProfileName, invoiceName, options },
            spec: downloadOperationSpec
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs,
            resourceLocationConfig: "location"
        });
        await poller.poll();
        return poller;
    }
    /**
     * Gets a URL to download the pricesheet for an invoice. The operation is supported for billing
     * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    async beginDownloadAndWait(billingAccountName, billingProfileName, invoiceName, options) {
        const poller = await this.beginDownload(billingAccountName, billingProfileName, invoiceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets a URL to download the current month's pricesheet for a billing profile. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.Due to Azure product growth, the Azure price sheet download experience in this preview
     * version will be updated from a single csv file to a Zip file containing multiple csv files, each
     * with max 200k records.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    async beginDownloadByBillingProfile(billingAccountName, billingProfileName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { billingAccountName, billingProfileName, options },
            spec: downloadByBillingProfileOperationSpec
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs,
            resourceLocationConfig: "location"
        });
        await poller.poll();
        return poller;
    }
    /**
     * Gets a URL to download the current month's pricesheet for a billing profile. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.Due to Azure product growth, the Azure price sheet download experience in this preview
     * version will be updated from a single csv file to a Zip file containing multiple csv files, each
     * with max 200k records.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    async beginDownloadByBillingProfileAndWait(billingAccountName, billingProfileName, options) {
        const poller = await this.beginDownloadByBillingProfile(billingAccountName, billingProfileName, options);
        return poller.pollUntilDone();
    }
}
exports.PriceSheetImpl = PriceSheetImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const downloadOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}/providers/Microsoft.CostManagement/pricesheets/default/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DownloadURL
        },
        201: {
            bodyMapper: Mappers.DownloadURL
        },
        202: {
            bodyMapper: Mappers.DownloadURL
        },
        204: {
            bodyMapper: Mappers.DownloadURL
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const downloadByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.CostManagement/pricesheets/default/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DownloadURL
        },
        201: {
            bodyMapper: Mappers.DownloadURL
        },
        202: {
            bodyMapper: Mappers.DownloadURL
        },
        204: {
            bodyMapper: Mappers.DownloadURL
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=priceSheet.js.map