/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing BenefitUtilizationSummaries operations. */
export class BenefitUtilizationSummariesImpl {
    client;
    /**
     * Initialize a new instance of the class BenefitUtilizationSummaries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists savings plan utilization summaries for the enterprise agreement scope. Supported at grain
     * values: 'Daily' and 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param options The options parameters.
     */
    listByBillingAccountId(billingAccountId, options) {
        const iter = this.listByBillingAccountIdPagingAll(billingAccountId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountIdPagingPage(billingAccountId, options, settings);
            }
        };
    }
    async *listByBillingAccountIdPagingPage(billingAccountId, options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._listByBillingAccountId(billingAccountId, options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            setContinuationToken(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listByBillingAccountIdNext(billingAccountId, continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            setContinuationToken(page, continuationToken);
            yield page;
        }
    }
    async *listByBillingAccountIdPagingAll(billingAccountId, options) {
        for await (const page of this.listByBillingAccountIdPagingPage(billingAccountId, options)) {
            yield* page;
        }
    }
    /**
     * Lists savings plan utilization summaries for billing profile. Supported at grain values: 'Daily' and
     * 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param options The options parameters.
     */
    listByBillingProfileId(billingAccountId, billingProfileId, options) {
        const iter = this.listByBillingProfileIdPagingAll(billingAccountId, billingProfileId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfileIdPagingPage(billingAccountId, billingProfileId, options, settings);
            }
        };
    }
    async *listByBillingProfileIdPagingPage(billingAccountId, billingProfileId, options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._listByBillingProfileId(billingAccountId, billingProfileId, options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            setContinuationToken(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listByBillingProfileIdNext(billingAccountId, billingProfileId, continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            setContinuationToken(page, continuationToken);
            yield page;
        }
    }
    async *listByBillingProfileIdPagingAll(billingAccountId, billingProfileId, options) {
        for await (const page of this.listByBillingProfileIdPagingPage(billingAccountId, billingProfileId, options)) {
            yield* page;
        }
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param options The options parameters.
     */
    listBySavingsPlanOrder(savingsPlanOrderId, options) {
        const iter = this.listBySavingsPlanOrderPagingAll(savingsPlanOrderId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySavingsPlanOrderPagingPage(savingsPlanOrderId, options, settings);
            }
        };
    }
    async *listBySavingsPlanOrderPagingPage(savingsPlanOrderId, options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._listBySavingsPlanOrder(savingsPlanOrderId, options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            setContinuationToken(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listBySavingsPlanOrderNext(savingsPlanOrderId, continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            setContinuationToken(page, continuationToken);
            yield page;
        }
    }
    async *listBySavingsPlanOrderPagingAll(savingsPlanOrderId, options) {
        for await (const page of this.listBySavingsPlanOrderPagingPage(savingsPlanOrderId, options)) {
            yield* page;
        }
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param savingsPlanId Savings plan ID.
     * @param options The options parameters.
     */
    listBySavingsPlanId(savingsPlanOrderId, savingsPlanId, options) {
        const iter = this.listBySavingsPlanIdPagingAll(savingsPlanOrderId, savingsPlanId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySavingsPlanIdPagingPage(savingsPlanOrderId, savingsPlanId, options, settings);
            }
        };
    }
    async *listBySavingsPlanIdPagingPage(savingsPlanOrderId, savingsPlanId, options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._listBySavingsPlanId(savingsPlanOrderId, savingsPlanId, options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            setContinuationToken(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listBySavingsPlanIdNext(savingsPlanOrderId, savingsPlanId, continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            setContinuationToken(page, continuationToken);
            yield page;
        }
    }
    async *listBySavingsPlanIdPagingAll(savingsPlanOrderId, savingsPlanId, options) {
        for await (const page of this.listBySavingsPlanIdPagingPage(savingsPlanOrderId, savingsPlanId, options)) {
            yield* page;
        }
    }
    /**
     * Lists savings plan utilization summaries for the enterprise agreement scope. Supported at grain
     * values: 'Daily' and 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param options The options parameters.
     */
    _listByBillingAccountId(billingAccountId, options) {
        return this.client.sendOperationRequest({ billingAccountId, options }, listByBillingAccountIdOperationSpec);
    }
    /**
     * Lists savings plan utilization summaries for billing profile. Supported at grain values: 'Daily' and
     * 'Monthly'.
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param options The options parameters.
     */
    _listByBillingProfileId(billingAccountId, billingProfileId, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, options }, listByBillingProfileIdOperationSpec);
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param options The options parameters.
     */
    _listBySavingsPlanOrder(savingsPlanOrderId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, options }, listBySavingsPlanOrderOperationSpec);
    }
    /**
     * Lists the savings plan utilization summaries for daily or monthly grain.
     * @param savingsPlanOrderId Savings plan order ID.
     * @param savingsPlanId Savings plan ID.
     * @param options The options parameters.
     */
    _listBySavingsPlanId(savingsPlanOrderId, savingsPlanId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, options }, listBySavingsPlanIdOperationSpec);
    }
    /**
     * ListByBillingAccountIdNext
     * @param billingAccountId Billing account ID
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccountId method.
     * @param options The options parameters.
     */
    _listByBillingAccountIdNext(billingAccountId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, nextLink, options }, listByBillingAccountIdNextOperationSpec);
    }
    /**
     * ListByBillingProfileIdNext
     * @param billingAccountId Billing account ID
     * @param billingProfileId Billing profile ID.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfileId method.
     * @param options The options parameters.
     */
    _listByBillingProfileIdNext(billingAccountId, billingProfileId, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountId, billingProfileId, nextLink, options }, listByBillingProfileIdNextOperationSpec);
    }
    /**
     * ListBySavingsPlanOrderNext
     * @param savingsPlanOrderId Savings plan order ID.
     * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanOrder method.
     * @param options The options parameters.
     */
    _listBySavingsPlanOrderNext(savingsPlanOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, nextLink, options }, listBySavingsPlanOrderNextOperationSpec);
    }
    /**
     * ListBySavingsPlanIdNext
     * @param savingsPlanOrderId Savings plan order ID.
     * @param savingsPlanId Savings plan ID.
     * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanId method.
     * @param options The options parameters.
     */
    _listBySavingsPlanIdNext(savingsPlanOrderId, savingsPlanId, nextLink, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, nextLink, options }, listBySavingsPlanIdNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.grainParameter,
        Parameters.filter1
    ],
    urlParameters: [Parameters.$host, Parameters.billingAccountId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.grainParameter,
        Parameters.filter1
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountId,
        Parameters.billingProfileId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanOrderOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.grainParameter
    ],
    urlParameters: [Parameters.$host, Parameters.savingsPlanOrderId],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanIdOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.grainParameter
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingAccountIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.billingAccountId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.billingAccountId,
        Parameters.billingProfileId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanOrderNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.savingsPlanOrderId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySavingsPlanIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitUtilizationSummariesListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=benefitUtilizationSummaries.js.map