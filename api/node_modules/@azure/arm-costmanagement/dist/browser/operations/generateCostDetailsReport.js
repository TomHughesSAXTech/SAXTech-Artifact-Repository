/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
/** Class containing GenerateCostDetailsReport operations. */
export class GenerateCostDetailsReportImpl {
    client;
    /**
     * Initialize a new instance of the class GenerateCostDetailsReport class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This API is the replacement for all previously release Usage Details APIs. Request to generate a
     * cost details report for the provided date range, billing period (Only enterprise customers) or
     * Invoice Id asynchronously at a certain scope. The initial call to request a report will return a 202
     * with a 'Location' and 'Retry-After' header. The 'Location' header will provide the endpoint to poll
     * to get the result of the report generation. The 'Retry-After' provides the duration to wait before
     * polling for the generated report. A call to poll the report operation will provide a 202 response
     * with a 'Location' header if the operation is still in progress. Once the report generation operation
     * completes, the polling endpoint will provide a 200 response along with details on the report blob(s)
     * that are available for download. The details on the file(s) available for download will be available
     * in the polling response body. To Understand cost details (formerly known as usage details) fields
     * found in files ,see
     * https://learn.microsoft.com/azure/cost-management-billing/automate/understand-usage-details-fields
     * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
     *              scopes. For details, see https://aka.ms/costmgmt/scopes.
     * @param parameters Parameters supplied to the Create cost details operation.
     * @param options The options parameters.
     */
    async beginCreateOperation(scope, parameters, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { scope, parameters, options },
            spec: createOperationOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs,
            resourceLocationConfig: "location"
        });
        await poller.poll();
        return poller;
    }
    /**
     * This API is the replacement for all previously release Usage Details APIs. Request to generate a
     * cost details report for the provided date range, billing period (Only enterprise customers) or
     * Invoice Id asynchronously at a certain scope. The initial call to request a report will return a 202
     * with a 'Location' and 'Retry-After' header. The 'Location' header will provide the endpoint to poll
     * to get the result of the report generation. The 'Retry-After' provides the duration to wait before
     * polling for the generated report. A call to poll the report operation will provide a 202 response
     * with a 'Location' header if the operation is still in progress. Once the report generation operation
     * completes, the polling endpoint will provide a 200 response along with details on the report blob(s)
     * that are available for download. The details on the file(s) available for download will be available
     * in the polling response body. To Understand cost details (formerly known as usage details) fields
     * found in files ,see
     * https://learn.microsoft.com/azure/cost-management-billing/automate/understand-usage-details-fields
     * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
     *              scopes. For details, see https://aka.ms/costmgmt/scopes.
     * @param parameters Parameters supplied to the Create cost details operation.
     * @param options The options parameters.
     */
    async beginCreateOperationAndWait(scope, parameters, options) {
        const poller = await this.beginCreateOperation(scope, parameters, options);
        return poller.pollUntilDone();
    }
    /**
     * Get the result of the specified operation. This link is provided in the CostDetails creation request
     * response Location header.
     * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
     *              scopes. For details, see https://aka.ms/costmgmt/scopes.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    async beginGetOperationResults(scope, operationId, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { scope, operationId, options },
            spec: getOperationResultsOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs,
            resourceLocationConfig: "location"
        });
        await poller.poll();
        return poller;
    }
    /**
     * Get the result of the specified operation. This link is provided in the CostDetails creation request
     * response Location header.
     * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
     *              scopes. For details, see https://aka.ms/costmgmt/scopes.
     * @param operationId The target operation Id.
     * @param options The options parameters.
     */
    async beginGetOperationResultsAndWait(scope, operationId, options) {
        const poller = await this.beginGetOperationResults(scope, operationId, options);
        return poller.pollUntilDone();
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/generateCostDetailsReport",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        201: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        202: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        204: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        default: {
            bodyMapper: Mappers.GenerateCostDetailsReportErrorResponse
        }
    },
    requestBody: Parameters.parameters5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope1],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationResultsOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/costDetailsOperationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        201: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        202: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        204: {
            bodyMapper: Mappers.CostDetailsOperationResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope1, Parameters.operationId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=generateCostDetailsReport.js.map