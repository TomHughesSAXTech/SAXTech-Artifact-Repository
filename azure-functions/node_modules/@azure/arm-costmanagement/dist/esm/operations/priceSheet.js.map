{"version":3,"file":"priceSheet.js","sourceRoot":"","sources":["../../../src/operations/priceSheet.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PriceSheet } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  PriceSheetDownloadOptionalParams,\n  PriceSheetDownloadResponse,\n  PriceSheetDownloadByBillingProfileOptionalParams,\n  PriceSheetDownloadByBillingProfileResponse\n} from \"../models/index.js\";\n\n/** Class containing PriceSheet operations. */\nexport class PriceSheetImpl implements PriceSheet {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class PriceSheet class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets a URL to download the pricesheet for an invoice. The operation is supported for billing\n   * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.\n   * @param billingAccountName The ID that uniquely identifies a billing account.\n   * @param billingProfileName The ID that uniquely identifies a billing profile.\n   * @param invoiceName The ID that uniquely identifies an invoice.\n   * @param options The options parameters.\n   */\n  async beginDownload(\n    billingAccountName: string,\n    billingProfileName: string,\n    invoiceName: string,\n    options?: PriceSheetDownloadOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PriceSheetDownloadResponse>,\n      PriceSheetDownloadResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PriceSheetDownloadResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { billingAccountName, billingProfileName, invoiceName, options },\n      spec: downloadOperationSpec\n    });\n    const poller = await createHttpPoller<\n      PriceSheetDownloadResponse,\n      OperationState<PriceSheetDownloadResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Gets a URL to download the pricesheet for an invoice. The operation is supported for billing\n   * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.\n   * @param billingAccountName The ID that uniquely identifies a billing account.\n   * @param billingProfileName The ID that uniquely identifies a billing profile.\n   * @param invoiceName The ID that uniquely identifies an invoice.\n   * @param options The options parameters.\n   */\n  async beginDownloadAndWait(\n    billingAccountName: string,\n    billingProfileName: string,\n    invoiceName: string,\n    options?: PriceSheetDownloadOptionalParams\n  ): Promise<PriceSheetDownloadResponse> {\n    const poller = await this.beginDownload(\n      billingAccountName,\n      billingProfileName,\n      invoiceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a URL to download the current month's pricesheet for a billing profile. The operation is\n   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer\n   * Agreement.Due to Azure product growth, the Azure price sheet download experience in this preview\n   * version will be updated from a single csv file to a Zip file containing multiple csv files, each\n   * with max 200k records.\n   * @param billingAccountName The ID that uniquely identifies a billing account.\n   * @param billingProfileName The ID that uniquely identifies a billing profile.\n   * @param options The options parameters.\n   */\n  async beginDownloadByBillingProfile(\n    billingAccountName: string,\n    billingProfileName: string,\n    options?: PriceSheetDownloadByBillingProfileOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PriceSheetDownloadByBillingProfileResponse>,\n      PriceSheetDownloadByBillingProfileResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PriceSheetDownloadByBillingProfileResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { billingAccountName, billingProfileName, options },\n      spec: downloadByBillingProfileOperationSpec\n    });\n    const poller = await createHttpPoller<\n      PriceSheetDownloadByBillingProfileResponse,\n      OperationState<PriceSheetDownloadByBillingProfileResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Gets a URL to download the current month's pricesheet for a billing profile. The operation is\n   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer\n   * Agreement.Due to Azure product growth, the Azure price sheet download experience in this preview\n   * version will be updated from a single csv file to a Zip file containing multiple csv files, each\n   * with max 200k records.\n   * @param billingAccountName The ID that uniquely identifies a billing account.\n   * @param billingProfileName The ID that uniquely identifies a billing profile.\n   * @param options The options parameters.\n   */\n  async beginDownloadByBillingProfileAndWait(\n    billingAccountName: string,\n    billingProfileName: string,\n    options?: PriceSheetDownloadByBillingProfileOptionalParams\n  ): Promise<PriceSheetDownloadByBillingProfileResponse> {\n    const poller = await this.beginDownloadByBillingProfile(\n      billingAccountName,\n      billingProfileName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst downloadOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}/providers/Microsoft.CostManagement/pricesheets/default/download\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    201: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    202: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    204: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.billingAccountName,\n    Parameters.billingProfileName,\n    Parameters.invoiceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst downloadByBillingProfileOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.CostManagement/pricesheets/default/download\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    201: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    202: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    204: {\n      bodyMapper: Mappers.DownloadURL\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.billingAccountName,\n    Parameters.billingProfileName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}