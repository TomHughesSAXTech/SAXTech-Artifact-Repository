{"version":3,"file":"views.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/views.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  View,\n  ViewsListOptionalParams,\n  ViewsListByScopeOptionalParams,\n  ViewsGetOptionalParams,\n  ViewsGetResponse,\n  ViewsCreateOrUpdateOptionalParams,\n  ViewsCreateOrUpdateResponse,\n  ViewsDeleteOptionalParams,\n  ViewsGetByScopeOptionalParams,\n  ViewsGetByScopeResponse,\n  ViewsCreateOrUpdateByScopeOptionalParams,\n  ViewsCreateOrUpdateByScopeResponse,\n  ViewsDeleteByScopeOptionalParams\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Views. */\nexport interface Views {\n  /**\n   * Lists all views by tenant and object.\n   * @param options The options parameters.\n   */\n  list(options?: ViewsListOptionalParams): PagedAsyncIterableIterator<View>;\n  /**\n   * Lists all views at the given scope.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param options The options parameters.\n   */\n  listByScope(\n    scope: string,\n    options?: ViewsListByScopeOptionalParams\n  ): PagedAsyncIterableIterator<View>;\n  /**\n   * Gets the view by view name.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  get(\n    viewName: string,\n    options?: ViewsGetOptionalParams\n  ): Promise<ViewsGetResponse>;\n  /**\n   * The operation to create or update a view. Update operation requires latest eTag to be set in the\n   * request. You may obtain the latest eTag by performing a get operation. Create operation does not\n   * require eTag.\n   * @param viewName View name\n   * @param parameters Parameters supplied to the CreateOrUpdate View operation.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    viewName: string,\n    parameters: View,\n    options?: ViewsCreateOrUpdateOptionalParams\n  ): Promise<ViewsCreateOrUpdateResponse>;\n  /**\n   * The operation to delete a view.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  delete(viewName: string, options?: ViewsDeleteOptionalParams): Promise<void>;\n  /**\n   * Gets the view for the defined scope by view name.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  getByScope(\n    scope: string,\n    viewName: string,\n    options?: ViewsGetByScopeOptionalParams\n  ): Promise<ViewsGetByScopeResponse>;\n  /**\n   * The operation to create or update a view. Update operation requires latest eTag to be set in the\n   * request. You may obtain the latest eTag by performing a get operation. Create operation does not\n   * require eTag.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param viewName View name\n   * @param parameters Parameters supplied to the CreateOrUpdate View operation.\n   * @param options The options parameters.\n   */\n  createOrUpdateByScope(\n    scope: string,\n    viewName: string,\n    parameters: View,\n    options?: ViewsCreateOrUpdateByScopeOptionalParams\n  ): Promise<ViewsCreateOrUpdateByScopeResponse>;\n  /**\n   * The operation to delete a view.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  deleteByScope(\n    scope: string,\n    viewName: string,\n    options?: ViewsDeleteByScopeOptionalParams\n  ): Promise<void>;\n}\n"]}