"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.savingsPlanId = exports.savingsPlanOrderId = exports.filter1 = exports.grainParameter = exports.billingScope = exports.orderby = exports.checkNameAvailabilityRequest = exports.ifMatch = exports.name = exports.scheduledAction = exports.invoiceName = exports.billingProfileName = exports.billingAccountName = exports.parameters6 = exports.operationId = exports.parameters5 = exports.parameters4 = exports.exportName = exports.billingProfileId = exports.endDate = exports.startDate = exports.billingAccountId = exports.parameters3 = exports.top = exports.skiptoken = exports.expand = exports.filter = exports.parameters2 = exports.externalCloudProviderId = exports.externalCloudProviderType = exports.parameters1 = exports.alertId = exports.scope1 = exports.parameters = exports.contentType = exports.viewName = exports.scope = exports.nextLink = exports.apiVersion = exports.$host = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.viewName = {
    parameterPath: "viewName",
    mapper: {
        serializedName: "viewName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.View
};
exports.scope1 = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.alertId = {
    parameterPath: "alertId",
    mapper: {
        serializedName: "alertId",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DismissAlertPayload
};
exports.externalCloudProviderType = {
    parameterPath: "externalCloudProviderType",
    mapper: {
        serializedName: "externalCloudProviderType",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.externalCloudProviderId = {
    parameterPath: "externalCloudProviderId",
    mapper: {
        serializedName: "externalCloudProviderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ForecastDefinition
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
exports.expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
exports.skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.QueryDefinition
};
exports.billingAccountId = {
    parameterPath: "billingAccountId",
    mapper: {
        serializedName: "billingAccountId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.startDate = {
    parameterPath: "startDate",
    mapper: {
        serializedName: "startDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.endDate = {
    parameterPath: "endDate",
    mapper: {
        serializedName: "endDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.billingProfileId = {
    parameterPath: "billingProfileId",
    mapper: {
        serializedName: "billingProfileId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.exportName = {
    parameterPath: "exportName",
    mapper: {
        serializedName: "exportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters4 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Export
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.GenerateCostDetailsReportRequestDefinition
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.GenerateDetailedCostReportDefinition
};
exports.billingAccountName = {
    parameterPath: "billingAccountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("([A-Za-z0-9]+(-[A-Za-z0-9]+)+):([A-Za-z0-9]+(-[A-Za-z0-9]+)+)_[0-9]{4}-[0-9]{2}-[0-9]{2}")
        },
        serializedName: "billingAccountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.billingProfileName = {
    parameterPath: "billingProfileName",
    mapper: {
        constraints: {
            Pattern: new RegExp("([A-Za-z0-9]+(-[A-Za-z0-9]+)+)")
        },
        serializedName: "billingProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.invoiceName = {
    parameterPath: "invoiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("[A-Za-z0-9]+")
        },
        serializedName: "invoiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.scheduledAction = {
    parameterPath: "scheduledAction",
    mapper: mappers_js_1.ScheduledAction
};
exports.name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
exports.checkNameAvailabilityRequest = {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: mappers_js_1.CheckNameAvailabilityRequest
};
exports.orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
exports.billingScope = {
    parameterPath: "billingScope",
    mapper: {
        serializedName: "billingScope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.grainParameter = {
    parameterPath: ["options", "grainParameter"],
    mapper: {
        serializedName: "grainParameter",
        type: {
            name: "String"
        }
    }
};
exports.filter1 = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "filter",
        type: {
            name: "String"
        }
    }
};
exports.savingsPlanOrderId = {
    parameterPath: "savingsPlanOrderId",
    mapper: {
        serializedName: "savingsPlanOrderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.savingsPlanId = {
    parameterPath: "savingsPlanId",
    mapper: {
        serializedName: "savingsPlanId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map