"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CostManagementClient = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const coreRestPipeline = tslib_1.__importStar(require("@azure/core-rest-pipeline"));
const index_js_1 = require("./operations/index.js");
class CostManagementClient extends coreClient.ServiceClient {
    $host;
    apiVersion;
    /**
     * Initializes a new instance of the CostManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-costmanagement/1.0.0-beta.2`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = {
            ...defaults,
            ...options,
            userAgentOptions: {
                userAgentPrefix
            },
            endpoint: options.endpoint ?? options.baseUri ?? "https://management.azure.com"
        };
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: optionsWithDefaults.credentialScopes ??
                    `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-10-01";
        this.operations = new index_js_1.OperationsImpl(this);
        this.views = new index_js_1.ViewsImpl(this);
        this.alerts = new index_js_1.AlertsImpl(this);
        this.forecast = new index_js_1.ForecastImpl(this);
        this.dimensions = new index_js_1.DimensionsImpl(this);
        this.query = new index_js_1.QueryImpl(this);
        this.generateReservationDetailsReport = new index_js_1.GenerateReservationDetailsReportImpl(this);
        this.exports = new index_js_1.ExportsImpl(this);
        this.generateCostDetailsReport = new index_js_1.GenerateCostDetailsReportImpl(this);
        this.generateDetailedCostReport = new index_js_1.GenerateDetailedCostReportImpl(this);
        this.generateDetailedCostReportOperationResults = new index_js_1.GenerateDetailedCostReportOperationResultsImpl(this);
        this.generateDetailedCostReportOperationStatus = new index_js_1.GenerateDetailedCostReportOperationStatusImpl(this);
        this.priceSheet = new index_js_1.PriceSheetImpl(this);
        this.scheduledActions = new index_js_1.ScheduledActionsImpl(this);
        this.benefitRecommendations = new index_js_1.BenefitRecommendationsImpl(this);
        this.benefitUtilizationSummaries = new index_js_1.BenefitUtilizationSummariesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            async sendRequest(request, next) {
                const param = request.url.split("?");
                if (param.length > 1) {
                    const newParams = param[1].split("&").map((item) => {
                        if (item.indexOf("api-version") > -1) {
                            return "api-version=" + apiVersion;
                        }
                        else {
                            return item;
                        }
                    });
                    request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    operations;
    views;
    alerts;
    forecast;
    dimensions;
    query;
    generateReservationDetailsReport;
    exports;
    generateCostDetailsReport;
    generateDetailedCostReport;
    generateDetailedCostReportOperationResults;
    generateDetailedCostReportOperationStatus;
    priceSheet;
    scheduledActions;
    benefitRecommendations;
    benefitUtilizationSummaries;
}
exports.CostManagementClient = CostManagementClient;
//# sourceMappingURL=costManagementClient.js.map