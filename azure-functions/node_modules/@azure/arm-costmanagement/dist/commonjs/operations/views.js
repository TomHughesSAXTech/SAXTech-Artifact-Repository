"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewsImpl = void 0;
const tslib_1 = require("tslib");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/// <reference lib="esnext.asynciterable" />
/** Class containing Views operations. */
class ViewsImpl {
    client;
    /**
     * Initialize a new instance of the class Views class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all views by tenant and object.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    async *listPagingPage(options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._list(options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listNext(continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
    }
    async *listPagingAll(options) {
        for await (const page of this.listPagingPage(options)) {
            yield* page;
        }
    }
    /**
     * Lists all views at the given scope.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param options The options parameters.
     */
    listByScope(scope, options) {
        const iter = this.listByScopePagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByScopePagingPage(scope, options, settings);
            }
        };
    }
    async *listByScopePagingPage(scope, options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._listByScope(scope, options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listByScopeNext(scope, continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
    }
    async *listByScopePagingAll(scope, options) {
        for await (const page of this.listByScopePagingPage(scope, options)) {
            yield* page;
        }
    }
    /**
     * Lists all views by tenant and object.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Lists all views at the given scope.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param options The options parameters.
     */
    _listByScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listByScopeOperationSpec);
    }
    /**
     * Gets the view by view name.
     * @param viewName View name
     * @param options The options parameters.
     */
    get(viewName, options) {
        return this.client.sendOperationRequest({ viewName, options }, getOperationSpec);
    }
    /**
     * The operation to create or update a view. Update operation requires latest eTag to be set in the
     * request. You may obtain the latest eTag by performing a get operation. Create operation does not
     * require eTag.
     * @param viewName View name
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param options The options parameters.
     */
    createOrUpdate(viewName, parameters, options) {
        return this.client.sendOperationRequest({ viewName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * The operation to delete a view.
     * @param viewName View name
     * @param options The options parameters.
     */
    delete(viewName, options) {
        return this.client.sendOperationRequest({ viewName, options }, deleteOperationSpec);
    }
    /**
     * Gets the view for the defined scope by view name.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param viewName View name
     * @param options The options parameters.
     */
    getByScope(scope, viewName, options) {
        return this.client.sendOperationRequest({ scope, viewName, options }, getByScopeOperationSpec);
    }
    /**
     * The operation to create or update a view. Update operation requires latest eTag to be set in the
     * request. You may obtain the latest eTag by performing a get operation. Create operation does not
     * require eTag.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param viewName View name
     * @param parameters Parameters supplied to the CreateOrUpdate View operation.
     * @param options The options parameters.
     */
    createOrUpdateByScope(scope, viewName, parameters, options) {
        return this.client.sendOperationRequest({ scope, viewName, parameters, options }, createOrUpdateByScopeOperationSpec);
    }
    /**
     * The operation to delete a view.
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param viewName View name
     * @param options The options parameters.
     */
    deleteByScope(scope, viewName, options) {
        return this.client.sendOperationRequest({ scope, viewName, options }, deleteByScopeOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListByScopeNext
     * @param scope The scope associated with view operations. This includes
     *              'subscriptions/{subscriptionId}' for subscription scope,
     *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for BillingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
     *              Management Group scope,
     *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     *              External Billing Account scope and
     *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
     *              Subscription scope.
     * @param nextLink The nextLink from the previous successful call to the ListByScope method.
     * @param options The options parameters.
     */
    _listByScopeNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listByScopeNextOperationSpec);
    }
}
exports.ViewsImpl = ViewsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.CostManagement/views",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ViewListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const listByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/views",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ViewListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.CostManagement/views/{viewName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.View
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.viewName],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.CostManagement/views/{viewName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.View
        },
        201: {
            bodyMapper: Mappers.View
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.viewName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/providers/Microsoft.CostManagement/views/{viewName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.viewName],
    headerParameters: [Parameters.accept],
    serializer
};
const getByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/views/{viewName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.View
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/views/{viewName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.View
        },
        201: {
            bodyMapper: Mappers.View
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteByScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/views/{viewName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ViewListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const listByScopeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ViewListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=views.js.map