{"version":3,"file":"benefitRecommendations.js","sourceRoot":"","sources":["../../../src/operations/benefitRecommendations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { BenefitRecommendations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  BenefitRecommendationModel,\n  BenefitRecommendationsListNextOptionalParams,\n  BenefitRecommendationsListOptionalParams,\n  BenefitRecommendationsListResponse,\n  BenefitRecommendationsListNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing BenefitRecommendations operations. */\nexport class BenefitRecommendationsImpl implements BenefitRecommendations {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class BenefitRecommendations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List of recommendations for purchasing savings plan.\n   * @param billingScope The scope associated with benefit recommendation operations. This includes\n   *                     '/subscriptions/{subscriptionId}/' for subscription scope,\n   *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,\n   *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and\n   *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *                     for billing profile scope\n   * @param options The options parameters.\n   */\n  public list(\n    billingScope: string,\n    options?: BenefitRecommendationsListOptionalParams\n  ): PagedAsyncIterableIterator<BenefitRecommendationModel> {\n    const iter = this.listPagingAll(billingScope, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(billingScope, options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    billingScope: string,\n    options?: BenefitRecommendationsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<BenefitRecommendationModel[]> {\n    let result: BenefitRecommendationsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(billingScope, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(billingScope, continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    billingScope: string,\n    options?: BenefitRecommendationsListOptionalParams\n  ): AsyncIterableIterator<BenefitRecommendationModel> {\n    for await (const page of this.listPagingPage(billingScope, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List of recommendations for purchasing savings plan.\n   * @param billingScope The scope associated with benefit recommendation operations. This includes\n   *                     '/subscriptions/{subscriptionId}/' for subscription scope,\n   *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,\n   *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and\n   *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *                     for billing profile scope\n   * @param options The options parameters.\n   */\n  private _list(\n    billingScope: string,\n    options?: BenefitRecommendationsListOptionalParams\n  ): Promise<BenefitRecommendationsListResponse> {\n    return this.client.sendOperationRequest(\n      { billingScope, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param billingScope The scope associated with benefit recommendation operations. This includes\n   *                     '/subscriptions/{subscriptionId}/' for subscription scope,\n   *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,\n   *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and\n   *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *                     for billing profile scope\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    billingScope: string,\n    nextLink: string,\n    options?: BenefitRecommendationsListNextOptionalParams\n  ): Promise<BenefitRecommendationsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { billingScope, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{billingScope}/providers/Microsoft.CostManagement/benefitRecommendations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BenefitRecommendationsListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.filter,\n    Parameters.expand,\n    Parameters.orderby\n  ],\n  urlParameters: [Parameters.$host, Parameters.billingScope],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BenefitRecommendationsListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.nextLink,\n    Parameters.billingScope\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}