"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BenefitRecommendationsImpl = void 0;
const tslib_1 = require("tslib");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/// <reference lib="esnext.asynciterable" />
/** Class containing BenefitRecommendations operations. */
class BenefitRecommendationsImpl {
    client;
    /**
     * Initialize a new instance of the class BenefitRecommendations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List of recommendations for purchasing savings plan.
     * @param billingScope The scope associated with benefit recommendation operations. This includes
     *                     '/subscriptions/{subscriptionId}/' for subscription scope,
     *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and
     *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                     for billing profile scope
     * @param options The options parameters.
     */
    list(billingScope, options) {
        const iter = this.listPagingAll(billingScope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(billingScope, options, settings);
            }
        };
    }
    async *listPagingPage(billingScope, options, settings) {
        let result;
        let continuationToken = settings?.continuationToken;
        if (!continuationToken) {
            result = await this._list(billingScope, options);
            let page = result.value || [];
            continuationToken = result.nextLink;
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
        while (continuationToken) {
            result = await this._listNext(billingScope, continuationToken, options);
            continuationToken = result.nextLink;
            let page = result.value || [];
            (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
            yield page;
        }
    }
    async *listPagingAll(billingScope, options) {
        for await (const page of this.listPagingPage(billingScope, options)) {
            yield* page;
        }
    }
    /**
     * List of recommendations for purchasing savings plan.
     * @param billingScope The scope associated with benefit recommendation operations. This includes
     *                     '/subscriptions/{subscriptionId}/' for subscription scope,
     *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and
     *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                     for billing profile scope
     * @param options The options parameters.
     */
    _list(billingScope, options) {
        return this.client.sendOperationRequest({ billingScope, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param billingScope The scope associated with benefit recommendation operations. This includes
     *                     '/subscriptions/{subscriptionId}/' for subscription scope,
     *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
     *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and
     *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *                     for billing profile scope
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(billingScope, nextLink, options) {
        return this.client.sendOperationRequest({ billingScope, nextLink, options }, listNextOperationSpec);
    }
}
exports.BenefitRecommendationsImpl = BenefitRecommendationsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/{billingScope}/providers/Microsoft.CostManagement/benefitRecommendations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitRecommendationsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.expand,
        Parameters.orderby
    ],
    urlParameters: [Parameters.$host, Parameters.billingScope],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BenefitRecommendationsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.billingScope
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=benefitRecommendations.js.map