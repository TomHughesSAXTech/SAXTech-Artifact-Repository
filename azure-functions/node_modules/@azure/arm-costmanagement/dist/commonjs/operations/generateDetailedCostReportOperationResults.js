"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateDetailedCostReportOperationResultsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/** Class containing GenerateDetailedCostReportOperationResults operations. */
class GenerateDetailedCostReportOperationResultsImpl {
    client;
    /**
     * Initialize a new instance of the class GenerateDetailedCostReportOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the result of the specified operation. The link with this operationId is provided as a response
     * header of the initial request.
     * @param operationId The target operation Id.
     * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
     *              scopes. For details, see https://aka.ms/costmgmt/scopes.
     * @param options The options parameters.
     */
    async beginGet(operationId, scope, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            let currentRawResponse = undefined;
            const providedCallback = args.options?.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback?.(rawResponse, flatResponse);
            };
            const updatedArgs = {
                ...args,
                options: {
                    ...args.options,
                    onResponse: callback
                }
            };
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { operationId, scope, options },
            spec: getOperationSpec
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options?.resumeFrom,
            intervalInMs: options?.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Gets the result of the specified operation. The link with this operationId is provided as a response
     * header of the initial request.
     * @param operationId The target operation Id.
     * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
     *              scopes. For details, see https://aka.ms/costmgmt/scopes.
     * @param options The options parameters.
     */
    async beginGetAndWait(operationId, scope, options) {
        const poller = await this.beginGet(operationId, scope, options);
        return poller.pollUntilDone();
    }
}
exports.GenerateDetailedCostReportOperationResultsImpl = GenerateDetailedCostReportOperationResultsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
        },
        201: {
            bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
        },
        202: {
            bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
        },
        204: {
            bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope1, Parameters.operationId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=generateDetailedCostReportOperationResults.js.map