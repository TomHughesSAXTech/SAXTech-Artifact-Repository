{"version":3,"file":"alerts.js","sourceRoot":"","sources":["../../../src/operations/alerts.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Alerts } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  AlertsListOptionalParams,\n  AlertsListResponse,\n  AlertsGetOptionalParams,\n  AlertsGetResponse,\n  DismissAlertPayload,\n  AlertsDismissOptionalParams,\n  AlertsDismissResponse,\n  ExternalCloudProviderType,\n  AlertsListExternalOptionalParams,\n  AlertsListExternalResponse\n} from \"../models/index.js\";\n\n/** Class containing Alerts operations. */\nexport class AlertsImpl implements Alerts {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class Alerts class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the alerts for scope defined.\n   * @param scope The scope associated with alerts operations. This includes\n   *              '/subscriptions/{subscriptionId}/' for subscription scope,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}\n   *              for Management Group scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for billingProfile scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'\n   *              for invoiceSection scope, and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific\n   *              for partners.\n   * @param options The options parameters.\n   */\n  list(\n    scope: string,\n    options?: AlertsListOptionalParams\n  ): Promise<AlertsListResponse> {\n    return this.client.sendOperationRequest(\n      { scope, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the alert for the scope by alert ID.\n   * @param scope The scope associated with alerts operations. This includes\n   *              '/subscriptions/{subscriptionId}/' for subscription scope,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}\n   *              for Management Group scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for billingProfile scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'\n   *              for invoiceSection scope, and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific\n   *              for partners.\n   * @param alertId Alert ID\n   * @param options The options parameters.\n   */\n  get(\n    scope: string,\n    alertId: string,\n    options?: AlertsGetOptionalParams\n  ): Promise<AlertsGetResponse> {\n    return this.client.sendOperationRequest(\n      { scope, alertId, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Dismisses the specified alert\n   * @param scope The scope associated with alerts operations. This includes\n   *              '/subscriptions/{subscriptionId}/' for subscription scope,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}\n   *              for Management Group scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for billingProfile scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'\n   *              for invoiceSection scope, and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific\n   *              for partners.\n   * @param alertId Alert ID\n   * @param parameters Parameters supplied to the Dismiss Alert operation.\n   * @param options The options parameters.\n   */\n  dismiss(\n    scope: string,\n    alertId: string,\n    parameters: DismissAlertPayload,\n    options?: AlertsDismissOptionalParams\n  ): Promise<AlertsDismissResponse> {\n    return this.client.sendOperationRequest(\n      { scope, alertId, parameters, options },\n      dismissOperationSpec\n    );\n  }\n\n  /**\n   * Lists the Alerts for external cloud provider type defined.\n   * @param externalCloudProviderType The external cloud provider type associated with dimension/query\n   *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'\n   *                                  for consolidated account.\n   * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or\n   *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.\n   * @param options The options parameters.\n   */\n  listExternal(\n    externalCloudProviderType: ExternalCloudProviderType,\n    externalCloudProviderId: string,\n    options?: AlertsListExternalOptionalParams\n  ): Promise<AlertsListExternalResponse> {\n    return this.client.sendOperationRequest(\n      { externalCloudProviderType, externalCloudProviderId, options },\n      listExternalOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/alerts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AlertsResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Alert\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst dismissOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Alert\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.alertId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listExternalOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/alerts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AlertsResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.externalCloudProviderType,\n    Parameters.externalCloudProviderId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}