{"version":3,"file":"forecast.js","sourceRoot":"","sources":["../../../src/operations/forecast.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAGH,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAWtD,4CAA4C;AAC5C,MAAa,YAAY;IACN,MAAM,CAAuB;IAE9C;;;OAGG;IACH,YAAY,MAA4B;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,KAAK,CACH,KAAa,EACb,UAA8B,EAC9B,OAAqC;QAErC,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,EAC9B,kBAAkB,CACnB,CAAC;IACJ,CAAC;IAED;;;;;;;;;OASG;IACH,0BAA0B,CACxB,yBAAoD,EACpD,uBAA+B,EAC/B,UAA8B,EAC9B,OAA0D;QAE1D,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;YACE,yBAAyB;YACzB,uBAAuB;YACvB,UAAU;YACV,OAAO;SACR,EACD,uCAAuC,CACxC,CAAC;IACJ,CAAC;CACF;AApED,oCAoEC;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,kBAAkB,GAA6B;IACnD,IAAI,EAAE,sDAAsD;IAC5D,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,cAAc;SACnC;QACD,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,WAAW,EAAE,UAAU,CAAC,WAAW;IACnC,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC;IAC3D,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC;IACpD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,uCAAuC,GAA6B;IACxE,IAAI,EACF,oGAAoG;IACtG,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,cAAc;SACnC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,WAAW,EAAE,UAAU,CAAC,WAAW;IACnC,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC;IAC3D,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,yBAAyB;QACpC,UAAU,CAAC,uBAAuB;KACnC;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Forecast } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  ForecastDefinition,\n  ForecastUsageOptionalParams,\n  ForecastUsageResponse,\n  ExternalCloudProviderType,\n  ForecastExternalCloudProviderUsageOptionalParams,\n  ForecastExternalCloudProviderUsageResponse\n} from \"../models/index.js\";\n\n/** Class containing Forecast operations. */\nexport class ForecastImpl implements Forecast {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class Forecast class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists the forecast charges for scope defined.\n   * @param scope The scope associated with forecast operations. This includes\n   *              '/subscriptions/{subscriptionId}/' for subscription scope,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}\n   *              for Management Group scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for billingProfile scope,\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'\n   *              for invoiceSection scope, and\n   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific\n   *              for partners.\n   * @param parameters Parameters supplied to the CreateOrUpdate Forecast Config operation.\n   * @param options The options parameters.\n   */\n  usage(\n    scope: string,\n    parameters: ForecastDefinition,\n    options?: ForecastUsageOptionalParams\n  ): Promise<ForecastUsageResponse> {\n    return this.client.sendOperationRequest(\n      { scope, parameters, options },\n      usageOperationSpec\n    );\n  }\n\n  /**\n   * Lists the forecast charges for external cloud provider type defined.\n   * @param externalCloudProviderType The external cloud provider type associated with dimension/query\n   *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'\n   *                                  for consolidated account.\n   * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or\n   *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.\n   * @param parameters Parameters supplied to the CreateOrUpdate Forecast Config operation.\n   * @param options The options parameters.\n   */\n  externalCloudProviderUsage(\n    externalCloudProviderType: ExternalCloudProviderType,\n    externalCloudProviderId: string,\n    parameters: ForecastDefinition,\n    options?: ForecastExternalCloudProviderUsageOptionalParams\n  ): Promise<ForecastExternalCloudProviderUsageResponse> {\n    return this.client.sendOperationRequest(\n      {\n        externalCloudProviderType,\n        externalCloudProviderId,\n        parameters,\n        options\n      },\n      externalCloudProviderUsageOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst usageOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/forecast\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ForecastResult\n    },\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters2,\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [Parameters.$host, Parameters.scope1],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst externalCloudProviderUsageOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/forecast\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ForecastResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters2,\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.externalCloudProviderType,\n    Parameters.externalCloudProviderId\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n"]}