/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing Dimensions operations. */
export class DimensionsImpl {
    client;
    /**
     * Initialize a new instance of the class Dimensions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the dimensions by the defined scope.
     * @param scope The scope associated with dimension operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
     *              partners.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    async *listPagingPage(scope, options, _settings) {
        let result;
        result = await this._list(scope, options);
        yield result.value || [];
    }
    async *listPagingAll(scope, options) {
        for await (const page of this.listPagingPage(scope, options)) {
            yield* page;
        }
    }
    /**
     * Lists the dimensions by the external cloud provider type.
     * @param externalCloudProviderType The external cloud provider type associated with dimension/query
     *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'
     *                                  for consolidated account.
     * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or
     *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.
     * @param options The options parameters.
     */
    listByExternalCloudProviderType(externalCloudProviderType, externalCloudProviderId, options) {
        const iter = this.byExternalCloudProviderTypePagingAll(externalCloudProviderType, externalCloudProviderId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings?.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.byExternalCloudProviderTypePagingPage(externalCloudProviderType, externalCloudProviderId, options, settings);
            }
        };
    }
    async *byExternalCloudProviderTypePagingPage(externalCloudProviderType, externalCloudProviderId, options, _settings) {
        let result;
        result = await this._byExternalCloudProviderType(externalCloudProviderType, externalCloudProviderId, options);
        yield result.value || [];
    }
    async *byExternalCloudProviderTypePagingAll(externalCloudProviderType, externalCloudProviderId, options) {
        for await (const page of this.byExternalCloudProviderTypePagingPage(externalCloudProviderType, externalCloudProviderId, options)) {
            yield* page;
        }
    }
    /**
     * Lists the dimensions by the defined scope.
     * @param scope The scope associated with dimension operations. This includes
     *              '/subscriptions/{subscriptionId}/' for subscription scope,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     *              Department scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}'
     *              for Management Group scope,
     *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     *              for billingProfile scope,
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
     *              for invoiceSection scope, and
     *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
     *              partners.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec);
    }
    /**
     * Lists the dimensions by the external cloud provider type.
     * @param externalCloudProviderType The external cloud provider type associated with dimension/query
     *                                  operations. This includes 'externalSubscriptions' for linked account and 'externalBillingAccounts'
     *                                  for consolidated account.
     * @param externalCloudProviderId This can be '{externalSubscriptionId}' for linked account or
     *                                '{externalBillingAccountId}' for consolidated account used with dimension/query operations.
     * @param options The options parameters.
     */
    _byExternalCloudProviderType(externalCloudProviderType, externalCloudProviderId, options) {
        return this.client.sendOperationRequest({ externalCloudProviderType, externalCloudProviderId, options }, byExternalCloudProviderTypeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/{scope}/providers/Microsoft.CostManagement/dimensions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DimensionsListResult
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.expand,
        Parameters.skiptoken,
        Parameters.top
    ],
    urlParameters: [Parameters.$host, Parameters.scope1],
    headerParameters: [Parameters.accept],
    serializer
};
const byExternalCloudProviderTypeOperationSpec = {
    path: "/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/dimensions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DimensionsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.expand,
        Parameters.skiptoken,
        Parameters.top
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.externalCloudProviderType,
        Parameters.externalCloudProviderId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=dimensions.js.map