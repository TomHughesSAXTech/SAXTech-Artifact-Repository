{"version":3,"file":"views.js","sourceRoot":"","sources":["../../../src/operations/views.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { Views } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CostManagementClient } from \"../costManagementClient.js\";\nimport {\n  View,\n  ViewsListNextOptionalParams,\n  ViewsListOptionalParams,\n  ViewsListResponse,\n  ViewsListByScopeNextOptionalParams,\n  ViewsListByScopeOptionalParams,\n  ViewsListByScopeResponse,\n  ViewsGetOptionalParams,\n  ViewsGetResponse,\n  ViewsCreateOrUpdateOptionalParams,\n  ViewsCreateOrUpdateResponse,\n  ViewsDeleteOptionalParams,\n  ViewsGetByScopeOptionalParams,\n  ViewsGetByScopeResponse,\n  ViewsCreateOrUpdateByScopeOptionalParams,\n  ViewsCreateOrUpdateByScopeResponse,\n  ViewsDeleteByScopeOptionalParams,\n  ViewsListNextResponse,\n  ViewsListByScopeNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Views operations. */\nexport class ViewsImpl implements Views {\n  private readonly client: CostManagementClient;\n\n  /**\n   * Initialize a new instance of the class Views class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CostManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all views by tenant and object.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: ViewsListOptionalParams\n  ): PagedAsyncIterableIterator<View> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: ViewsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<View[]> {\n    let result: ViewsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: ViewsListOptionalParams\n  ): AsyncIterableIterator<View> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all views at the given scope.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param options The options parameters.\n   */\n  public listByScope(\n    scope: string,\n    options?: ViewsListByScopeOptionalParams\n  ): PagedAsyncIterableIterator<View> {\n    const iter = this.listByScopePagingAll(scope, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByScopePagingPage(scope, options, settings);\n      }\n    };\n  }\n\n  private async *listByScopePagingPage(\n    scope: string,\n    options?: ViewsListByScopeOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<View[]> {\n    let result: ViewsListByScopeResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByScope(scope, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByScopeNext(scope, continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByScopePagingAll(\n    scope: string,\n    options?: ViewsListByScopeOptionalParams\n  ): AsyncIterableIterator<View> {\n    for await (const page of this.listByScopePagingPage(scope, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all views by tenant and object.\n   * @param options The options parameters.\n   */\n  private _list(options?: ViewsListOptionalParams): Promise<ViewsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Lists all views at the given scope.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param options The options parameters.\n   */\n  private _listByScope(\n    scope: string,\n    options?: ViewsListByScopeOptionalParams\n  ): Promise<ViewsListByScopeResponse> {\n    return this.client.sendOperationRequest(\n      { scope, options },\n      listByScopeOperationSpec\n    );\n  }\n\n  /**\n   * Gets the view by view name.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  get(\n    viewName: string,\n    options?: ViewsGetOptionalParams\n  ): Promise<ViewsGetResponse> {\n    return this.client.sendOperationRequest(\n      { viewName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * The operation to create or update a view. Update operation requires latest eTag to be set in the\n   * request. You may obtain the latest eTag by performing a get operation. Create operation does not\n   * require eTag.\n   * @param viewName View name\n   * @param parameters Parameters supplied to the CreateOrUpdate View operation.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    viewName: string,\n    parameters: View,\n    options?: ViewsCreateOrUpdateOptionalParams\n  ): Promise<ViewsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { viewName, parameters, options },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * The operation to delete a view.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  delete(viewName: string, options?: ViewsDeleteOptionalParams): Promise<void> {\n    return this.client.sendOperationRequest(\n      { viewName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * Gets the view for the defined scope by view name.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  getByScope(\n    scope: string,\n    viewName: string,\n    options?: ViewsGetByScopeOptionalParams\n  ): Promise<ViewsGetByScopeResponse> {\n    return this.client.sendOperationRequest(\n      { scope, viewName, options },\n      getByScopeOperationSpec\n    );\n  }\n\n  /**\n   * The operation to create or update a view. Update operation requires latest eTag to be set in the\n   * request. You may obtain the latest eTag by performing a get operation. Create operation does not\n   * require eTag.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param viewName View name\n   * @param parameters Parameters supplied to the CreateOrUpdate View operation.\n   * @param options The options parameters.\n   */\n  createOrUpdateByScope(\n    scope: string,\n    viewName: string,\n    parameters: View,\n    options?: ViewsCreateOrUpdateByScopeOptionalParams\n  ): Promise<ViewsCreateOrUpdateByScopeResponse> {\n    return this.client.sendOperationRequest(\n      { scope, viewName, parameters, options },\n      createOrUpdateByScopeOperationSpec\n    );\n  }\n\n  /**\n   * The operation to delete a view.\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param viewName View name\n   * @param options The options parameters.\n   */\n  deleteByScope(\n    scope: string,\n    viewName: string,\n    options?: ViewsDeleteByScopeOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { scope, viewName, options },\n      deleteByScopeOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: ViewsListNextOptionalParams\n  ): Promise<ViewsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByScopeNext\n   * @param scope The scope associated with view operations. This includes\n   *              'subscriptions/{subscriptionId}' for subscription scope,\n   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for\n   *              Department scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'\n   *              for EnrollmentAccount scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'\n   *              for BillingProfile scope,\n   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'\n   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for\n   *              Management Group scope,\n   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for\n   *              External Billing Account scope and\n   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External\n   *              Subscription scope.\n   * @param nextLink The nextLink from the previous successful call to the ListByScope method.\n   * @param options The options parameters.\n   */\n  private _listByScopeNext(\n    scope: string,\n    nextLink: string,\n    options?: ViewsListByScopeNextOptionalParams\n  ): Promise<ViewsListByScopeNextResponse> {\n    return this.client.sendOperationRequest(\n      { scope, nextLink, options },\n      listByScopeNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.CostManagement/views\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ViewListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/views\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ViewListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.CostManagement/views/{viewName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.View\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.viewName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.CostManagement/views/{viewName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.View\n    },\n    201: {\n      bodyMapper: Mappers.View\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.viewName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.CostManagement/views/{viewName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.viewName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getByScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/views/{viewName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.View\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateByScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/views/{viewName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.View\n    },\n    201: {\n      bodyMapper: Mappers.View\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteByScopeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.CostManagement/views/{viewName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ViewListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByScopeNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ViewListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}