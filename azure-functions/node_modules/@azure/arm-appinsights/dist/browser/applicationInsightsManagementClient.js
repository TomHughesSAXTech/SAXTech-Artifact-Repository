/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { ComponentsImpl, AnnotationsImpl, APIKeysImpl, ExportConfigurationsImpl, ComponentCurrentBillingFeaturesImpl, ComponentQuotaStatusImpl, ComponentFeatureCapabilitiesImpl, ComponentAvailableFeaturesImpl, ProactiveDetectionConfigurationsImpl, WorkItemConfigurationsImpl, FavoritesImpl, WebTestLocationsImpl, WebTestsImpl, AnalyticsItemsImpl, OperationsImpl, WorkbookTemplatesImpl, WorkbooksImpl, LiveTokenImpl, ComponentLinkedStorageAccountsOperationsImpl, DeletedWorkbooksImpl, } from "./operations/index.js";
export class ApplicationInsightsManagementClient extends coreClient.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-arm-appinsights/5.0.0-beta.8`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.components = new ComponentsImpl(this);
        this.annotations = new AnnotationsImpl(this);
        this.aPIKeys = new APIKeysImpl(this);
        this.exportConfigurations = new ExportConfigurationsImpl(this);
        this.componentCurrentBillingFeatures =
            new ComponentCurrentBillingFeaturesImpl(this);
        this.componentQuotaStatus = new ComponentQuotaStatusImpl(this);
        this.componentFeatureCapabilities = new ComponentFeatureCapabilitiesImpl(this);
        this.componentAvailableFeatures = new ComponentAvailableFeaturesImpl(this);
        this.proactiveDetectionConfigurations =
            new ProactiveDetectionConfigurationsImpl(this);
        this.workItemConfigurations = new WorkItemConfigurationsImpl(this);
        this.favorites = new FavoritesImpl(this);
        this.webTestLocations = new WebTestLocationsImpl(this);
        this.webTests = new WebTestsImpl(this);
        this.analyticsItems = new AnalyticsItemsImpl(this);
        this.operations = new OperationsImpl(this);
        this.workbookTemplates = new WorkbookTemplatesImpl(this);
        this.workbooks = new WorkbooksImpl(this);
        this.liveToken = new LiveTokenImpl(this);
        this.componentLinkedStorageAccountsOperations =
            new ComponentLinkedStorageAccountsOperationsImpl(this);
        this.deletedWorkbooks = new DeletedWorkbooksImpl(this);
    }
}
//# sourceMappingURL=applicationInsightsManagementClient.js.map