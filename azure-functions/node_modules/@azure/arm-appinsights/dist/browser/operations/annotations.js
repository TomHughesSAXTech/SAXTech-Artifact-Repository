/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing Annotations operations. */
export class AnnotationsImpl {
    /**
     * Initialize a new instance of the class Annotations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of annotations for a component for given time range
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param start The start time to query from for annotations, cannot be older than 90 days from current
     *              date.
     * @param end The end time to query for annotations.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceName, start, end, options) {
        const iter = this.listPagingAll(resourceGroupName, resourceName, start, end, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, resourceName, start, end, options, settings);
            },
        };
    }
    listPagingPage(resourceGroupName, resourceName, start, end, options, _settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield __await(this._list(resourceGroupName, resourceName, start, end, options));
            yield yield __await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, resourceName, start, end, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(resourceGroupName, resourceName, start, end, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of annotations for a component for given time range
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param start The start time to query from for annotations, cannot be older than 90 days from current
     *              date.
     * @param end The end time to query for annotations.
     * @param options The options parameters.
     */
    _list(resourceGroupName, resourceName, start, end, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, start, end, options }, listOperationSpec);
    }
    /**
     * Create an Annotation of an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param annotationProperties Properties that need to be specified to create an annotation of a
     *                             Application Insights component.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, annotationProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, annotationProperties, options }, createOperationSpec);
    }
    /**
     * Delete an Annotation of an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param annotationId The unique annotation ID. This is unique within a Application Insights
     *                     component.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, annotationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, annotationId, options }, deleteOperationSpec);
    }
    /**
     * Get the annotation for given id.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param annotationId The unique annotation ID. This is unique within a Application Insights
     *                     component.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, annotationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, annotationId, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnnotationsListResult,
        },
        default: {
            bodyMapper: Mappers.AnnotationError,
        },
    },
    queryParameters: [Parameters.apiVersion1, Parameters.start, Parameters.end],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Annotation" } },
                },
            },
        },
        default: {
            bodyMapper: Mappers.AnnotationError,
        },
    },
    requestBody: Parameters.annotationProperties,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations/{annotationId}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.annotationId,
    ],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations/{annotationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "Annotation" } },
                },
            },
        },
        default: {
            bodyMapper: Mappers.AnnotationError,
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.annotationId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=annotations.js.map