/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing Workbooks operations. */
export class WorkbooksImpl {
    /**
     * Initialize a new instance of the class Workbooks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all Workbooks defined within a specified subscription and category.
     * @param category Category of workbook to return.
     * @param options The options parameters.
     */
    listBySubscription(category, options) {
        const iter = this.listBySubscriptionPagingAll(category, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(category, options, settings);
            },
        };
    }
    listBySubscriptionPagingPage(category, options, settings) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySubscription(category, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySubscriptionPagingAll(category, options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBySubscriptionPagingPage(category, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all Workbooks defined within a specified resource group and category.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param category Category of workbook to return.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, category, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, category, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, category, options, settings);
            },
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, category, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroup(resourceGroupName, category, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, category, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, category, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get the revisions for the workbook defined by its resourceName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param options The options parameters.
     */
    listRevisionsList(resourceGroupName, resourceName, options) {
        const iter = this.revisionsListPagingAll(resourceGroupName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.revisionsListPagingPage(resourceGroupName, resourceName, options, settings);
            },
        };
    }
    revisionsListPagingPage(resourceGroupName, resourceName, options, settings) {
        return __asyncGenerator(this, arguments, function* revisionsListPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._revisionsList(resourceGroupName, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._revisionsListNext(resourceGroupName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    revisionsListPagingAll(resourceGroupName, resourceName, options) {
        return __asyncGenerator(this, arguments, function* revisionsListPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.revisionsListPagingPage(resourceGroupName, resourceName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get all Workbooks defined within a specified subscription and category.
     * @param category Category of workbook to return.
     * @param options The options parameters.
     */
    _listBySubscription(category, options) {
        return this.client.sendOperationRequest({ category, options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get all Workbooks defined within a specified resource group and category.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param category Category of workbook to return.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, category, options) {
        return this.client.sendOperationRequest({ resourceGroupName, category, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get a single workbook by its resourceName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getOperationSpec);
    }
    /**
     * Delete a workbook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, deleteOperationSpec);
    }
    /**
     * Create a new workbook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param workbookProperties Properties that need to be specified to create a new workbook.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, resourceName, workbookProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, workbookProperties, options }, createOrUpdateOperationSpec);
    }
    /**
     * Updates a workbook that has already been added.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, updateOperationSpec);
    }
    /**
     * Get the revisions for the workbook defined by its resourceName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param options The options parameters.
     */
    _revisionsList(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, revisionsListOperationSpec);
    }
    /**
     * Get a single workbook revision defined by its revisionId.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param revisionId The id of the workbook's revision.
     * @param options The options parameters.
     */
    revisionGet(resourceGroupName, resourceName, revisionId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, revisionId, options }, revisionGetOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * RevisionsListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the workbook resource. The value must be an UUID.
     * @param nextLink The nextLink from the previous successful call to the RevisionsList method.
     * @param options The options parameters.
     */
    _revisionsListNext(resourceGroupName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, nextLink, options }, revisionsListNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/workbooks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkbooksListResult,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    queryParameters: [
        Parameters.canFetchContent,
        Parameters.tags,
        Parameters.category,
        Parameters.apiVersion5,
    ],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer,
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkbooksListResult,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    queryParameters: [
        Parameters.canFetchContent,
        Parameters.tags,
        Parameters.category,
        Parameters.apiVersion5,
        Parameters.sourceId,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Workbook,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    queryParameters: [Parameters.canFetchContent, Parameters.apiVersion5],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Workbook,
        },
        201: {
            bodyMapper: Mappers.Workbook,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    requestBody: Parameters.workbookProperties,
    queryParameters: [Parameters.apiVersion5, Parameters.sourceId],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Workbook,
        },
        201: {
            bodyMapper: Mappers.Workbook,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    requestBody: Parameters.workbookUpdateParameters,
    queryParameters: [Parameters.apiVersion5, Parameters.sourceId],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const revisionsListOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}/revisions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkbooksListResult,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const revisionGetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}/revisions/{revisionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Workbook,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.revisionId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkbooksListResult,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkbooksListResult,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const revisionsListNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkbooksListResult,
        },
        default: {
            bodyMapper: Mappers.WorkbookError,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=workbooks.js.map