{"version":3,"file":"components.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/components.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  ApplicationInsightsComponent,\n  ComponentsListOptionalParams,\n  ComponentsListByResourceGroupOptionalParams,\n  ComponentsDeleteOptionalParams,\n  ComponentsGetOptionalParams,\n  ComponentsGetResponse,\n  ComponentsCreateOrUpdateOptionalParams,\n  ComponentsCreateOrUpdateResponse,\n  TagsResource,\n  ComponentsUpdateTagsOptionalParams,\n  ComponentsUpdateTagsResponse,\n  ComponentPurgeBody,\n  ComponentsPurgeOptionalParams,\n  ComponentsPurgeResponse,\n  ComponentsGetPurgeStatusOptionalParams,\n  ComponentsGetPurgeStatusResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Components. */\nexport interface Components {\n  /**\n   * Gets a list of all Application Insights components within a subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: ComponentsListOptionalParams,\n  ): PagedAsyncIterableIterator<ApplicationInsightsComponent>;\n  /**\n   * Gets a list of Application Insights components within a resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: ComponentsListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<ApplicationInsightsComponent>;\n  /**\n   * Deletes an Application Insights component.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the Application Insights component resource.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ComponentsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Returns an Application Insights component.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the Application Insights component resource.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: ComponentsGetOptionalParams,\n  ): Promise<ComponentsGetResponse>;\n  /**\n   * Creates (or updates) an Application Insights component. Note: You cannot specify a different value\n   * for InstrumentationKey nor AppId in the Put operation.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the Application Insights component resource.\n   * @param insightProperties Properties that need to be specified to create an Application Insights\n   *                          component.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    resourceName: string,\n    insightProperties: ApplicationInsightsComponent,\n    options?: ComponentsCreateOrUpdateOptionalParams,\n  ): Promise<ComponentsCreateOrUpdateResponse>;\n  /**\n   * Updates an existing component's tags. To update other fields use the CreateOrUpdate method.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the Application Insights component resource.\n   * @param componentTags Updated tag information to set into the component instance.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    resourceName: string,\n    componentTags: TagsResource,\n    options?: ComponentsUpdateTagsOptionalParams,\n  ): Promise<ComponentsUpdateTagsResponse>;\n  /**\n   * Purges data in an Application Insights component by a set of user-defined filters.\n   *\n   * In order to manage system resources, purge requests are throttled at 50 requests per hour. You\n   * should batch the execution of purge requests by sending a single command whose predicate includes\n   * all user identities that require purging. Use the in operator to specify multiple identities. You\n   * should run the query prior to using for a purge request to verify that the results are expected.\n   * Note: this operation is intended for Classic resources, for  workspace-based Application Insights\n   * resource please run purge operation (directly on the\n   * workspace)(  https://learn.microsoft.com/rest/api/loganalytics/workspace-purge/purge) , scoped to\n   * specific resource id.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the Application Insights component resource.\n   * @param body Describes the body of a request to purge data in a single table of an Application\n   *             Insights component\n   * @param options The options parameters.\n   */\n  purge(\n    resourceGroupName: string,\n    resourceName: string,\n    body: ComponentPurgeBody,\n    options?: ComponentsPurgeOptionalParams,\n  ): Promise<ComponentsPurgeResponse>;\n  /**\n   * Get status for an ongoing purge operation.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param resourceName The name of the Application Insights component resource.\n   * @param purgeId In a purge status request, this is the Id of the operation the status of which is\n   *                returned.\n   * @param options The options parameters.\n   */\n  getPurgeStatus(\n    resourceGroupName: string,\n    resourceName: string,\n    purgeId: string,\n    options?: ComponentsGetPurgeStatusOptionalParams,\n  ): Promise<ComponentsGetPurgeStatusResponse>;\n}\n"]}