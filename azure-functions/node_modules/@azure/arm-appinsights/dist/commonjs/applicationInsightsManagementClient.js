"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationInsightsManagementClient = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const coreRestPipeline = tslib_1.__importStar(require("@azure/core-rest-pipeline"));
const index_js_1 = require("./operations/index.js");
class ApplicationInsightsManagementClient extends coreClient.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-arm-appinsights/5.0.0-beta.8`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.components = new index_js_1.ComponentsImpl(this);
        this.annotations = new index_js_1.AnnotationsImpl(this);
        this.aPIKeys = new index_js_1.APIKeysImpl(this);
        this.exportConfigurations = new index_js_1.ExportConfigurationsImpl(this);
        this.componentCurrentBillingFeatures =
            new index_js_1.ComponentCurrentBillingFeaturesImpl(this);
        this.componentQuotaStatus = new index_js_1.ComponentQuotaStatusImpl(this);
        this.componentFeatureCapabilities = new index_js_1.ComponentFeatureCapabilitiesImpl(this);
        this.componentAvailableFeatures = new index_js_1.ComponentAvailableFeaturesImpl(this);
        this.proactiveDetectionConfigurations =
            new index_js_1.ProactiveDetectionConfigurationsImpl(this);
        this.workItemConfigurations = new index_js_1.WorkItemConfigurationsImpl(this);
        this.favorites = new index_js_1.FavoritesImpl(this);
        this.webTestLocations = new index_js_1.WebTestLocationsImpl(this);
        this.webTests = new index_js_1.WebTestsImpl(this);
        this.analyticsItems = new index_js_1.AnalyticsItemsImpl(this);
        this.operations = new index_js_1.OperationsImpl(this);
        this.workbookTemplates = new index_js_1.WorkbookTemplatesImpl(this);
        this.workbooks = new index_js_1.WorkbooksImpl(this);
        this.liveToken = new index_js_1.LiveTokenImpl(this);
        this.componentLinkedStorageAccountsOperations =
            new index_js_1.ComponentLinkedStorageAccountsOperationsImpl(this);
        this.deletedWorkbooks = new index_js_1.DeletedWorkbooksImpl(this);
    }
}
exports.ApplicationInsightsManagementClient = ApplicationInsightsManagementClient;
//# sourceMappingURL=applicationInsightsManagementClient.js.map