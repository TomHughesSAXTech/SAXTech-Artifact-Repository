"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportConfigurationsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing ExportConfigurations operations. */
class ExportConfigurationsImpl {
    /**
     * Initialize a new instance of the class ExportConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of Continuous Export configuration of an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listOperationSpec);
    }
    /**
     * Create a Continuous Export configuration of an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param exportProperties Properties that need to be specified to create a Continuous Export
     *                         configuration of a Application Insights component.
     * @param options The options parameters.
     */
    create(resourceGroupName, resourceName, exportProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, exportProperties, options }, createOperationSpec);
    }
    /**
     * Delete a Continuous Export configuration of an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param exportId The Continuous Export configuration ID. This is unique within a Application Insights
     *                 component.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, exportId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, exportId, options }, deleteOperationSpec);
    }
    /**
     * Get the Continuous Export configuration for this export id.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param exportId The Continuous Export configuration ID. This is unique within a Application Insights
     *                 component.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, exportId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, exportId, options }, getOperationSpec);
    }
    /**
     * Update the Continuous Export configuration for this export id.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param exportId The Continuous Export configuration ID. This is unique within a Application Insights
     *                 component.
     * @param exportProperties Properties that need to be specified to update the Continuous Export
     *                         configuration.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, exportId, exportProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, exportId, exportProperties, options }, updateOperationSpec);
    }
}
exports.ExportConfigurationsImpl = ExportConfigurationsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationInsightsComponentExportConfiguration",
                        },
                    },
                },
            },
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationInsightsComponentExportConfiguration",
                        },
                    },
                },
            },
        },
    },
    requestBody: Parameters.exportProperties,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInsightsComponentExportConfiguration,
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.exportId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInsightsComponentExportConfiguration,
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.exportId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInsightsComponentExportConfiguration,
        },
    },
    requestBody: Parameters.exportProperties,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.exportId,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=exportConfigurations.js.map