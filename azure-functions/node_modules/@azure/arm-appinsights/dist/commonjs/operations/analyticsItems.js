"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsItemsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing AnalyticsItems operations. */
class AnalyticsItemsImpl {
    /**
     * Initialize a new instance of the class AnalyticsItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of Analytics Items defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared
     *                  between all users with access to the Application Insights component.
     * @param options The options parameters.
     */
    list(resourceGroupName, resourceName, scopePath, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, scopePath, options }, listOperationSpec);
    }
    /**
     * Gets a specific Analytics Items defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared
     *                  between all users with access to the Application Insights component.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, scopePath, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, scopePath, options }, getOperationSpec);
    }
    /**
     * Adds or Updates a specific Analytics Item within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared
     *                  between all users with access to the Application Insights component.
     * @param itemProperties Properties that need to be specified to create a new item and add it to an
     *                       Application Insights component.
     * @param options The options parameters.
     */
    put(resourceGroupName, resourceName, scopePath, itemProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, scopePath, itemProperties, options }, putOperationSpec);
    }
    /**
     * Deletes a specific Analytics Items defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared
     *                  between all users with access to the Application Insights component.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, scopePath, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, scopePath, options }, deleteOperationSpec);
    }
}
exports.AnalyticsItemsImpl = AnalyticsItemsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationInsightsComponentAnalyticsItem",
                        },
                    },
                },
            },
        },
    },
    queryParameters: [
        Parameters.apiVersion1,
        Parameters.scope,
        Parameters.typeParam,
        Parameters.includeContent,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.scopePath,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInsightsComponentAnalyticsItem,
        },
    },
    queryParameters: [Parameters.apiVersion1, Parameters.id, Parameters.name],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.scopePath,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInsightsComponentAnalyticsItem,
        },
    },
    requestBody: Parameters.itemProperties,
    queryParameters: [Parameters.apiVersion1, Parameters.overrideItem],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.scopePath,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [Parameters.apiVersion1, Parameters.id, Parameters.name],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.scopePath,
    ],
    serializer,
};
//# sourceMappingURL=analyticsItems.js.map