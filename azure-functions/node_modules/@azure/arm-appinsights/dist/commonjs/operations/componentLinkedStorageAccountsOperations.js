"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentLinkedStorageAccountsOperationsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing ComponentLinkedStorageAccountsOperations operations. */
class ComponentLinkedStorageAccountsOperationsImpl {
    /**
     * Initialize a new instance of the class ComponentLinkedStorageAccountsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the current linked storage settings for an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param storageType The type of the Application Insights component data source for the linked storage
     *                    account.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, storageType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, storageType, options }, getOperationSpec);
    }
    /**
     * Replace current linked storage account for an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param storageType The type of the Application Insights component data source for the linked storage
     *                    account.
     * @param linkedStorageAccountsProperties Properties that need to be specified to update linked storage
     *                                        accounts for an Application Insights component.
     * @param options The options parameters.
     */
    createAndUpdate(resourceGroupName, resourceName, storageType, linkedStorageAccountsProperties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            storageType,
            linkedStorageAccountsProperties,
            options,
        }, createAndUpdateOperationSpec);
    }
    /**
     * Update linked storage accounts for an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param storageType The type of the Application Insights component data source for the linked storage
     *                    account.
     * @param linkedStorageAccountsProperties Properties that need to be specified to update a linked
     *                                        storage accounts for an Application Insights component.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, storageType, linkedStorageAccountsProperties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            storageType,
            linkedStorageAccountsProperties,
            options,
        }, updateOperationSpec);
    }
    /**
     * Delete linked storage accounts for an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Application Insights component resource.
     * @param storageType The type of the Application Insights component data source for the linked storage
     *                    account.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, storageType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, storageType, options }, deleteOperationSpec);
    }
}
exports.ComponentLinkedStorageAccountsOperationsImpl = ComponentLinkedStorageAccountsOperationsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentLinkedStorageAccounts,
        },
        default: {
            bodyMapper: Mappers.ErrorResponseLinkedStorage,
        },
    },
    queryParameters: [Parameters.apiVersion7],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.storageType,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createAndUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentLinkedStorageAccounts,
        },
        default: {
            bodyMapper: Mappers.ErrorResponseLinkedStorage,
        },
    },
    requestBody: Parameters.linkedStorageAccountsProperties,
    queryParameters: [Parameters.apiVersion7],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.storageType,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentLinkedStorageAccounts,
        },
        default: {
            bodyMapper: Mappers.ErrorResponseLinkedStorage,
        },
    },
    requestBody: Parameters.linkedStorageAccountsProperties1,
    queryParameters: [Parameters.apiVersion7],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.storageType,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponseLinkedStorage,
        },
    },
    queryParameters: [Parameters.apiVersion7],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.storageType,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=componentLinkedStorageAccountsOperations.js.map